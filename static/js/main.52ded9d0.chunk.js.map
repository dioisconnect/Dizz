{"version":3,"sources":["assets/logo.svg","utils/utils.tsx","utils/fetch-loop.tsx","utils/connection.tsx","components/Link.js","utils/notifications.tsx","utils/wallet.tsx","utils/send.tsx","utils/tokens.tsx","utils/bonfidaConnector.tsx","utils/markets.tsx","global_style.ts","components/ErrorBoundary.jsx","utils/useInterval.tsx","components/layout/FloatingElement.jsx","components/Orderbook.jsx","utils/usePrevious.tsx","components/layout/DataTable.jsx","components/UserInfoTable/BalancesTable.jsx","components/UserInfoTable/OpenOrderTable.tsx","components/UserInfoTable/FillsTable.jsx","components/UserInfoTable/FeesTable.js","components/UserInfoTable/index.jsx","components/DepositDialog.jsx","components/StandaloneTokenAccountSelect.tsx","components/LinkAddress.tsx","components/StandaloneBalancesDisplay.tsx","components/TradeForm.tsx","components/TradesTable.tsx","components/DeprecatedMarketsInstructions.js","components/CustomMarketDialog.jsx","pages/TradePage.tsx","pages/OpenOrdersPage.tsx","components/UserInfoTable/WalletBalancesTable.tsx","pages/BalancesPage.tsx","components/WalletConnect.tsx","components/ConvertForm.tsx","pages/ConvertPage.tsx","utils/preferences.tsx","components/Settings.jsx","components/CustomClusterEndpointDialog.tsx","components/AppSearch.tsx","components/TopBar.tsx","components/HelpUrls.ts","components/Footer.tsx","components/BasicLayout.js","components/useMintInput.tsx","pages/ListNewMarketPage.jsx","pages/pools/NewPoolPage.tsx","components/MintName.tsx","pages/pools/PoolPage/PoolBasketDisplay.tsx","pages/pools/PoolPage/PoolInfoPanel.tsx","pages/pools/PoolPage/PoolCreateRedeemPanel.tsx","pages/pools/PoolPage/PoolBalancesPanel.tsx","pages/pools/PoolPage/PoolAdminPanel.tsx","pages/pools/PoolPage/index.tsx","pages/pools/PoolListPage.tsx","routes.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","isValidPublicKey","key","PublicKey","sleep","ms","a","Promise","resolve","setTimeout","percentFormat","Intl","NumberFormat","undefined","style","minimumFractionDigits","maximumFractionDigits","floorToDecimal","value","decimals","Math","floor","roundToDecimal","round","getDecimalCount","isNaN","toString","split","length","divideBnToNumber","numerator","denominator","quotient","div","toNumber","rem","umod","gcd","getTokenMultiplierFromDecimals","BN","pow","localStorageListeners","useLocalStorageStringState","defaultState","state","localStorage","getItem","useState","notify","useEffect","push","filter","listener","setState","useCallback","newState","removeItem","setItem","forEach","useLocalStorageState","JSON","stringify","stringState","setStringState","parse","abbreviateAddress","address","size","base58","toBase58","slice","isEqual","obj1","obj2","keys","Object","k","pageLoadTime","Date","globalCache","Map","FetchLoopListener","cacheKey","fn","refreshInterval","refreshIntervalOnError","callback","cacheNullValues","this","FetchLoopInternal","timeoutId","listeners","errors","refresh","clearTimeout","stopped","errored","data","console","log","set","notifyListeners","warn","waitTime","min","timeSincePageLoad","document","visibilityState","hasFocus","random","Set","previousRefreshInterval","add","assert","delete","map","refreshIntervalsOnError","x","globalLoops","loops","has","get","addListener","loop","removeListener","all","values","useAsyncData","asyncFn","useReducer","i","rerender","loaded","refreshCache","clearCache","refreshAllCaches","ENDPOINTS","name","endpoint","custom","accountListenerCount","ConnectionContext","React","createContext","ConnectionProvider","children","setEndpoint","customEndpoints","setCustomEndpoints","availableEndpoints","concat","connection","useMemo","Connection","sendConnection","id","onAccountChange","Account","publicKey","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","Provider","useConnection","context","useContext","Error","useSendConnection","useConnectionConfig","endpointInfo","find","info","useAccountInfo","tuple","getAccountInfo","accountInfo","count","previousInfo","subscriptionId","equals","lamports","initializeOnly","setCache","currentItem","previousInfoRef","useRef","current","useAccountData","Link","external","props","to","rest","href","target","rel","message","description","txid","type","placement","color","notification","opacity","backgroundColor","WALLET_PROVIDERS","url","WalletContext","WalletProvider","providerUrl","savedProviderUrl","setProviderUrl","wallet","Wallet","connected","setConnected","on","walletPublicKey","substring","disconnect","providerName","useWallet","setProvider","createTokenAccountTransaction","mintPublicKey","newAccount","transaction","Transaction","SystemProgram","getMinimumBalanceForRentExemption","TokenInstructions","TOKEN_PROGRAM_ID","fromPubkey","newAccountPubkey","space","programId","instruction","createAccount","initializeAccount","account","mint","owner","signer","settleFunds","market","openOrders","baseCurrencyAccount","quoteCurrencyAccount","baseCurrencyAccountPubkey","pubkey","quoteCurrencyAccountPubkey","baseMintAddress","result","createAccountTransaction","createAccountSigner","quoteMintAddress","supportsReferralFees","TOKEN_MINTS","makeSettleFundsTransaction","settleFundsTransaction","settleFundsSigners","signers","mergeTransactions","sendTransaction","sendingMessage","settleAllFunds","tokenAccounts","markets","selectedTokenAccounts","programIds","reduce","cumulative","m","_programId","p","getOpenOrdersAccountsForProgramId","OpenOrders","findForOwner","openOrdersAccounts","baseTokenFree","quoteTokenFree","openOrdersAccountsForProgramIds","accounts","openOrdersAccount","_decoded","ownAddress","baseMint","quoteMint","selectedBaseTokenAccount","getSelectedTokenAccountForMint","selectedQuoteTokenAccount","settleTransactions","transactions","t","s","cancelOrder","params","cancelOrders","orders","order","makeMatchOrdersTransaction","makeCancelOrderInstruction","placeOrder","side","price","orderType","formattedMinOrderSize","minOrderSize","toFixed","formattedTickSize","tickSize","isIncrement","num","step","abs","createAccountSigners","payer","matchOrderstransaction","makePlaceOrderTransaction","placeOrderTx","placeOrderSigners","listMarket","getVaultOwnerAndNonce","nonce","createProgramAddress","toBuffer","toArrayLike","Buffer","dexProgramId","vaultOwner","iaddn","baseLotSize","quoteLotSize","requestQueue","eventQueue","bids","asks","baseVault","quoteVault","feeRateBps","quoteDustThreshold","vaultSignerNonce","tx1","tx2","Market","getLayout","span","DexInstructions","initializeMarket","signTransaction","signedTransactions","signedTransaction","sendSignedTransaction","getUnixTs","getTime","sentMessage","successMessage","timeout","getRecentBlockhash","recentBlockhash","blockhash","setSigners","partialSign","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","done","awaitTransactionSignatureConfirmation","simulateResult","simulateTransaction","err","logs","line","startsWith","reject","onSignature","e","getSignatureStatuses","signatureStatuses","confirmations","resultDescription","AccountInfoResult","struct","executable","rentEpoch","GetMultipleAccountsAndContextRpcResult","array","union","jsonRpcVersion","literal","jsonrpc","error","jsonRpcResult","slot","getMultipleSolanaAccounts","publicKeys","args","commitment","_rpcRequest","unsafeRes","res","join","from","fromEntries","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","encoding","ACCOUNT_LAYOUT","BufferLayout","MINT_LAYOUT","parseTokenAccountData","decode","amount","parseTokenMintData","initialized","supply","getOwnedAccountsFilters","memcmp","offset","offsetOf","bytes","dataSize","getOwnedTokenAccounts","filters","resp","bs58","every","filterBytes","getTokenAccountInfo","ownerAddress","splAccounts","parsedSplAccounts","effectiveMint","WRAPPED_SOL_MINT","useMintToTickers","customMarkets","useMarket","useAllMarkets","mintsToTickers","customMarketInfo","customMarket","baseLabel","quoteLabel","useMintInfos","useTokenAccounts","allMarkets","allMints","marketInfo","uniqueMints","stringMint","mintInfos","entries","BonfidaApi","path","fetch","URL","response","ok","json","responseJson","success","marketAddress","USE_MARKETS","MARKETS","getMarketInfos","load","marketName","_VERY_SLOW_REFRESH_INTERVAL","useUnmigratedOpenOrdersAccounts","deprecatedOpenOrdersAccounts","deprecatedProgramIds","Array","deprecated","publicKeyStr","baseTokenTotal","quoteTokenTotal","some","MarketContext","DEFAULT_MARKET","getMarketDetails","otherMarket","baseCurrency","token","quoteCurrency","MarketProvider","setMarketAddress","setCustomMarkets","marketInfos","setMarket","then","catch","useSelectedTokenAccounts","useMarkPrice","markPrice","setMarkPrice","useOrderbook","orderbook","trades","limit","_useUnfilteredTrades","eventFlags","maker","trade","useTrades","bb","Number","ba","last","sort","b","getUnfilteredTrades","loadFills","useOrderbookAccounts","bidData","askData","bidOrderbook","Orderbook","askOrderbook","depth","getL2","useOpenOrdersAccounts","fast","getOpenOrdersAccounts","findOpenOrdersAccountsForOwner","useSelectedOpenOrdersAccount","selectedPubKey","filtered","useSelectedQuoteCurrencyAccount","mintAddress","useSelectedBaseCurrencyAccount","useSelectedQuoteCurrencyBalances","quoteSplSizeToNumber","useSelectedBaseCurrencyBalances","baseSplSizeToNumber","useAllOpenOrdersAccounts","stringProgramId","flat","useBalances","baseCurrencyBalances","quoteCurrencyBalances","baseExists","quoteExists","coin","sub","unsettled","useUnmigratedDeprecatedMarkets","marketsList","deps","getMarket","openOrdersList","customMarketsInfo","getMarketOrderPrice","cost","tickSizeDecimals","isBids","costAtLevel","spentCost","sendPrice","getExpectedFillPrice","sizeAtLevel","avgPrice","totalAvgPrice","GlobalStyle","createGlobalStyle","Title","Typography","ErrorBoundary","hasError","level","Component","useInterval","delay","savedCallback","setInterval","clearInterval","Wrapper","styled","FloatingElement","stretchVertical","height","SizeTitle","Row","MarkPriceTitle","Line","css","Price","smallScreen","onPrice","onSize","currentOrderbookData","lastOrderbookData","orderbookData","setOrderbookData","getCumulativeOrderbookSide","totalSize","backwards","cumulativeSize","sizePercent","reverse","sum","total","index","bidsToDisplay","asksToDisplay","flex","overflow","textAlign","OrderbookRow","onPriceClick","onSizeClick","MarkPriceComponent","memo","element","classList","contains","remove","formattedSize","formattedPrice","ref","marginBottom","onClick","data-width","data-bgcolor","prevProps","nextProps","previousMarkPrice","usePrevious","markPriceColor","formattedMarkPrice","justify","ArrowUpOutlined","marginRight","ArrowDownOutlined","DataTable","dataSource","columns","emptyLabel","pagination","loading","pageSize","renderEmpty","padding","display","justifyContent","alignItems","BalancesTable","balances","showMarket","hideWalletBalance","onSettleSuccess","title","dataIndex","render","ghost","onSettleFunds","CancelButton","Button","OpenOrderTable","onCancelSuccess","marketFilter","cancelId","setCancelId","orderId","marketFilters","orderInfos","text","onFilter","record","indexOf","fontWeight","charAt","toUpperCase","sorter","showSorterTooltip","icon","DeleteOutlined","cancel","FillsTable","fills","fill","useFills","liquidity","FeesTable","findFeeDiscountKeys","useFeeDiscountKeys","feeTier","row","marginLeft","format","getFeeRates","taker","_","SRM_MINT","MSRM_MINT","marginTop","FeeScheduleTable","balance","Paragraph","TabPane","Tabs","Index","paddingTop","defaultActiveKey","tab","supportsSrmFeeDiscounts","OpenOrdersTab","filterForOpenOrders","useOpenOrders","BalancesTab","DepositDialog","coinMint","depositCoin","onClose","baseOrQuote","visible","onOk","onCancel","StandaloneTokenAccountsSelect","selectedValue","label","setSelectedTokenAccounts","Fragment","width","onSelect","newSelectedTokenAccounts","Option","Text","code","shape","CopyOutlined","navigator","clipboard","writeText","LinkAddress","LinkOutlined","RowBox","Tip","ActionButton","StandaloneBalancesDisplay","setBaseOrQuote","formattedBalances","currency","borderColor","content","trigger","InfoCircleOutlined","align","paddingBottom","block","SellButton","BuyButton","sliderMarks","0","25","50","75","100","TradeForm","setChangeOrderRef","setSide","postOnly","setPostOnly","ioc","setIoc","baseSize","setBaseSize","quoteSize","setQuoteSize","setPrice","submitting","setSubmitting","sizeFraction","setSizeFraction","quoteBalance","baseBalance","sizeDecimalCount","priceDecimalCount","doChangeOrder","onSliderChange","updateSizeFraction","onSetBaseSize","usePrice","maxSize","parseFloat","newSize","formatted","onSubmit","flexDirection","Group","onChange","buttonStyle","background","addonBefore","suffix","fontSize","compact","onSetQuoteSize","tipFormatter","marks","checked","disabled","PublicTrades","getRecentTrades","useBonfidaTrades","minHeight","maxHeight","paddingRight","overflowY","time","toLocaleTimeString","DeprecatedMarketsInstructions","switchToLiveMarkets","openOrderAccountBalances","inOrdersBase","inOrdersQuote","unsettledBase","unsettledQuote","useBalancesForDeprecatedMarkets","marketsAndOrders","getOrders","loadOrdersForOwner","refreshOpenOrders","useGetOpenOrdersForDeprecatedMarkets","needToCancelOrders","filteredBalances","needToSettleFunds","CustomMarketDialog","onAddCustomMarket","marketId","setMarketId","marketLabel","setMarketLabel","setBaseLabel","setQuoteLabel","loadingMarket","setLoadingMarket","wellFormedMarketId","marketAccountInfo","resetLabels","finally","knownMarket","knownProgram","knownBaseCurrency","knownQuoteCurrency","canSubmit","onDoClose","okText","okButtonProps","placeholder","LoadingOutlined","gutter","Select","OptGroup","TradePage","handleDeprecated","setHandleDeprecated","addMarketVisible","setAddMarketVisible","deprecatedMarkets","window","innerHeight","innerWidth","dimensions","setDimensions","changeOrderRef","handleResize","addEventListener","removeEventListener","componentProps","onChangeOrderRef","getComponent","newCustomMarkets","paddingLeft","MarketSelector","onDeleteCustomMarket","PlusCircleOutlined","extractBase","extractQuote","selectedMarket","proposedMarket","showSearch","optionFilterProp","listHeight","filterOption","input","option","toLowerCase","stopPropagation","nativeEvent","stopImmediatePropagation","DeprecatedMarketsPage","RenderNormal","flexWrap","RenderSmall","RenderSmaller","xs","sm","OpenOrdersPage","openOrdersAccountsConnected","marketInfosConnected","openOrdersAccountsByAddress","marketsAddr","marketsByAddress","getAllOpenOrders","marketAddr","loadBids","loadAsks","useAllOpenOrders","marketAddressesToNames","WalletBalancesTable","walletBalances","tokenAccountsConnected","allMarketsConnected","settlingFunds","setSettlingFunds","walletBalance","BalancesPage","mintInfosConnected","parsedAccount","mintInfo","additionalAmount","useWalletBalancesForAllMarkets","mintToTickers","openOrdersBalances","loadedOpenOrdersAccounts","baseMintInfo","baseFree","baseTotal","quoteMintInfo","quoteFree","quoteTotal","free","useAllOpenOrdersBalances","openOrdersFree","openOrdersTotal","WalletConnect","connect","UserOutlined","ConvertButton","ConvertForm","fromToken","setFromToken","toToken","setToToken","setSize","marketInfosbyName","tokenConvertMap","base","quote","maxWidth","minWidth","ConvertFormSubmit","fromAmount","setFromAmount","toAmount","setToAmount","isConverting","setIsConverting","isFromTokenBaseOfMarket","onConvert","sidedOrderbookAccount","decodedOrderbookData","parsedPrice","parsedSize","getPrice","expectedPrice","canConvert","coinBalance","availableBalance","SwapOutlined","ConvertPage","PreferencesContext","PreferencesProvider","autoSettleEnabled","setAutoSettleEnabled","marketList","autoSettle","autoApprove","Settings","usePreferences","CustomClusterEndpointDialog","testingConnection","onAddCustomEndpoint","customEndpoint","setCustomEndpoint","customEndpointName","setCustomEndpointName","appsAndTokens","apps","tags","AppSearch","searchMatches","setSearchMatches","searchValue","setSearchValue","handleClear","options","d","replace","allowClear","focussed","onSearch","filteredApps","app","searchString","lowerSearchStr","includes","tag","matchApp","onClear","open","onFocus","onBlur","notFoundContent","transition","dropdownStyle","dropdownMatchSelectWidth","suffixIcon","SearchOutlined","focus","LogoWrapper","EXTERNAL_LINKS","TopBar","addEndpointVisible","setAddEndpointVisible","setTestingConnection","location","useLocation","history","useHistory","searchFocussed","setSearchFocussed","handleClick","endpointInfoCustom","handler","handleError","getEpochInfo","newCustomEndpoints","src","logo","alt","mode","selectedKeys","pathname","borderBottom","Item","margin","SubMenu","onTitleClick","SettingOutlined","helpUrls","Footer","Layout","useBreakpoint","Grid","footerElements","link","CustomFooter","lg","elem","Header","Content","BasicLayout","useMintInput","tooltip","setAddress","ticker","validateStatus","hasFeedback","help","parsed","ListNewMarketPage","baseMintInput","quoteMintInput","lotSize","setLotSize","setTickSize","listedMarket","setListedMarket","labelCol","wrapperCol","layout","onFinish","initialValue","trim","colon","htmlType","AddRemoveTokenButtons","SIMPLE_POOL_PROGRAM_ID","DEFAULT_PROGRAM_ID","PROGRAM_ID_OPTIONS","NewPoolPage","poolName","setPoolName","setProgramId","initialSupply","setInitialSupply","valid","initialAssets","setInitialAssets","adminControlled","setAdminControlled","newPoolAddress","setNewPoolAddress","asset","assets","PoolTransactions","initializeSimplePool","poolStateSpace","poolMintDecimals","initialPoolMintSupply","assetMints","initialAssetQuantities","quantity","creator","creatorAssets","found","tokenAccount","additionalAccounts","isSigner","isWritable","poolAddress","signed","AssetInput","mintInput","setQuantity","change","parsedQuantity","old","MintName","showAddress","mintKey","PoolBasketDisplay","poolInfo","basket","BasketItem","quantities","mintAccountInfo","quantityDisplay","feeFormat","PoolInfoPanel","getPoolBasket","redeem","totalBasket","copyable","poolTokenMint","adminKey","feeRate","PoolCreateRedeemPanel","CreateRedeemTab","action","create","basketLoaded","findTokenAccount","preventDefault","execute","poolTokenAccount","assetAccounts","PoolBalancesPanel","WalletBalancesTab","PoolBalancesTab","BalanceItem","vaultAddress","balanceAccountInfo","PoolAdminPanel","PauseUnpauseTab","AddAssetTab","RemoveAssetTab","DepositTab","WithdrawTab","UpdateFeeTab","AdminControlledPoolInstructions","pause","unpause","useOnSubmitHandler","getAssociatedTokenAddress","vaultSigner","createAssociatedTokenAccount","addAsset","MintSelector","SubmitButton","removeAsset","MintInPoolSelector","walletTokenAccount","mintDecimals","wrappedSolAccount","transfer","source","destination","closeAccount","approveDelegate","setFeeRate","updateFee","makeTransaction","className","PoolPage","useParams","isPublicKey","poolAccountInfo","poolAccountLoaded","decodePoolState","program","mintAccountInfoLoaded","onBack","subTitle","isAdminControlledPool","Form","form","PoolListPage","setPoolAddress","Routes","basename","exact","component","App","fallback","Boolean","hostname","match","ReactDOM","StrictMode","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52ded9d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.49174c73.svg\";","import { useCallback, useEffect, useState } from 'react';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport BN from 'bn.js';\r\n\r\nexport function isValidPublicKey(key) {\r\n  if (!key) {\r\n    return false;\r\n  }\r\n  try {\r\n    new PublicKey(key);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport const percentFormat = new Intl.NumberFormat(undefined, {\r\n  style: 'percent',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport function floorToDecimal(\r\n  value: number,\r\n  decimals: number | undefined | null,\r\n) {\r\n  return decimals ? Math.floor(value * 10 ** decimals) / 10 ** decimals : value;\r\n}\r\n\r\nexport function roundToDecimal(\r\n  value: number,\r\n  decimals: number | undefined | null,\r\n) {\r\n  return decimals ? Math.round(value * 10 ** decimals) / 10 ** decimals : value;\r\n}\r\n\r\nexport function getDecimalCount(value): number {\r\n  if (!isNaN(value) && Math.floor(value) !== value)\r\n    return value.toString().split('.')[1].length || 0;\r\n  return 0;\r\n}\r\n\r\nexport function divideBnToNumber(numerator: BN, denominator: BN): number {\r\n  const quotient = numerator.div(denominator).toNumber();\r\n  const rem = numerator.umod(denominator);\r\n  const gcd = rem.gcd(denominator);\r\n  return quotient + rem.div(gcd).toNumber() / denominator.div(gcd).toNumber();\r\n}\r\n\r\nexport function getTokenMultiplierFromDecimals(decimals: number): BN {\r\n  return new BN(10).pow(new BN(decimals));\r\n}\r\n\r\nconst localStorageListeners = {};\r\n\r\nexport function useLocalStorageStringState(\r\n  key: string,\r\n  defaultState: string | null = null,\r\n): [string | null, (newState: string | null) => void] {\r\n  const state = localStorage.getItem(key) || defaultState;\r\n\r\n  const [, notify] = useState(key + '\\n' + state);\r\n\r\n  useEffect(() => {\r\n    if (!localStorageListeners[key]) {\r\n      localStorageListeners[key] = [];\r\n    }\r\n    localStorageListeners[key].push(notify);\r\n    return () => {\r\n      localStorageListeners[key] = localStorageListeners[key].filter(\r\n        (listener) => listener !== notify,\r\n      );\r\n      if (localStorageListeners[key].length === 0) {\r\n        delete localStorageListeners[key];\r\n      }\r\n    };\r\n  }, [key]);\r\n\r\n  const setState = useCallback<(newState: string | null) => void>(\r\n    (newState) => {\r\n      const changed = state !== newState;\r\n      if (!changed) {\r\n        return;\r\n      }\r\n\r\n      if (newState === null) {\r\n        localStorage.removeItem(key);\r\n      } else {\r\n        localStorage.setItem(key, newState);\r\n      }\r\n      localStorageListeners[key].forEach((listener) =>\r\n        listener(key + '\\n' + newState),\r\n      );\r\n    },\r\n    [state, key],\r\n  );\r\n\r\n  return [state, setState];\r\n}\r\n\r\nexport function useLocalStorageState<T = any>(\r\n  key: string,\r\n  defaultState: T | null = null,\r\n): [T, (newState: T) => void] {\r\n  let [stringState, setStringState] = useLocalStorageStringState(\r\n    key,\r\n    JSON.stringify(defaultState),\r\n  );\r\n  return [\r\n    stringState && JSON.parse(stringState),\r\n    (newState) => setStringState(JSON.stringify(newState)),\r\n  ];\r\n}\r\n\r\nexport function useEffectAfterTimeout(effect, timeout) {\r\n  useEffect(() => {\r\n    const handle = setTimeout(effect, timeout);\r\n    return () => clearTimeout(handle);\r\n  });\r\n}\r\n\r\nexport function useListener(emitter, eventName) {\r\n  const [, forceUpdate] = useState(0);\r\n  useEffect(() => {\r\n    const listener = () => forceUpdate((i) => i + 1);\r\n    emitter.on(eventName, listener);\r\n    return () => emitter.removeListener(eventName, listener);\r\n  }, [emitter, eventName]);\r\n}\r\n\r\nexport function abbreviateAddress(address: PublicKey, size = 4) {\r\n  const base58 = address.toBase58();\r\n  return base58.slice(0, size) + '…' + base58.slice(-size);\r\n}\r\n\r\nexport function isEqual(obj1, obj2, keys) {\r\n  if (!keys && Object.keys(obj1).length !== Object.keys(obj2).length) {\r\n    return false;\r\n  }\r\n  keys = keys || Object.keys(obj1);\r\n  for (const k of keys) {\r\n    if (obj1[k] !== obj2[k]) {\r\n      // shallow comparison\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","import { useEffect, useReducer } from 'react';\r\n\r\nimport assert from 'assert';\r\n\r\nconst pageLoadTime = new Date();\r\n\r\nconst globalCache: Map<any, any> = new Map();\r\n\r\nclass FetchLoopListener<T = any> {\r\n  cacheKey: any;\r\n  fn: () => Promise<T>;\r\n  refreshInterval: number;\r\n  refreshIntervalOnError: number | null;\r\n  callback: () => void;\r\n  cacheNullValues: Boolean = true;\r\n\r\n  constructor(\r\n    cacheKey: any,\r\n    fn: () => Promise<T>,\r\n    refreshInterval: number,\r\n    refreshIntervalOnError: number | null,\r\n    callback: () => void,\r\n    cacheNullValues: Boolean,\r\n  ) {\r\n    this.cacheKey = cacheKey;\r\n    this.fn = fn;\r\n    this.refreshInterval = refreshInterval;\r\n    this.refreshIntervalOnError = refreshIntervalOnError;\r\n    this.callback = callback;\r\n    this.cacheNullValues = cacheNullValues;\r\n  }\r\n}\r\n\r\nclass FetchLoopInternal<T = any> {\r\n  cacheKey: any;\r\n  fn: () => Promise<T>;\r\n  timeoutId: null | any;\r\n  listeners: Set<FetchLoopListener<T>>;\r\n  errors: number;\r\n  cacheNullValues: Boolean = true;\r\n\r\n  constructor(cacheKey: any, fn: () => Promise<T>, cacheNullValues: Boolean) {\r\n    this.cacheKey = cacheKey;\r\n    this.fn = fn;\r\n    this.timeoutId = null;\r\n    this.listeners = new Set();\r\n    this.errors = 0;\r\n    this.cacheNullValues = cacheNullValues;\r\n  }\r\n\r\n  get refreshInterval(): number {\r\n    return Math.min(\r\n      ...[...this.listeners].map((listener) => listener.refreshInterval),\r\n    );\r\n  }\r\n\r\n  get refreshIntervalOnError(): number | null {\r\n    const refreshIntervalsOnError: number[] = [...this.listeners]\r\n      .map((listener) => listener.refreshIntervalOnError)\r\n      .filter((x): x is number => x !== null);\r\n    if (refreshIntervalsOnError.length === 0) {\r\n      return null;\r\n    }\r\n    return Math.min(...refreshIntervalsOnError);\r\n  }\r\n\r\n  get stopped(): boolean {\r\n    return this.listeners.size === 0;\r\n  }\r\n\r\n  addListener(listener: FetchLoopListener<T>): void {\r\n    const previousRefreshInterval = this.refreshInterval;\r\n    this.listeners.add(listener);\r\n    if (this.refreshInterval < previousRefreshInterval) {\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  removeListener(listener: FetchLoopListener<T>): void {\r\n    assert(this.listeners.delete(listener));\r\n    if (this.stopped) {\r\n      if (this.timeoutId) {\r\n        clearTimeout(this.timeoutId);\r\n        this.timeoutId = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  notifyListeners(): void {\r\n    this.listeners.forEach((listener) => listener.callback());\r\n  }\r\n\r\n  refresh = async () => {\r\n    if (this.timeoutId) {\r\n      clearTimeout(this.timeoutId);\r\n      this.timeoutId = null;\r\n    }\r\n    if (this.stopped) {\r\n      return;\r\n    }\r\n\r\n    let errored = false;\r\n    try {\r\n      const data = await this.fn();\r\n      if (!this.cacheNullValues && data === null) {\r\n        console.log(`Not caching null value for ${this.cacheKey}`);\r\n        // cached data has not changed so no need to re-render\r\n        this.errors = 0;\r\n        return data;\r\n      } else {\r\n        globalCache.set(this.cacheKey, data);\r\n        this.errors = 0;\r\n        this.notifyListeners();\r\n        return data;\r\n      }\r\n    } catch (error) {\r\n      ++this.errors;\r\n      console.warn(error);\r\n      errored = true;\r\n    } finally {\r\n      if (!this.timeoutId && !this.stopped) {\r\n        let waitTime = this.refreshInterval;\r\n        if (\r\n          errored &&\r\n          this.refreshIntervalOnError &&\r\n          this.refreshIntervalOnError > 0\r\n        ) {\r\n          waitTime = this.refreshIntervalOnError;\r\n        }\r\n\r\n        // Back off on errors.\r\n        if (this.errors > 0) {\r\n          waitTime = Math.min(1000 * 2 ** (this.errors - 1), 60000);\r\n        }\r\n\r\n        // Don't do any refreshing for the first five seconds, to make way for other things to load.\r\n        const timeSincePageLoad = +new Date() - +pageLoadTime;\r\n        if (timeSincePageLoad < 5000) {\r\n          waitTime += 5000 - timeSincePageLoad / 2;\r\n        }\r\n\r\n        // Refresh background pages slowly.\r\n        if (document.visibilityState === 'hidden') {\r\n          waitTime = 60000;\r\n        } else if (!document.hasFocus()) {\r\n          waitTime *= 1.5;\r\n        }\r\n\r\n        // Add jitter so we don't send all requests at the same time.\r\n        waitTime *= 0.8 + 0.4 * Math.random();\r\n\r\n        this.timeoutId = setTimeout(this.refresh, waitTime);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nclass FetchLoops {\r\n  loops = new Map();\r\n\r\n  addListener<T>(listener: FetchLoopListener<T>) {\r\n    if (!this.loops.has(listener.cacheKey)) {\r\n      this.loops.set(\r\n        listener.cacheKey,\r\n        new FetchLoopInternal<T>(\r\n          listener.cacheKey,\r\n          listener.fn,\r\n          listener.cacheNullValues,\r\n        ),\r\n      );\r\n    }\r\n    this.loops.get(listener.cacheKey).addListener(listener);\r\n  }\r\n\r\n  removeListener<T>(listener: FetchLoopListener<T>) {\r\n    const loop = this.loops.get(listener.cacheKey);\r\n    loop.removeListener(listener);\r\n    if (loop.stopped) {\r\n      this.loops.delete(listener.cacheKey);\r\n      globalCache.delete(listener.cacheKey);\r\n    }\r\n  }\r\n\r\n  refresh(cacheKey) {\r\n    if (this.loops.has(cacheKey)) {\r\n      this.loops.get(cacheKey).refresh();\r\n    }\r\n  }\r\n\r\n  refreshAll() {\r\n    return Promise.all([...this.loops.values()].map((loop) => loop.refresh()));\r\n  }\r\n}\r\nconst globalLoops = new FetchLoops();\r\n\r\nexport function useAsyncData<T = any>(\r\n  asyncFn: () => Promise<T>,\r\n  cacheKey: any,\r\n  { refreshInterval = 60000, refreshIntervalOnError = null } = {},\r\n  cacheNullValues: Boolean = true,\r\n): [null | undefined | T, boolean] {\r\n  const [, rerender] = useReducer((i) => i + 1, 0);\r\n\r\n  useEffect(() => {\r\n    if (!cacheKey) {\r\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n      return () => {};\r\n    }\r\n    const listener = new FetchLoopListener<T>(\r\n      cacheKey,\r\n      asyncFn,\r\n      refreshInterval,\r\n      refreshIntervalOnError,\r\n      rerender,\r\n      cacheNullValues,\r\n    );\r\n    globalLoops.addListener(listener);\r\n    return () => globalLoops.removeListener(listener);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [cacheKey, refreshInterval]);\r\n\r\n  if (!cacheKey) {\r\n    return [null, false];\r\n  }\r\n\r\n  const loaded = globalCache.has(cacheKey);\r\n  const data = loaded ? globalCache.get(cacheKey) : undefined;\r\n  return [data, loaded];\r\n}\r\n\r\nexport function refreshCache(cacheKey: any, clearCache = false): void {\r\n  if (clearCache) {\r\n    globalCache.delete(cacheKey);\r\n  }\r\n  const loop = globalLoops.loops.get(cacheKey);\r\n  if (loop) {\r\n    loop.refresh();\r\n    if (clearCache) {\r\n      loop.notifyListeners();\r\n    }\r\n  }\r\n}\r\n\r\nexport function refreshAllCaches(): void {\r\n  for (const loop of globalLoops.loops.values()) {\r\n    loop.refresh();\r\n  }\r\n}\r\n\r\nexport function setCache(\r\n  cacheKey: any,\r\n  value: any,\r\n  { initializeOnly = false } = {},\r\n): void {\r\n  if (initializeOnly && globalCache.has(cacheKey)) {\r\n    return;\r\n  }\r\n  globalCache.set(cacheKey, value);\r\n  const loop = globalLoops.loops.get(cacheKey);\r\n  if (loop) {\r\n    loop.notifyListeners();\r\n  }\r\n}\r\n","import { useLocalStorageState } from './utils';\r\nimport { Account, AccountInfo, Connection, PublicKey } from '@solana/web3.js';\r\nimport React, { useContext, useEffect, useMemo, useRef } from 'react';\r\nimport { setCache, useAsyncData } from './fetch-loop';\r\nimport tuple from 'immutable-tuple';\r\nimport { ConnectionContextValues, EndpointInfo } from './types';\r\n\r\nexport const ENDPOINTS: EndpointInfo[] = [\r\n  {\r\n    name: 'mainnet-beta',\r\n    endpoint: 'https://solana-api.projectserum.com',\r\n    custom: false,\r\n  },\r\n  { name: 'localnet', endpoint: 'http://127.0.0.1:8899', custom: false },\r\n];\r\n\r\nconst accountListenerCount = new Map();\r\n\r\nconst ConnectionContext: React.Context<null | ConnectionContextValues> = React.createContext<null | ConnectionContextValues>(\r\n  null,\r\n);\r\n\r\nexport function ConnectionProvider({ children }) {\r\n  const [endpoint, setEndpoint] = useLocalStorageState<string>(\r\n    'connectionEndpts',\r\n    ENDPOINTS[0].endpoint,\r\n  );\r\n  const [customEndpoints, setCustomEndpoints] = useLocalStorageState<\r\n    EndpointInfo[]\r\n  >('customConnectionEndpoints', []);\r\n  const availableEndpoints = ENDPOINTS.concat(customEndpoints);\r\n\r\n  const connection = useMemo(() => new Connection(endpoint, 'recent'), [\r\n    endpoint,\r\n  ]);\r\n  const sendConnection = useMemo(() => new Connection(endpoint, 'recent'), [\r\n    endpoint,\r\n  ]);\r\n\r\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\r\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\r\n  // This is a hack to prevent the list from every getting empty\r\n  useEffect(() => {\r\n    const id = connection.onAccountChange(new Account().publicKey, () => {});\r\n    return () => {\r\n      connection.removeAccountChangeListener(id);\r\n    };\r\n  }, [connection]);\r\n\r\n  useEffect(() => {\r\n    const id = connection.onSlotChange(() => null);\r\n    return () => {\r\n      connection.removeSlotChangeListener(id);\r\n    };\r\n  }, [connection]);\r\n\r\n  useEffect(() => {\r\n    const id = sendConnection.onAccountChange(\r\n      new Account().publicKey,\r\n      () => {},\r\n    );\r\n    return () => {\r\n      sendConnection.removeAccountChangeListener(id);\r\n    };\r\n  }, [sendConnection]);\r\n\r\n  useEffect(() => {\r\n    const id = sendConnection.onSlotChange(() => null);\r\n    return () => {\r\n      sendConnection.removeSlotChangeListener(id);\r\n    };\r\n  }, [sendConnection]);\r\n\r\n  return (\r\n    <ConnectionContext.Provider\r\n      value={{\r\n        endpoint,\r\n        setEndpoint,\r\n        connection,\r\n        sendConnection,\r\n        availableEndpoints,\r\n        setCustomEndpoints,\r\n      }}\r\n    >\r\n      {children}\r\n    </ConnectionContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useConnection() {\r\n  const context = useContext(ConnectionContext);\r\n  if (!context) {\r\n    throw new Error('Missing connection context');\r\n  }\r\n  return context.connection;\r\n}\r\n\r\nexport function useSendConnection() {\r\n  const context = useContext(ConnectionContext);\r\n  if (!context) {\r\n    throw new Error('Missing connection context');\r\n  }\r\n  return context.sendConnection;\r\n}\r\n\r\nexport function useConnectionConfig() {\r\n  const context = useContext(ConnectionContext);\r\n  if (!context) {\r\n    throw new Error('Missing connection context');\r\n  }\r\n  return {\r\n    endpoint: context.endpoint,\r\n    endpointInfo: context.availableEndpoints.find(\r\n      (info) => info.endpoint === context.endpoint,\r\n    ),\r\n    setEndpoint: context.setEndpoint,\r\n    availableEndpoints: context.availableEndpoints,\r\n    setCustomEndpoints: context.setCustomEndpoints,\r\n  };\r\n}\r\n\r\nexport function useAccountInfo(\r\n  publicKey: PublicKey | undefined | null,\r\n): [AccountInfo<Buffer> | null | undefined, boolean] {\r\n  const connection = useConnection();\r\n  const cacheKey = tuple(connection, publicKey?.toBase58());\r\n  const [accountInfo, loaded] = useAsyncData<AccountInfo<Buffer> | null>(\r\n    async () => (publicKey ? connection.getAccountInfo(publicKey) : null),\r\n    cacheKey,\r\n    { refreshInterval: 60_000 },\r\n  );\r\n  useEffect(() => {\r\n    if (!publicKey) {\r\n      return;\r\n    }\r\n    if (accountListenerCount.has(cacheKey)) {\r\n      let currentItem = accountListenerCount.get(cacheKey);\r\n      ++currentItem.count;\r\n    } else {\r\n      let previousInfo: AccountInfo<Buffer> | null = null;\r\n      const subscriptionId = connection.onAccountChange(publicKey, (info) => {\r\n        if (\r\n          !previousInfo ||\r\n          !previousInfo.data.equals(info.data) ||\r\n          previousInfo.lamports !== info.lamports\r\n        ) {\r\n          previousInfo = info;\r\n          setCache(cacheKey, info);\r\n        }\r\n      });\r\n      accountListenerCount.set(cacheKey, { count: 1, subscriptionId });\r\n    }\r\n    return () => {\r\n      let currentItem = accountListenerCount.get(cacheKey);\r\n      let nextCount = currentItem.count - 1;\r\n      if (nextCount <= 0) {\r\n        connection.removeAccountChangeListener(currentItem.subscriptionId);\r\n        accountListenerCount.delete(cacheKey);\r\n      } else {\r\n        --currentItem.count;\r\n      }\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [cacheKey]);\r\n  const previousInfoRef = useRef<AccountInfo<Buffer> | null | undefined>(null);\r\n  if (\r\n    !accountInfo ||\r\n    !previousInfoRef.current ||\r\n    !previousInfoRef.current.data.equals(accountInfo.data) ||\r\n    previousInfoRef.current.lamports !== accountInfo.lamports\r\n  ) {\r\n    previousInfoRef.current = accountInfo;\r\n  }\r\n  return [previousInfoRef.current, loaded];\r\n}\r\n\r\nexport function useAccountData(publicKey) {\r\n  const [accountInfo] = useAccountInfo(publicKey);\r\n  return accountInfo && accountInfo.data;\r\n}\r\n","import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nexport default function Link({ external = false, ...props }) {\r\n  let { to, children, ...rest } = props;\r\n  if (external) {\r\n    return (\r\n      <a href={to} target=\"_blank\" rel=\"noopener noreferrer\" {...rest}>\r\n        {children}\r\n      </a>\r\n    );\r\n  }\r\n  return (\r\n    <RouterLink to={to} {...rest}>\r\n      {children}\r\n    </RouterLink>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { notification } from 'antd';\r\nimport Link from '../components/Link';\r\n\r\nexport function notify({\r\n  message,\r\n  description,\r\n  txid,\r\n  type = 'info',\r\n  placement = 'bottomLeft',\r\n}: {\r\n  message: string;\r\n  description?: string | JSX.Element;\r\n  txid?: string;\r\n  type?: string;\r\n  placement?: string;\r\n}) {\r\n  if (txid) {\r\n    description = (\r\n      <Link\r\n        external\r\n        to={'https://explorer.solana.com/tx/' + txid}\r\n        style={{ color: '#0000ff' }}\r\n      >\r\n        View transaction {txid.slice(0, 8)}...{txid.slice(txid.length - 8)}\r\n      </Link>\r\n    );\r\n  }\r\n  notification[type]({\r\n    message: <span style={{ color: 'black' }}>{message}</span>,\r\n    description: (\r\n      <span style={{ color: 'black', opacity: 0.5 }}>{description}</span>\r\n    ),\r\n    placement,\r\n    style: {\r\n      backgroundColor: 'white',\r\n    },\r\n  });\r\n}\r\n","import React, { useContext, useEffect, useMemo, useState } from 'react';\r\nimport Wallet from '@project-serum/sol-wallet-adapter';\r\nimport { notify } from './notifications';\r\nimport { useConnectionConfig } from './connection';\r\nimport { useLocalStorageState } from './utils';\r\nimport { WalletContextValues } from './types';\r\n\r\nexport const WALLET_PROVIDERS = [\r\n  { name: 'sollet.io', url: 'https://www.sollet.io' },\r\n];\r\n\r\nconst WalletContext = React.createContext<null | WalletContextValues>(null);\r\n\r\nexport function WalletProvider({ children }) {\r\n  const { endpoint } = useConnectionConfig();\r\n\r\n  const [savedProviderUrl, setProviderUrl] = useLocalStorageState(\r\n    'walletProvider',\r\n    'https://www.sollet.io',\r\n  );\r\n  let providerUrl;\r\n  if (!savedProviderUrl) {\r\n    providerUrl = 'https://www.sollet.io';\r\n  } else {\r\n    providerUrl = savedProviderUrl;\r\n  }\r\n\r\n  const wallet = useMemo(() => new Wallet(providerUrl, endpoint), [\r\n    providerUrl,\r\n    endpoint,\r\n  ]);\r\n\r\n  const [connected, setConnected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.log('trying to connect');\r\n    wallet.on('connect', () => {\r\n      console.log('connected');\r\n      setConnected(true);\r\n      let walletPublicKey = wallet.publicKey.toBase58();\r\n      let keyToDisplay =\r\n        walletPublicKey.length > 20\r\n          ? `${walletPublicKey.substring(0, 7)}.....${walletPublicKey.substring(\r\n              walletPublicKey.length - 7,\r\n              walletPublicKey.length,\r\n            )}`\r\n          : walletPublicKey;\r\n      notify({\r\n        message: 'Wallet update',\r\n        description: 'Connected to wallet ' + keyToDisplay,\r\n      });\r\n    });\r\n    wallet.on('disconnect', () => {\r\n      setConnected(false);\r\n      notify({\r\n        message: 'Wallet update',\r\n        description: 'Disconnected from wallet',\r\n      });\r\n    });\r\n    return () => {\r\n      wallet.disconnect();\r\n      setConnected(false);\r\n    };\r\n  }, [wallet]);\r\n\r\n  return (\r\n    <WalletContext.Provider\r\n      value={{\r\n        wallet,\r\n        connected,\r\n        providerUrl,\r\n        setProviderUrl,\r\n        providerName:\r\n          WALLET_PROVIDERS.find(({ url }) => url === providerUrl)?.name ??\r\n          providerUrl,\r\n      }}\r\n    >\r\n      {children}\r\n    </WalletContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useWallet() {\r\n  const context = useContext(WalletContext);\r\n  if (!context) {\r\n    throw new Error('Missing wallet context');\r\n  }\r\n  return {\r\n    connected: context.connected,\r\n    wallet: context.wallet,\r\n    providerUrl: context.providerUrl,\r\n    setProvider: context.setProviderUrl,\r\n    providerName: context.providerName,\r\n  };\r\n}\r\n","import { notify } from './notifications';\r\nimport { getDecimalCount, sleep } from './utils';\r\nimport { getSelectedTokenAccountForMint } from './markets';\r\nimport {\r\n  Account,\r\n  AccountInfo,\r\n  Commitment,\r\n  Connection,\r\n  PublicKey,\r\n  RpcResponseAndContext,\r\n  SimulatedTransactionResponse,\r\n  SystemProgram,\r\n  Transaction,\r\n  TransactionSignature,\r\n} from '@solana/web3.js';\r\nimport BN from 'bn.js';\r\nimport {\r\n  DexInstructions,\r\n  Market,\r\n  OpenOrders,\r\n  TOKEN_MINTS,\r\n  TokenInstructions,\r\n} from '@project-serum/serum';\r\nimport Wallet from '@project-serum/sol-wallet-adapter';\r\nimport { SelectedTokenAccounts, TokenAccount } from './types';\r\nimport { Order } from '@project-serum/serum/lib/market';\r\nimport { Buffer } from 'buffer';\r\nimport assert from 'assert';\r\nimport { struct } from 'superstruct';\r\n\r\nexport async function createTokenAccountTransaction({\r\n  connection,\r\n  wallet,\r\n  mintPublicKey,\r\n}: {\r\n  connection: Connection;\r\n  wallet: Wallet;\r\n  mintPublicKey: PublicKey;\r\n}): Promise<{\r\n  transaction: Transaction;\r\n  signer: Account;\r\n  newAccountPubkey: PublicKey;\r\n}> {\r\n  const newAccount = new Account();\r\n  const transaction = new Transaction();\r\n  const instruction = SystemProgram.createAccount({\r\n    fromPubkey: wallet.publicKey,\r\n    newAccountPubkey: newAccount.publicKey,\r\n    lamports: await connection.getMinimumBalanceForRentExemption(165),\r\n    space: 165,\r\n    programId: TokenInstructions.TOKEN_PROGRAM_ID,\r\n  });\r\n  transaction.add(instruction);\r\n  transaction.add(\r\n    TokenInstructions.initializeAccount({\r\n      account: newAccount.publicKey,\r\n      mint: mintPublicKey,\r\n      owner: wallet.publicKey,\r\n    }),\r\n  );\r\n  return {\r\n    transaction,\r\n    signer: newAccount,\r\n    newAccountPubkey: newAccount.publicKey,\r\n  };\r\n}\r\n\r\nexport async function settleFunds({\r\n  market,\r\n  openOrders,\r\n  connection,\r\n  wallet,\r\n  baseCurrencyAccount,\r\n  quoteCurrencyAccount,\r\n}: {\r\n  market: Market;\r\n  openOrders: OpenOrders;\r\n  connection: Connection;\r\n  wallet: Wallet;\r\n  baseCurrencyAccount: TokenAccount;\r\n  quoteCurrencyAccount: TokenAccount;\r\n}): Promise<string | undefined> {\r\n  if (\r\n    !market ||\r\n    !wallet ||\r\n    !connection ||\r\n    !openOrders ||\r\n    (!baseCurrencyAccount && !quoteCurrencyAccount)\r\n  ) {\r\n    notify({ message: 'Not connected' });\r\n    return;\r\n  }\r\n\r\n  let createAccountTransaction: Transaction | undefined;\r\n  let createAccountSigner: Account | undefined;\r\n  let baseCurrencyAccountPubkey = baseCurrencyAccount?.pubkey;\r\n  let quoteCurrencyAccountPubkey = quoteCurrencyAccount?.pubkey;\r\n\r\n  if (!baseCurrencyAccountPubkey) {\r\n    const result = await createTokenAccountTransaction({\r\n      connection,\r\n      wallet,\r\n      mintPublicKey: market.baseMintAddress,\r\n    });\r\n    baseCurrencyAccountPubkey = result?.newAccountPubkey;\r\n    createAccountTransaction = result?.transaction;\r\n    createAccountSigner = result?.signer;\r\n  }\r\n  if (!quoteCurrencyAccountPubkey) {\r\n    const result = await createTokenAccountTransaction({\r\n      connection,\r\n      wallet,\r\n      mintPublicKey: market.quoteMintAddress,\r\n    });\r\n    quoteCurrencyAccountPubkey = result?.newAccountPubkey;\r\n    createAccountTransaction = result?.transaction;\r\n    createAccountSigner = result?.signer;\r\n  }\r\n  let referrerQuoteWallet: PublicKey | null = null;\r\n  if (market.supportsReferralFees) {\r\n    const usdt = TOKEN_MINTS.find(({ name }) => name === 'USDT');\r\n    const usdc = TOKEN_MINTS.find(({ name }) => name === 'USDC');\r\n    if (\r\n      process.env.REACT_APP_USDT_REFERRAL_FEES_ADDRESS &&\r\n      usdt &&\r\n      market.quoteMintAddress.equals(usdt.address)\r\n    ) {\r\n      referrerQuoteWallet = new PublicKey(\r\n        process.env.REACT_APP_USDT_REFERRAL_FEES_ADDRESS,\r\n      );\r\n    } else if (\r\n      process.env.REACT_APP_USDC_REFERRAL_FEES_ADDRESS &&\r\n      usdc &&\r\n      market.quoteMintAddress.equals(usdc.address)\r\n    ) {\r\n      referrerQuoteWallet = new PublicKey(\r\n        process.env.REACT_APP_USDC_REFERRAL_FEES_ADDRESS,\r\n      );\r\n    }\r\n  }\r\n  const {\r\n    transaction: settleFundsTransaction,\r\n    signers: settleFundsSigners,\r\n  } = await market.makeSettleFundsTransaction(\r\n    connection,\r\n    openOrders,\r\n    baseCurrencyAccountPubkey,\r\n    quoteCurrencyAccountPubkey,\r\n    referrerQuoteWallet,\r\n  );\r\n\r\n  let transaction = mergeTransactions([\r\n    createAccountTransaction,\r\n    settleFundsTransaction,\r\n  ]);\r\n  let signers = createAccountSigner\r\n    ? [...settleFundsSigners, createAccountSigner]\r\n    : settleFundsSigners;\r\n\r\n  return await sendTransaction({\r\n    transaction,\r\n    signers,\r\n    wallet,\r\n    connection,\r\n    sendingMessage: 'Settling funds...',\r\n  });\r\n}\r\n\r\nexport async function settleAllFunds({\r\n  connection,\r\n  wallet,\r\n  tokenAccounts,\r\n  markets,\r\n  selectedTokenAccounts,\r\n}: {\r\n  connection: Connection;\r\n  wallet: Wallet;\r\n  tokenAccounts: TokenAccount[];\r\n  markets: Market[];\r\n  selectedTokenAccounts?: SelectedTokenAccounts;\r\n}) {\r\n  if (!markets || !wallet || !connection || !tokenAccounts) {\r\n    return;\r\n  }\r\n\r\n  const programIds: PublicKey[] = [];\r\n  markets\r\n    .reduce((cumulative, m) => {\r\n      // @ts-ignore\r\n      cumulative.push(m._programId);\r\n      return cumulative;\r\n    }, [])\r\n    .forEach((programId) => {\r\n      if (!programIds.find((p) => p.equals(programId))) {\r\n        programIds.push(programId);\r\n      }\r\n    });\r\n\r\n  const getOpenOrdersAccountsForProgramId = async (programId) => {\r\n    const openOrdersAccounts = await OpenOrders.findForOwner(\r\n      connection,\r\n      wallet.publicKey,\r\n      programId,\r\n    );\r\n    return openOrdersAccounts.filter(\r\n      (openOrders) =>\r\n        openOrders.baseTokenFree.toNumber() ||\r\n        openOrders.quoteTokenFree.toNumber(),\r\n    );\r\n  };\r\n\r\n  const openOrdersAccountsForProgramIds = await Promise.all(\r\n    programIds.map((programId) => getOpenOrdersAccountsForProgramId(programId)),\r\n  );\r\n  const openOrdersAccounts = openOrdersAccountsForProgramIds.reduce(\r\n    (accounts, current) => accounts.concat(current),\r\n    [],\r\n  );\r\n\r\n  const settleTransactions = (\r\n    await Promise.all(\r\n      openOrdersAccounts.map((openOrdersAccount) => {\r\n        const market = markets.find((m) =>\r\n          // @ts-ignore\r\n          m._decoded?.ownAddress?.equals(openOrdersAccount.market),\r\n        );\r\n        const baseMint = market?.baseMintAddress;\r\n        const quoteMint = market?.quoteMintAddress;\r\n\r\n        const selectedBaseTokenAccount = getSelectedTokenAccountForMint(\r\n          tokenAccounts,\r\n          baseMint,\r\n          baseMint &&\r\n            selectedTokenAccounts &&\r\n            selectedTokenAccounts[baseMint.toBase58()],\r\n        )?.pubkey;\r\n        const selectedQuoteTokenAccount = getSelectedTokenAccountForMint(\r\n          tokenAccounts,\r\n          quoteMint,\r\n          quoteMint &&\r\n            selectedTokenAccounts &&\r\n            selectedTokenAccounts[quoteMint.toBase58()],\r\n        )?.pubkey;\r\n        if (!selectedBaseTokenAccount || !selectedQuoteTokenAccount) {\r\n          return null;\r\n        }\r\n        return (\r\n          market &&\r\n          market.makeSettleFundsTransaction(\r\n            connection,\r\n            openOrdersAccount,\r\n            selectedBaseTokenAccount,\r\n            selectedQuoteTokenAccount,\r\n          )\r\n        );\r\n      }),\r\n    )\r\n  ).filter(\r\n    (\r\n      x,\r\n    ): x is {\r\n      signers: Account[];\r\n      transaction: Transaction;\r\n      payer: PublicKey;\r\n    } => !!x,\r\n  );\r\n  if (!settleTransactions || settleTransactions.length === 0) return;\r\n\r\n  const transactions = settleTransactions.slice(0, 4).map((t) => t.transaction);\r\n  const signers: Array<Account> = [];\r\n  settleTransactions\r\n    .reduce((cumulative: Array<Account>, t) => cumulative.concat(t.signers), [])\r\n    .forEach((signer) => {\r\n      if (!signers.find((s) => s.publicKey.equals(signer.publicKey))) {\r\n        signers.push(signer);\r\n      }\r\n    });\r\n\r\n  const transaction = mergeTransactions(transactions);\r\n\r\n  return await sendTransaction({\r\n    transaction,\r\n    signers,\r\n    wallet,\r\n    connection,\r\n  });\r\n}\r\n\r\nexport async function cancelOrder(params: {\r\n  market: Market;\r\n  connection: Connection;\r\n  wallet: Wallet;\r\n  order: Order;\r\n}) {\r\n  return cancelOrders({ ...params, orders: [params.order] });\r\n}\r\n\r\nexport async function cancelOrders({\r\n  market,\r\n  wallet,\r\n  connection,\r\n  orders,\r\n}: {\r\n  market: Market;\r\n  wallet: Wallet;\r\n  connection: Connection;\r\n  orders: Order[];\r\n}) {\r\n  const transaction = market.makeMatchOrdersTransaction(5);\r\n  orders.forEach((order) => {\r\n    transaction.add(\r\n      market.makeCancelOrderInstruction(connection, wallet.publicKey, order),\r\n    );\r\n  });\r\n  transaction.add(market.makeMatchOrdersTransaction(5));\r\n  return await sendTransaction({\r\n    transaction,\r\n    wallet,\r\n    connection,\r\n    sendingMessage: 'Sending cancel...',\r\n  });\r\n}\r\n\r\nexport async function placeOrder({\r\n  side,\r\n  price,\r\n  size,\r\n  orderType,\r\n  market,\r\n  connection,\r\n  wallet,\r\n  baseCurrencyAccount,\r\n  quoteCurrencyAccount,\r\n}: {\r\n  side: 'buy' | 'sell';\r\n  price: number;\r\n  size: number;\r\n  orderType: 'ioc' | 'postOnly' | 'limit';\r\n  market: Market | undefined | null;\r\n  connection: Connection;\r\n  wallet: Wallet;\r\n  baseCurrencyAccount: PublicKey | undefined;\r\n  quoteCurrencyAccount: PublicKey | undefined;\r\n}) {\r\n  let formattedMinOrderSize =\r\n    market?.minOrderSize?.toFixed(getDecimalCount(market.minOrderSize)) ||\r\n    market?.minOrderSize;\r\n  let formattedTickSize =\r\n    market?.tickSize?.toFixed(getDecimalCount(market.tickSize)) ||\r\n    market?.tickSize;\r\n  const isIncrement = (num, step) =>\r\n    Math.abs((num / step) % 1) < 1e-5 ||\r\n    Math.abs(((num / step) % 1) - 1) < 1e-5;\r\n  if (isNaN(price)) {\r\n    notify({ message: 'Invalid price', type: 'error' });\r\n    return;\r\n  }\r\n  if (isNaN(size)) {\r\n    notify({ message: 'Invalid size', type: 'error' });\r\n    return;\r\n  }\r\n  if (!wallet || !wallet.publicKey) {\r\n    notify({ message: 'Connect wallet', type: 'error' });\r\n    return;\r\n  }\r\n  if (!market) {\r\n    notify({ message: 'Invalid  market', type: 'error' });\r\n    return;\r\n  }\r\n  if (!isIncrement(size, market.minOrderSize)) {\r\n    notify({\r\n      message: `Size must be an increment of ${formattedMinOrderSize}`,\r\n      type: 'error',\r\n    });\r\n    return;\r\n  }\r\n  if (size < market.minOrderSize) {\r\n    notify({ message: 'Size too small', type: 'error' });\r\n    return;\r\n  }\r\n  if (!isIncrement(price, market.tickSize)) {\r\n    notify({\r\n      message: `Price must be an increment of ${formattedTickSize}`,\r\n      type: 'error',\r\n    });\r\n    return;\r\n  }\r\n  if (price < market.tickSize) {\r\n    notify({ message: 'Price under tick size', type: 'error' });\r\n    return;\r\n  }\r\n  const owner = wallet.publicKey;\r\n  const transaction = new Transaction();\r\n  const signers: Account[] = [];\r\n\r\n  if (!baseCurrencyAccount) {\r\n    const {\r\n      transaction: createAccountTransaction,\r\n      signer: createAccountSigners,\r\n      newAccountPubkey,\r\n    } = await createTokenAccountTransaction({\r\n      connection,\r\n      wallet,\r\n      mintPublicKey: market.baseMintAddress,\r\n    });\r\n    transaction.add(createAccountTransaction);\r\n    signers.push(createAccountSigners);\r\n    baseCurrencyAccount = newAccountPubkey;\r\n  }\r\n  if (!quoteCurrencyAccount) {\r\n    const {\r\n      transaction: createAccountTransaction,\r\n      signer: createAccountSigners,\r\n      newAccountPubkey,\r\n    } = await createTokenAccountTransaction({\r\n      connection,\r\n      wallet,\r\n      mintPublicKey: market.quoteMintAddress,\r\n    });\r\n    transaction.add(createAccountTransaction);\r\n    signers.push(createAccountSigners);\r\n    quoteCurrencyAccount = newAccountPubkey;\r\n  }\r\n\r\n  const payer = side === 'sell' ? baseCurrencyAccount : quoteCurrencyAccount;\r\n  if (!payer) {\r\n    notify({\r\n      message: 'Need an SPL token account for cost currency',\r\n      type: 'error',\r\n    });\r\n    return;\r\n  }\r\n  const params = {\r\n    owner,\r\n    payer,\r\n    side,\r\n    price,\r\n    size,\r\n    orderType,\r\n  };\r\n  console.log(params);\r\n\r\n  const matchOrderstransaction = market.makeMatchOrdersTransaction(5);\r\n  transaction.add(matchOrderstransaction);\r\n  let {\r\n    transaction: placeOrderTx,\r\n    signers: placeOrderSigners,\r\n  } = await market.makePlaceOrderTransaction(\r\n    connection,\r\n    params,\r\n    10_000,\r\n    10_000,\r\n  );\r\n  transaction.add(placeOrderTx);\r\n  transaction.add(market.makeMatchOrdersTransaction(5));\r\n  signers.push(...placeOrderSigners);\r\n\r\n  return await sendTransaction({\r\n    transaction,\r\n    wallet,\r\n    connection,\r\n    signers,\r\n    sendingMessage: 'Sending order...',\r\n  });\r\n}\r\n\r\nexport async function listMarket({\r\n  connection,\r\n  wallet,\r\n  baseMint,\r\n  quoteMint,\r\n  baseLotSize,\r\n  quoteLotSize,\r\n  dexProgramId,\r\n}: {\r\n  connection: Connection;\r\n  wallet: Wallet;\r\n  baseMint: PublicKey;\r\n  quoteMint: PublicKey;\r\n  baseLotSize: number;\r\n  quoteLotSize: number;\r\n  dexProgramId: PublicKey;\r\n}) {\r\n  const market = new Account();\r\n  const requestQueue = new Account();\r\n  const eventQueue = new Account();\r\n  const bids = new Account();\r\n  const asks = new Account();\r\n  const baseVault = new Account();\r\n  const quoteVault = new Account();\r\n  const feeRateBps = 0;\r\n  const quoteDustThreshold = new BN(100);\r\n\r\n  async function getVaultOwnerAndNonce() {\r\n    const nonce = new BN(0);\r\n    while (true) {\r\n      try {\r\n        const vaultOwner = await PublicKey.createProgramAddress(\r\n          [market.publicKey.toBuffer(), nonce.toArrayLike(Buffer, 'le', 8)],\r\n          dexProgramId,\r\n        );\r\n        return [vaultOwner, nonce];\r\n      } catch (e) {\r\n        nonce.iaddn(1);\r\n      }\r\n    }\r\n  }\r\n  const [vaultOwner, vaultSignerNonce] = await getVaultOwnerAndNonce();\r\n\r\n  const tx1 = new Transaction();\r\n  tx1.add(\r\n    SystemProgram.createAccount({\r\n      fromPubkey: wallet.publicKey,\r\n      newAccountPubkey: baseVault.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(165),\r\n      space: 165,\r\n      programId: TokenInstructions.TOKEN_PROGRAM_ID,\r\n    }),\r\n    SystemProgram.createAccount({\r\n      fromPubkey: wallet.publicKey,\r\n      newAccountPubkey: quoteVault.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(165),\r\n      space: 165,\r\n      programId: TokenInstructions.TOKEN_PROGRAM_ID,\r\n    }),\r\n    TokenInstructions.initializeAccount({\r\n      account: baseVault.publicKey,\r\n      mint: baseMint,\r\n      owner: vaultOwner,\r\n    }),\r\n    TokenInstructions.initializeAccount({\r\n      account: quoteVault.publicKey,\r\n      mint: quoteMint,\r\n      owner: vaultOwner,\r\n    }),\r\n  );\r\n\r\n  const tx2 = new Transaction();\r\n  tx2.add(\r\n    SystemProgram.createAccount({\r\n      fromPubkey: wallet.publicKey,\r\n      newAccountPubkey: market.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(\r\n        Market.getLayout(dexProgramId).span,\r\n      ),\r\n      space: Market.getLayout(dexProgramId).span,\r\n      programId: dexProgramId,\r\n    }),\r\n    SystemProgram.createAccount({\r\n      fromPubkey: wallet.publicKey,\r\n      newAccountPubkey: requestQueue.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(5120 + 12),\r\n      space: 5120 + 12,\r\n      programId: dexProgramId,\r\n    }),\r\n    SystemProgram.createAccount({\r\n      fromPubkey: wallet.publicKey,\r\n      newAccountPubkey: eventQueue.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(262144 + 12),\r\n      space: 262144 + 12,\r\n      programId: dexProgramId,\r\n    }),\r\n    SystemProgram.createAccount({\r\n      fromPubkey: wallet.publicKey,\r\n      newAccountPubkey: bids.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(65536 + 12),\r\n      space: 65536 + 12,\r\n      programId: dexProgramId,\r\n    }),\r\n    SystemProgram.createAccount({\r\n      fromPubkey: wallet.publicKey,\r\n      newAccountPubkey: asks.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(65536 + 12),\r\n      space: 65536 + 12,\r\n      programId: dexProgramId,\r\n    }),\r\n    DexInstructions.initializeMarket({\r\n      market: market.publicKey,\r\n      requestQueue: requestQueue.publicKey,\r\n      eventQueue: eventQueue.publicKey,\r\n      bids: bids.publicKey,\r\n      asks: asks.publicKey,\r\n      baseVault: baseVault.publicKey,\r\n      quoteVault: quoteVault.publicKey,\r\n      baseMint,\r\n      quoteMint,\r\n      baseLotSize: new BN(baseLotSize),\r\n      quoteLotSize: new BN(quoteLotSize),\r\n      feeRateBps,\r\n      vaultSignerNonce,\r\n      quoteDustThreshold,\r\n      programId: dexProgramId,\r\n    }),\r\n  );\r\n\r\n  const signedTransactions = await Promise.all([\r\n    signTransaction({\r\n      transaction: tx1,\r\n      wallet,\r\n      connection,\r\n      signers: [baseVault, quoteVault],\r\n    }),\r\n    signTransaction({\r\n      transaction: tx2,\r\n      wallet,\r\n      connection,\r\n      signers: [market, requestQueue, eventQueue, bids, asks],\r\n    }),\r\n  ]);\r\n  for (let signedTransaction of signedTransactions) {\r\n    await sendSignedTransaction({\r\n      signedTransaction,\r\n      connection,\r\n    });\r\n  }\r\n\r\n  return market.publicKey;\r\n}\r\n\r\nconst getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nconst DEFAULT_TIMEOUT = 15000;\r\n\r\nexport async function sendTransaction({\r\n  transaction,\r\n  wallet,\r\n  signers = [],\r\n  connection,\r\n  sendingMessage = 'Sending transaction...',\r\n  sentMessage = 'Transaction sent',\r\n  successMessage = 'Transaction confirmed',\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  transaction: Transaction;\r\n  wallet: Wallet;\r\n  signers?: Array<Account>;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}) {\r\n  const signedTransaction = await signTransaction({\r\n    transaction,\r\n    wallet,\r\n    signers,\r\n    connection,\r\n  });\r\n  return await sendSignedTransaction({\r\n    signedTransaction,\r\n    connection,\r\n    sendingMessage,\r\n    sentMessage,\r\n    successMessage,\r\n    timeout,\r\n  });\r\n}\r\n\r\nexport async function signTransaction({\r\n  transaction,\r\n  wallet,\r\n  signers = [],\r\n  connection,\r\n}: {\r\n  transaction: Transaction;\r\n  wallet: Wallet;\r\n  signers?: Array<Account>;\r\n  connection: Connection;\r\n}) {\r\n  transaction.recentBlockhash = (\r\n    await connection.getRecentBlockhash('max')\r\n  ).blockhash;\r\n  transaction.setSigners(wallet.publicKey, ...signers.map((s) => s.publicKey));\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  return await wallet.signTransaction(transaction);\r\n}\r\n\r\nexport async function sendSignedTransaction({\r\n  signedTransaction,\r\n  connection,\r\n  sendingMessage = 'Sending transaction...',\r\n  sentMessage = 'Transaction sent',\r\n  successMessage = 'Transaction confirmed',\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<string> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n  const startTime = getUnixTs();\r\n  notify({ message: sendingMessage });\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n    rawTransaction,\r\n    {\r\n      skipPreflight: true,\r\n    },\r\n  );\r\n  notify({ message: sentMessage, type: 'success', txid });\r\n\r\n  console.log('Started awaiting confirmation for', txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(300);\r\n    }\r\n  })();\r\n  try {\r\n    await awaitTransactionSignatureConfirmation(txid, timeout, connection);\r\n  } catch (err) {\r\n    if (err.timeout) {\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n        await simulateTransaction(connection, signedTransaction, 'single')\r\n      ).value;\r\n    } catch (e) {}\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith('Program log: ')) {\r\n            throw new Error(\r\n              'Transaction failed: ' + line.slice('Program log: '.length),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n  notify({ message: successMessage, type: 'success', txid });\r\n\r\n  console.log('Latency', txid, getUnixTs() - startTime);\r\n  return txid;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n  txid: TransactionSignature,\r\n  timeout: number,\r\n  connection: Connection,\r\n) {\r\n  let done = false;\r\n  const result = await new Promise((resolve, reject) => {\r\n    (async () => {\r\n      setTimeout(() => {\r\n        if (done) {\r\n          return;\r\n        }\r\n        done = true;\r\n        console.log('Timed out for txid', txid);\r\n        reject({ timeout: true });\r\n      }, timeout);\r\n      try {\r\n        connection.onSignature(\r\n          txid,\r\n          (result) => {\r\n            console.log('WS confirmed', txid, result);\r\n            done = true;\r\n            if (result.err) {\r\n              reject(result.err);\r\n            } else {\r\n              resolve(result);\r\n            }\r\n          },\r\n          'recent',\r\n        );\r\n        console.log('Set up WS connection', txid);\r\n      } catch (e) {\r\n        done = true;\r\n        console.log('WS error in setup', txid, e);\r\n      }\r\n      while (!done) {\r\n        // eslint-disable-next-line no-loop-func\r\n        (async () => {\r\n          try {\r\n            const signatureStatuses = await connection.getSignatureStatuses([\r\n              txid,\r\n            ]);\r\n            const result = signatureStatuses && signatureStatuses.value[0];\r\n            if (!done) {\r\n              if (!result) {\r\n                console.log('REST null result for', txid, result);\r\n              } else if (result.err) {\r\n                console.log('REST error for', txid, result);\r\n                done = true;\r\n                reject(result.err);\r\n              } else if (!result.confirmations) {\r\n                console.log('REST no confirmations for', txid, result);\r\n              } else {\r\n                console.log('REST confirmation for', txid, result);\r\n                done = true;\r\n                resolve(result);\r\n              }\r\n            }\r\n          } catch (e) {\r\n            if (!done) {\r\n              console.log('REST connection error: txid', txid, e);\r\n            }\r\n          }\r\n        })();\r\n        await sleep(300);\r\n      }\r\n    })();\r\n  });\r\n  done = true;\r\n  return result;\r\n}\r\n\r\nfunction mergeTransactions(transactions: (Transaction | undefined)[]) {\r\n  const transaction = new Transaction();\r\n  transactions\r\n    .filter((t): t is Transaction => t !== undefined)\r\n    .forEach((t) => {\r\n      transaction.add(t);\r\n    });\r\n  return transaction;\r\n}\r\n\r\nfunction jsonRpcResult(resultDescription: any) {\r\n  const jsonRpcVersion = struct.literal('2.0');\r\n  return struct.union([\r\n    struct({\r\n      jsonrpc: jsonRpcVersion,\r\n      id: 'string',\r\n      error: 'any',\r\n    }),\r\n    struct({\r\n      jsonrpc: jsonRpcVersion,\r\n      id: 'string',\r\n      error: 'null?',\r\n      result: resultDescription,\r\n    }),\r\n  ]);\r\n}\r\n\r\nfunction jsonRpcResultAndContext(resultDescription: any) {\r\n  return jsonRpcResult({\r\n    context: struct({\r\n      slot: 'number',\r\n    }),\r\n    value: resultDescription,\r\n  });\r\n}\r\n\r\nconst AccountInfoResult = struct({\r\n  executable: 'boolean',\r\n  owner: 'string',\r\n  lamports: 'number',\r\n  data: 'any',\r\n  rentEpoch: 'number?',\r\n});\r\n\r\nexport const GetMultipleAccountsAndContextRpcResult = jsonRpcResultAndContext(\r\n  struct.array([struct.union(['null', AccountInfoResult])]),\r\n);\r\n\r\nexport async function getMultipleSolanaAccounts(\r\n  connection: Connection,\r\n  publicKeys: PublicKey[],\r\n): Promise<\r\n  RpcResponseAndContext<{ [key: string]: AccountInfo<Buffer> | null }>\r\n> {\r\n  const args = [publicKeys.map((k) => k.toBase58()), { commitment: 'recent' }];\r\n  // @ts-ignore\r\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\r\n  const res = GetMultipleAccountsAndContextRpcResult(unsafeRes);\r\n  if (res.error) {\r\n    throw new Error(\r\n      'failed to get info about accounts ' +\r\n        publicKeys.map((k) => k.toBase58()).join(', ') +\r\n        ': ' +\r\n        res.error.message,\r\n    );\r\n  }\r\n  assert(typeof res.result !== 'undefined');\r\n  const accounts: Array<{\r\n    executable: any;\r\n    owner: PublicKey;\r\n    lamports: any;\r\n    data: Buffer;\r\n  } | null> = [];\r\n  for (const account of res.result.value) {\r\n    let value: {\r\n      executable: any;\r\n      owner: PublicKey;\r\n      lamports: any;\r\n      data: Buffer;\r\n    } | null = null;\r\n    if (res.result.value) {\r\n      const { executable, owner, lamports, data } = account;\r\n      assert(data[1] === 'base64');\r\n      value = {\r\n        executable,\r\n        owner: new PublicKey(owner),\r\n        lamports,\r\n        data: Buffer.from(data[0], 'base64'),\r\n      };\r\n    }\r\n    accounts.push(value);\r\n  }\r\n  return {\r\n    context: {\r\n      slot: res.result.context.slot,\r\n    },\r\n    value: Object.fromEntries(\r\n      accounts.map((account, i) => [publicKeys[i].toBase58(), account]),\r\n    ),\r\n  };\r\n}\r\n\r\n/** Copy of Connection.simulateTransaction that takes a commitment parameter. */\r\nasync function simulateTransaction(\r\n  connection: Connection,\r\n  transaction: Transaction,\r\n  commitment: Commitment,\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n    // @ts-ignore\r\n    connection._disableBlockhashCaching,\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString('base64');\r\n  const config: any = { encoding: 'base64', commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest('simulateTransaction', args);\r\n  if (res.error) {\r\n    throw new Error('failed to simulate transaction: ' + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n","import * as BufferLayout from 'buffer-layout';\r\nimport bs58 from 'bs58';\r\nimport { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\r\nimport { WRAPPED_SOL_MINT } from '@project-serum/serum/lib/token-instructions';\r\nimport { TokenAccount } from './types';\r\nimport { TOKEN_MINTS } from '@project-serum/serum';\r\nimport { useAllMarkets, useMarket, useTokenAccounts } from './markets';\r\nimport { getMultipleSolanaAccounts } from './send';\r\nimport { useConnection } from './connection';\r\nimport { useAsyncData } from './fetch-loop';\r\nimport tuple from 'immutable-tuple';\r\nimport BN from 'bn.js';\r\nimport { useMemo } from 'react';\r\n\r\nexport const ACCOUNT_LAYOUT = BufferLayout.struct([\r\n  BufferLayout.blob(32, 'mint'),\r\n  BufferLayout.blob(32, 'owner'),\r\n  BufferLayout.nu64('amount'),\r\n  BufferLayout.blob(93),\r\n]);\r\n\r\nexport const MINT_LAYOUT = BufferLayout.struct([\r\n  BufferLayout.blob(36),\r\n  BufferLayout.blob(8, 'supply'),\r\n  BufferLayout.u8('decimals'),\r\n  BufferLayout.u8('initialized'),\r\n  BufferLayout.blob(36),\r\n]);\r\n\r\nexport function parseTokenAccountData(\r\n  data: Buffer,\r\n): { mint: PublicKey; owner: PublicKey; amount: number } {\r\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\r\n  return {\r\n    mint: new PublicKey(mint),\r\n    owner: new PublicKey(owner),\r\n    amount,\r\n  };\r\n}\r\n\r\nexport interface MintInfo {\r\n  decimals: number;\r\n  initialized: boolean;\r\n  supply: BN;\r\n}\r\n\r\nexport function parseTokenMintData(data): MintInfo {\r\n  let { decimals, initialized, supply } = MINT_LAYOUT.decode(data);\r\n  return {\r\n    decimals,\r\n    initialized: !!initialized,\r\n    supply: new BN(supply, 10, 'le'),\r\n  };\r\n}\r\n\r\nexport function getOwnedAccountsFilters(publicKey: PublicKey) {\r\n  return [\r\n    {\r\n      memcmp: {\r\n        offset: ACCOUNT_LAYOUT.offsetOf('owner'),\r\n        bytes: publicKey.toBase58(),\r\n      },\r\n    },\r\n    {\r\n      dataSize: ACCOUNT_LAYOUT.span,\r\n    },\r\n  ];\r\n}\r\n\r\nexport const TOKEN_PROGRAM_ID = new PublicKey(\r\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\r\n);\r\n\r\nexport async function getOwnedTokenAccounts(\r\n  connection: Connection,\r\n  publicKey: PublicKey,\r\n): Promise<Array<{ publicKey: PublicKey; accountInfo: AccountInfo<Buffer> }>> {\r\n  let filters = getOwnedAccountsFilters(publicKey);\r\n  // @ts-ignore\r\n  let resp = await connection._rpcRequest('getProgramAccounts', [\r\n    TOKEN_PROGRAM_ID.toBase58(),\r\n    {\r\n      commitment: connection.commitment,\r\n      filters,\r\n    },\r\n  ]);\r\n  if (resp.error) {\r\n    throw new Error(\r\n      'failed to get token accounts owned by ' +\r\n        publicKey.toBase58() +\r\n        ': ' +\r\n        resp.error.message,\r\n    );\r\n  }\r\n  return resp.result\r\n    .map(({ pubkey, account: { data, executable, owner, lamports } }) => ({\r\n      publicKey: new PublicKey(pubkey),\r\n      accountInfo: {\r\n        data: bs58.decode(data),\r\n        executable,\r\n        owner: new PublicKey(owner),\r\n        lamports,\r\n      },\r\n    }))\r\n    .filter(({ accountInfo }) => {\r\n      // TODO: remove this check once mainnet is updated\r\n      return filters.every((filter) => {\r\n        if (filter.dataSize) {\r\n          return accountInfo.data.length === filter.dataSize;\r\n        } else if (filter.memcmp) {\r\n          let filterBytes = bs58.decode(filter.memcmp.bytes);\r\n          return accountInfo.data\r\n            .slice(\r\n              filter.memcmp.offset,\r\n              filter.memcmp.offset + filterBytes.length,\r\n            )\r\n            .equals(filterBytes);\r\n        }\r\n        return false;\r\n      });\r\n    });\r\n}\r\n\r\nexport async function getTokenAccountInfo(\r\n  connection: Connection,\r\n  ownerAddress: PublicKey,\r\n) {\r\n  let [splAccounts, account] = await Promise.all([\r\n    getOwnedTokenAccounts(connection, ownerAddress),\r\n    connection.getAccountInfo(ownerAddress),\r\n  ]);\r\n  const parsedSplAccounts: TokenAccount[] = splAccounts.map(\r\n    ({ publicKey, accountInfo }) => {\r\n      return {\r\n        pubkey: publicKey,\r\n        account: accountInfo,\r\n        effectiveMint: parseTokenAccountData(accountInfo.data).mint,\r\n      };\r\n    },\r\n  );\r\n  return parsedSplAccounts.concat({\r\n    pubkey: ownerAddress,\r\n    account,\r\n    effectiveMint: WRAPPED_SOL_MINT,\r\n  });\r\n}\r\n\r\nexport function useMintToTickers(): { [mint: string]: string } {\r\n  const { customMarkets } = useMarket();\r\n  const [markets] = useAllMarkets(customMarkets);\r\n  return useMemo(() => {\r\n    const mintsToTickers = Object.fromEntries(\r\n      TOKEN_MINTS.map((mint) => [mint.address.toBase58(), mint.name]),\r\n    );\r\n    for (let market of markets || []) {\r\n      const customMarketInfo = customMarkets.find(\r\n        (customMarket) =>\r\n          customMarket.address === market.market.address.toBase58(),\r\n      );\r\n      if (!(market.market.baseMintAddress.toBase58() in mintsToTickers)) {\r\n        if (customMarketInfo) {\r\n          mintsToTickers[market.market.baseMintAddress.toBase58()] =\r\n            customMarketInfo.baseLabel || `${customMarketInfo.name}_BASE`;\r\n        }\r\n      }\r\n      if (!(market.market.quoteMintAddress.toBase58() in mintsToTickers)) {\r\n        if (customMarketInfo) {\r\n          mintsToTickers[market.market.quoteMintAddress.toBase58()] =\r\n            customMarketInfo.quoteLabel || `${customMarketInfo.name}_QUOTE`;\r\n        }\r\n      }\r\n    }\r\n    return mintsToTickers;\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [markets?.length, customMarkets.length]);\r\n}\r\n\r\nconst _VERY_SLOW_REFRESH_INTERVAL = 5000 * 1000;\r\n\r\nexport function useMintInfos(): [\r\n  (\r\n    | {\r\n        [mintAddress: string]: {\r\n          decimals: number;\r\n          initialized: boolean;\r\n        } | null;\r\n      }\r\n    | null\r\n    | undefined\r\n  ),\r\n  boolean,\r\n] {\r\n  const connection = useConnection();\r\n  const { customMarkets } = useMarket();\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const [allMarkets] = useAllMarkets(customMarkets);\r\n\r\n  const allMints = (tokenAccounts || [])\r\n    .map((account) => account.effectiveMint)\r\n    .concat(\r\n      (allMarkets || []).map((marketInfo) => marketInfo.market.baseMintAddress),\r\n    )\r\n    .concat(\r\n      (allMarkets || []).map(\r\n        (marketInfo) => marketInfo.market.quoteMintAddress,\r\n      ),\r\n    );\r\n  const uniqueMints = [...new Set(allMints.map((mint) => mint.toBase58()))].map(\r\n    (stringMint) => new PublicKey(stringMint),\r\n  );\r\n\r\n  const getAllMintInfo = async () => {\r\n    const mintInfos = await getMultipleSolanaAccounts(connection, uniqueMints);\r\n    return Object.fromEntries(\r\n      Object.entries(mintInfos.value).map(([key, accountInfo]) => [\r\n        key,\r\n        accountInfo && parseTokenMintData(accountInfo.data),\r\n      ]),\r\n    );\r\n  };\r\n\r\n  return useAsyncData(\r\n    getAllMintInfo,\r\n    tuple(\r\n      'getAllMintInfo',\r\n      connection,\r\n      (tokenAccounts || []).length,\r\n      (allMarkets || []).length,\r\n    ),\r\n    { refreshInterval: _VERY_SLOW_REFRESH_INTERVAL },\r\n  );\r\n}\r\n","import { BonfidaTrade } from './types';\r\n\r\nexport default class BonfidaApi {\r\n  static URL: string = 'https://serum-api.bonfida.com/';\r\n\r\n  static async get(path: string) {\r\n    try {\r\n      const response = await fetch(this.URL + path);\r\n      if (response.ok) {\r\n        const responseJson = await response.json();\r\n        return responseJson.success ? responseJson.data : null;\r\n      }\r\n    } catch (err) {\r\n      console.log(`Error fetching from Bonfida API ${path}: ${err}`);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  static async getRecentTrades(\r\n    marketAddress: string,\r\n  ): Promise<BonfidaTrade[] | null> {\r\n    return BonfidaApi.get(`trades/address/${marketAddress}`);\r\n  }\r\n}\r\n\r\nexport const BONFIDA_DATA_FEED = 'https://serum-api.bonfida.com/tv';\r\n","import {\r\n  decodeEventQueue,\r\n  Market,\r\n  MARKETS,\r\n  OpenOrders,\r\n  Orderbook,\r\n  TOKEN_MINTS,\r\n  TokenInstructions,\r\n} from '@project-serum/serum';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport {\r\n  divideBnToNumber,\r\n  floorToDecimal,\r\n  getTokenMultiplierFromDecimals,\r\n  useLocalStorageState,\r\n} from './utils';\r\nimport { refreshCache, useAsyncData } from './fetch-loop';\r\nimport { useAccountData, useAccountInfo, useConnection } from './connection';\r\nimport { useWallet } from './wallet';\r\nimport tuple from 'immutable-tuple';\r\nimport { notify } from './notifications';\r\nimport BN from 'bn.js';\r\nimport {\r\n  getTokenAccountInfo,\r\n  parseTokenAccountData,\r\n  useMintInfos,\r\n} from './tokens';\r\nimport {\r\n  Balances,\r\n  CustomMarketInfo,\r\n  DeprecatedOpenOrdersBalances,\r\n  FullMarketInfo,\r\n  MarketContextValues,\r\n  MarketInfo,\r\n  OrderWithMarketAndMarketName,\r\n  SelectedTokenAccounts,\r\n  TokenAccount,\r\n  Trade,\r\n} from './types';\r\nimport { WRAPPED_SOL_MINT } from '@project-serum/serum/lib/token-instructions';\r\nimport { Order } from '@project-serum/serum/lib/market';\r\nimport BonfidaApi from './bonfidaConnector';\r\n\r\n// Used in debugging, should be false in production\r\nconst _IGNORE_DEPRECATED = false;\r\n\r\nexport const USE_MARKETS: MarketInfo[] = _IGNORE_DEPRECATED\r\n  ? MARKETS.map((m) => ({ ...m, deprecated: false }))\r\n  : MARKETS;\r\n\r\nexport function useMarketsList() {\r\n  return USE_MARKETS.filter(({ deprecated }) => !deprecated);\r\n}\r\n\r\nexport function useAllMarkets(customMarkets) {\r\n  const connection = useConnection();\r\n\r\n  const getAllMarkets = async () => {\r\n    const markets: Array<{\r\n      market: Market;\r\n      marketName: string;\r\n      programId: PublicKey;\r\n    } | null> = await Promise.all(\r\n      getMarketInfos(customMarkets).map(async (marketInfo) => {\r\n        try {\r\n          const market = await Market.load(\r\n            connection,\r\n            marketInfo.address,\r\n            {},\r\n            marketInfo.programId,\r\n          );\r\n          return {\r\n            market,\r\n            marketName: marketInfo.name,\r\n            programId: marketInfo.programId,\r\n          };\r\n        } catch (e) {\r\n          notify({\r\n            message: 'Error loading all market',\r\n            description: e.message,\r\n            type: 'error',\r\n          });\r\n          return null;\r\n        }\r\n      }),\r\n    );\r\n    return markets.filter(\r\n      (m): m is { market: Market; marketName: string; programId: PublicKey } =>\r\n        !!m,\r\n    );\r\n  };\r\n  return useAsyncData(\r\n    getAllMarkets,\r\n    tuple('getAllMarkets', customMarkets.length, connection),\r\n    { refreshInterval: _VERY_SLOW_REFRESH_INTERVAL },\r\n  );\r\n}\r\n\r\nexport function useUnmigratedOpenOrdersAccounts() {\r\n  const connection = useConnection();\r\n  const { wallet } = useWallet();\r\n\r\n  async function getUnmigratedOpenOrdersAccounts(): Promise<OpenOrders[]> {\r\n    if (!wallet || !connection || !wallet.publicKey) {\r\n      return [];\r\n    }\r\n    console.log('refreshing useUnmigratedOpenOrdersAccounts');\r\n    let deprecatedOpenOrdersAccounts: OpenOrders[] = [];\r\n    const deprecatedProgramIds = Array.from(\r\n      new Set(\r\n        USE_MARKETS.filter(\r\n          ({ deprecated }) => deprecated,\r\n        ).map(({ programId }) => programId.toBase58()),\r\n      ),\r\n    ).map((publicKeyStr) => new PublicKey(publicKeyStr));\r\n    let programId: PublicKey;\r\n    for (programId of deprecatedProgramIds) {\r\n      try {\r\n        const openOrdersAccounts = await OpenOrders.findForOwner(\r\n          connection,\r\n          wallet.publicKey,\r\n          programId,\r\n        );\r\n        deprecatedOpenOrdersAccounts = deprecatedOpenOrdersAccounts.concat(\r\n          openOrdersAccounts\r\n            .filter(\r\n              (openOrders) =>\r\n                openOrders.baseTokenTotal.toNumber() ||\r\n                openOrders.quoteTokenTotal.toNumber(),\r\n            )\r\n            .filter((openOrders) =>\r\n              USE_MARKETS.some(\r\n                (market) =>\r\n                  market.deprecated && market.address.equals(openOrders.market),\r\n              ),\r\n            ),\r\n        );\r\n      } catch (e) {\r\n        console.log(\r\n          'Error loading deprecated markets',\r\n          programId?.toBase58(),\r\n          e.message,\r\n        );\r\n      }\r\n    }\r\n    // Maybe sort\r\n    return deprecatedOpenOrdersAccounts;\r\n  }\r\n\r\n  const cacheKey = tuple(\r\n    'getUnmigratedOpenOrdersAccounts',\r\n    connection,\r\n    wallet?.publicKey?.toBase58(),\r\n  );\r\n  const [accounts] = useAsyncData(getUnmigratedOpenOrdersAccounts, cacheKey, {\r\n    refreshInterval: _VERY_SLOW_REFRESH_INTERVAL,\r\n  });\r\n\r\n  return {\r\n    accounts,\r\n    refresh: (clearCache: boolean) => refreshCache(cacheKey, clearCache),\r\n  };\r\n}\r\n\r\nconst MarketContext: React.Context<null | MarketContextValues> = React.createContext<null | MarketContextValues>(\r\n  null,\r\n);\r\n\r\nconst _VERY_SLOW_REFRESH_INTERVAL = 5000 * 1000;\r\n\r\n// For things that don't really change\r\nconst _SLOW_REFRESH_INTERVAL = 5 * 1000;\r\n\r\n// For things that change frequently\r\nconst _FAST_REFRESH_INTERVAL = 1000;\r\n\r\nexport const DEFAULT_MARKET = USE_MARKETS.find(\r\n  ({ name, deprecated }) => name === 'SRM/USDT' && !deprecated,\r\n);\r\n\r\nexport function getMarketDetails(\r\n  market: Market | undefined | null,\r\n  customMarkets: CustomMarketInfo[],\r\n): FullMarketInfo {\r\n  if (!market) {\r\n    return {};\r\n  }\r\n  const marketInfos = getMarketInfos(customMarkets);\r\n  const marketInfo = marketInfos.find((otherMarket) =>\r\n    otherMarket.address.equals(market.address),\r\n  );\r\n  const baseCurrency =\r\n    (market?.baseMintAddress &&\r\n      TOKEN_MINTS.find((token) => token.address.equals(market.baseMintAddress))\r\n        ?.name) ||\r\n    (marketInfo?.baseLabel && `${marketInfo?.baseLabel}*`) ||\r\n    'UNKNOWN';\r\n  const quoteCurrency =\r\n    (market?.quoteMintAddress &&\r\n      TOKEN_MINTS.find((token) => token.address.equals(market.quoteMintAddress))\r\n        ?.name) ||\r\n    (marketInfo?.quoteLabel && `${marketInfo?.quoteLabel}*`) ||\r\n    'UNKNOWN';\r\n\r\n  return {\r\n    ...marketInfo,\r\n    marketName: marketInfo?.name,\r\n    baseCurrency,\r\n    quoteCurrency,\r\n    marketInfo,\r\n  };\r\n}\r\n\r\nexport function MarketProvider({ children }) {\r\n  const [marketAddress, setMarketAddress] = useLocalStorageState(\r\n    'marketAddress',\r\n    DEFAULT_MARKET?.address.toBase58(),\r\n  );\r\n  const [customMarkets, setCustomMarkets] = useLocalStorageState<\r\n    CustomMarketInfo[]\r\n  >('customMarkets', []);\r\n\r\n  const address = marketAddress && new PublicKey(marketAddress);\r\n  const connection = useConnection();\r\n  const marketInfos = getMarketInfos(customMarkets);\r\n  const marketInfo =\r\n    address && marketInfos.find((market) => market.address.equals(address));\r\n\r\n  // Replace existing market with a non-deprecated one on first load\r\n  useEffect(() => {\r\n    if (marketInfo && marketInfo.deprecated) {\r\n      console.log('Switching markets from deprecated', marketInfo);\r\n      if (DEFAULT_MARKET) {\r\n        setMarketAddress(DEFAULT_MARKET.address.toBase58());\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const [market, setMarket] = useState<Market | null>();\r\n  useEffect(() => {\r\n    if (\r\n      market &&\r\n      marketInfo &&\r\n      // @ts-ignore\r\n      market._decoded.ownAddress?.equals(marketInfo?.address)\r\n    ) {\r\n      return;\r\n    }\r\n    setMarket(null);\r\n    if (!marketInfo || !marketInfo.address) {\r\n      notify({\r\n        message: 'Error loading market',\r\n        description: 'Please select a market from the dropdown',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    Market.load(connection, marketInfo.address, {}, marketInfo.programId)\r\n      .then(setMarket)\r\n      .catch((e) =>\r\n        notify({\r\n          message: 'Error loading market',\r\n          description: e.message,\r\n          type: 'error',\r\n        }),\r\n      );\r\n    // eslint-disable-next-line\r\n  }, [connection, marketInfo]);\r\n\r\n  return (\r\n    <MarketContext.Provider\r\n      value={{\r\n        market,\r\n        ...getMarketDetails(market, customMarkets),\r\n        setMarketAddress,\r\n        customMarkets,\r\n        setCustomMarkets,\r\n      }}\r\n    >\r\n      {children}\r\n    </MarketContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useSelectedTokenAccounts(): [\r\n  SelectedTokenAccounts,\r\n  (newSelectedTokenAccounts: SelectedTokenAccounts) => void,\r\n] {\r\n  const [\r\n    selectedTokenAccounts,\r\n    setSelectedTokenAccounts,\r\n  ] = useLocalStorageState<SelectedTokenAccounts>('selectedTokenAccounts', {});\r\n  return [selectedTokenAccounts, setSelectedTokenAccounts];\r\n}\r\n\r\nexport function useMarket() {\r\n  const context = useContext(MarketContext);\r\n  if (!context) {\r\n    throw new Error('Missing market context');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useMarkPrice() {\r\n  const [markPrice, setMarkPrice] = useState<null | number>(null);\r\n\r\n  const [orderbook] = useOrderbook();\r\n  const trades = useTrades();\r\n\r\n  useEffect(() => {\r\n    let bb = orderbook?.bids?.length > 0 && Number(orderbook.bids[0][0]);\r\n    let ba = orderbook?.asks?.length > 0 && Number(orderbook.asks[0][0]);\r\n    let last = trades && trades.length > 0 && trades[0].price;\r\n\r\n    let markPrice =\r\n      bb && ba\r\n        ? last\r\n          ? [bb, ba, last].sort((a, b) => a - b)[1]\r\n          : (bb + ba) / 2\r\n        : null;\r\n\r\n    setMarkPrice(markPrice);\r\n  }, [orderbook, trades]);\r\n\r\n  return markPrice;\r\n}\r\n\r\nexport function _useUnfilteredTrades(limit = 10000) {\r\n  const { market } = useMarket();\r\n  const connection = useConnection();\r\n  async function getUnfilteredTrades(): Promise<any[] | null> {\r\n    if (!market || !connection) {\r\n      return null;\r\n    }\r\n    return await market.loadFills(connection, limit);\r\n  }\r\n  const [trades] = useAsyncData(\r\n    getUnfilteredTrades,\r\n    tuple('getUnfilteredTrades', market, connection),\r\n    { refreshInterval: _SLOW_REFRESH_INTERVAL },\r\n  );\r\n  return trades;\r\n  // NOTE: For now, websocket is too expensive since the event queue is large\r\n  // and updates very frequently\r\n\r\n  // let data = useAccountData(market && market._decoded.eventQueue);\r\n  // if (!data) {\r\n  //   return null;\r\n  // }\r\n  // const events = decodeEventQueue(data, limit);\r\n  // return events\r\n  //   .filter((event) => event.eventFlags.fill && event.nativeQuantityPaid.gtn(0))\r\n  //   .map(market.parseFillEvent.bind(market));\r\n}\r\n\r\nexport function useBonfidaTrades() {\r\n  const { market } = useMarket();\r\n  const marketAddress = market?.address.toBase58();\r\n\r\n  async function getBonfidaTrades() {\r\n    if (!marketAddress) {\r\n      return null;\r\n    }\r\n    return await BonfidaApi.getRecentTrades(marketAddress);\r\n  }\r\n\r\n  return useAsyncData(\r\n    getBonfidaTrades,\r\n    tuple('getBonfidaTrades', marketAddress),\r\n    { refreshInterval: _SLOW_REFRESH_INTERVAL },\r\n    false,\r\n  );\r\n}\r\n\r\nexport function useOrderbookAccounts() {\r\n  const { market } = useMarket();\r\n  // @ts-ignore\r\n  let bidData = useAccountData(market && market._decoded.bids);\r\n  // @ts-ignore\r\n  let askData = useAccountData(market && market._decoded.asks);\r\n  return {\r\n    bidOrderbook: market && bidData ? Orderbook.decode(market, bidData) : null,\r\n    askOrderbook: market && askData ? Orderbook.decode(market, askData) : null,\r\n  };\r\n}\r\n\r\nexport function useOrderbook(\r\n  depth = 20,\r\n): [{ bids: number[][]; asks: number[][] }, boolean] {\r\n  const { bidOrderbook, askOrderbook } = useOrderbookAccounts();\r\n  const { market } = useMarket();\r\n  const bids =\r\n    !bidOrderbook || !market\r\n      ? []\r\n      : bidOrderbook.getL2(depth).map(([price, size]) => [price, size]);\r\n  const asks =\r\n    !askOrderbook || !market\r\n      ? []\r\n      : askOrderbook.getL2(depth).map(([price, size]) => [price, size]);\r\n  return [{ bids, asks }, !!bids || !!asks];\r\n}\r\n\r\n// Want the balances table to be fast-updating, dont want open orders to flicker\r\n// TODO: Update to use websocket\r\nexport function useOpenOrdersAccounts(fast = false) {\r\n  const { market } = useMarket();\r\n  const { connected, wallet } = useWallet();\r\n  const connection = useConnection();\r\n  async function getOpenOrdersAccounts() {\r\n    if (!connected) {\r\n      return null;\r\n    }\r\n    if (!market) {\r\n      return null;\r\n    }\r\n    return await market.findOpenOrdersAccountsForOwner(\r\n      connection,\r\n      wallet.publicKey,\r\n    );\r\n  }\r\n  return useAsyncData(\r\n    getOpenOrdersAccounts,\r\n    tuple('getOpenOrdersAccounts', wallet, market, connected),\r\n    { refreshInterval: fast ? _FAST_REFRESH_INTERVAL : _SLOW_REFRESH_INTERVAL },\r\n  );\r\n}\r\n\r\nexport function useSelectedOpenOrdersAccount(fast = false) {\r\n  const [accounts] = useOpenOrdersAccounts(fast);\r\n  if (!accounts) {\r\n    return null;\r\n  }\r\n  return accounts[0];\r\n}\r\n\r\nexport function useTokenAccounts(): [\r\n  TokenAccount[] | null | undefined,\r\n  boolean,\r\n] {\r\n  const { connected, wallet } = useWallet();\r\n  const connection = useConnection();\r\n  async function getTokenAccounts() {\r\n    if (!connected) {\r\n      return null;\r\n    }\r\n    return await getTokenAccountInfo(connection, wallet.publicKey);\r\n  }\r\n  return useAsyncData(\r\n    getTokenAccounts,\r\n    tuple('getTokenAccounts', wallet, connected),\r\n    { refreshInterval: _SLOW_REFRESH_INTERVAL },\r\n  );\r\n}\r\n\r\nexport function getSelectedTokenAccountForMint(\r\n  accounts: TokenAccount[] | undefined | null,\r\n  mint: PublicKey | undefined,\r\n  selectedPubKey?: string | PublicKey | null,\r\n) {\r\n  if (!accounts || !mint) {\r\n    return null;\r\n  }\r\n  const filtered = accounts.filter(\r\n    ({ effectiveMint, pubkey }) =>\r\n      mint.equals(effectiveMint) &&\r\n      (!selectedPubKey ||\r\n        (typeof selectedPubKey === 'string'\r\n          ? selectedPubKey\r\n          : selectedPubKey.toBase58()) === pubkey.toBase58()),\r\n  );\r\n  return filtered && filtered[0];\r\n}\r\n\r\nexport function useSelectedQuoteCurrencyAccount() {\r\n  const [accounts] = useTokenAccounts();\r\n  const { market } = useMarket();\r\n  const [selectedTokenAccounts] = useSelectedTokenAccounts();\r\n  const mintAddress = market?.quoteMintAddress;\r\n  return getSelectedTokenAccountForMint(\r\n    accounts,\r\n    mintAddress,\r\n    mintAddress && selectedTokenAccounts[mintAddress.toBase58()],\r\n  );\r\n}\r\n\r\nexport function useSelectedBaseCurrencyAccount() {\r\n  const [accounts] = useTokenAccounts();\r\n  const { market } = useMarket();\r\n  const [selectedTokenAccounts] = useSelectedTokenAccounts();\r\n  const mintAddress = market?.baseMintAddress;\r\n  return getSelectedTokenAccountForMint(\r\n    accounts,\r\n    mintAddress,\r\n    mintAddress && selectedTokenAccounts[mintAddress.toBase58()],\r\n  );\r\n}\r\n\r\n// TODO: Update to use websocket\r\nexport function useSelectedQuoteCurrencyBalances() {\r\n  const quoteCurrencyAccount = useSelectedQuoteCurrencyAccount();\r\n  const { market } = useMarket();\r\n  const [accountInfo, loaded] = useAccountInfo(quoteCurrencyAccount?.pubkey);\r\n  if (!market || !quoteCurrencyAccount || !loaded || !accountInfo) {\r\n    return null;\r\n  }\r\n  if (market.quoteMintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT)) {\r\n    return accountInfo?.lamports / 1e9 ?? 0;\r\n  }\r\n  return market.quoteSplSizeToNumber(\r\n    new BN(accountInfo.data.slice(64, 72), 10, 'le'),\r\n  );\r\n}\r\n\r\n// TODO: Update to use websocket\r\nexport function useSelectedBaseCurrencyBalances() {\r\n  const baseCurrencyAccount = useSelectedBaseCurrencyAccount();\r\n  const { market } = useMarket();\r\n  const [accountInfo, loaded] = useAccountInfo(baseCurrencyAccount?.pubkey);\r\n  if (!market || !baseCurrencyAccount || !loaded || !accountInfo) {\r\n    return null;\r\n  }\r\n  if (market.baseMintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT)) {\r\n    return accountInfo?.lamports / 1e9 ?? 0;\r\n  }\r\n  return market.baseSplSizeToNumber(\r\n    new BN(accountInfo.data.slice(64, 72), 10, 'le'),\r\n  );\r\n}\r\n\r\nexport function useOpenOrders() {\r\n  const { market, marketName } = useMarket();\r\n  const openOrdersAccount = useSelectedOpenOrdersAccount();\r\n  const { bidOrderbook, askOrderbook } = useOrderbookAccounts();\r\n  if (!market || !openOrdersAccount || !bidOrderbook || !askOrderbook) {\r\n    return null;\r\n  }\r\n  return market\r\n    .filterForOpenOrders(bidOrderbook, askOrderbook, [openOrdersAccount])\r\n    .map((order) => ({ ...order, marketName, market }));\r\n}\r\n\r\nexport function useTrades(limit = 100) {\r\n  const trades = _useUnfilteredTrades(limit);\r\n  if (!trades) {\r\n    return null;\r\n  }\r\n  // Until partial fills are each given their own fill, use maker fills\r\n  return trades\r\n    .filter(({ eventFlags }) => eventFlags.maker)\r\n    .map((trade) => ({\r\n      ...trade,\r\n      side: trade.side === 'buy' ? 'sell' : 'buy',\r\n    }));\r\n}\r\n\r\nexport function useFeeDiscountKeys(): [\r\n  (\r\n    | {\r\n        pubkey: PublicKey;\r\n        feeTier: number;\r\n        balance: number;\r\n        mint: PublicKey;\r\n      }[]\r\n    | null\r\n    | undefined\r\n  ),\r\n  boolean,\r\n] {\r\n  const { market } = useMarket();\r\n  const { connected, wallet } = useWallet();\r\n  const connection = useConnection();\r\n  async function getFeeDiscountKeys() {\r\n    if (!connected) {\r\n      return null;\r\n    }\r\n    if (!market) {\r\n      return null;\r\n    }\r\n    return await market.findFeeDiscountKeys(connection, wallet.publicKey);\r\n  }\r\n  return useAsyncData(\r\n    getFeeDiscountKeys,\r\n    tuple('getFeeDiscountKeys', wallet, market, connected),\r\n    { refreshInterval: _SLOW_REFRESH_INTERVAL },\r\n  );\r\n}\r\n\r\nexport function useFills(limit = 100) {\r\n  const { marketName } = useMarket();\r\n  const fills = _useUnfilteredTrades(limit);\r\n  const [openOrdersAccounts] = useOpenOrdersAccounts();\r\n  if (!openOrdersAccounts || openOrdersAccounts.length === 0) {\r\n    return null;\r\n  }\r\n  if (!fills) {\r\n    return null;\r\n  }\r\n  return fills\r\n    .filter((fill) =>\r\n      openOrdersAccounts.some((openOrdersAccount) =>\r\n        fill.openOrders.equals(openOrdersAccount.publicKey),\r\n      ),\r\n    )\r\n    .map((fill) => ({ ...fill, marketName }));\r\n}\r\n\r\n// TODO: Update to use websocket\r\nexport function useFillsForAllMarkets(limit = 100) {\r\n  const { connected, wallet } = useWallet();\r\n\r\n  const connection = useConnection();\r\n  // todo: add custom markets\r\n  const allMarkets = useAllMarkets([]);\r\n\r\n  async function getFillsForAllMarkets() {\r\n    let fills: Trade[] = [];\r\n    if (!connected) {\r\n      return fills;\r\n    }\r\n\r\n    let marketData;\r\n    for (marketData of allMarkets) {\r\n      const { market, marketName } = marketData;\r\n      if (!market) {\r\n        return fills;\r\n      }\r\n      const openOrdersAccounts = await market.findOpenOrdersAccountsForOwner(\r\n        connection,\r\n        wallet.publicKey,\r\n      );\r\n      const openOrdersAccount = openOrdersAccounts && openOrdersAccounts[0];\r\n      if (!openOrdersAccount) {\r\n        return fills;\r\n      }\r\n      const eventQueueData = await connection.getAccountInfo(\r\n        market && market._decoded.eventQueue,\r\n      );\r\n      let data = eventQueueData?.data;\r\n      if (!data) {\r\n        return fills;\r\n      }\r\n      const events = decodeEventQueue(data, limit);\r\n      const fillsForMarket: Trade[] = events\r\n        .filter(\r\n          (event) => event.eventFlags.fill && event.nativeQuantityPaid.gtn(0),\r\n        )\r\n        .map(market.parseFillEvent.bind(market));\r\n      const ownFillsForMarket = fillsForMarket\r\n        .filter((fill) => fill.openOrders.equals(openOrdersAccount.publicKey))\r\n        .map((fill) => ({ ...fill, marketName }));\r\n      fills = fills.concat(ownFillsForMarket);\r\n    }\r\n\r\n    console.log(JSON.stringify(fills));\r\n    return fills;\r\n  }\r\n\r\n  return useAsyncData(\r\n    getFillsForAllMarkets,\r\n    tuple('getFillsForAllMarkets', connected, connection, allMarkets, wallet),\r\n    { refreshInterval: _FAST_REFRESH_INTERVAL },\r\n  );\r\n}\r\n\r\nexport function useAllOpenOrdersAccounts() {\r\n  const { wallet, connected } = useWallet();\r\n  const connection = useConnection();\r\n  const { customMarkets } = useMarket();\r\n  const marketInfos = getMarketInfos(customMarkets);\r\n  const programIds = [\r\n    ...new Set(marketInfos.map((info) => info.programId.toBase58())),\r\n  ].map((stringProgramId) => new PublicKey(stringProgramId));\r\n\r\n  const getAllOpenOrdersAccounts = async () => {\r\n    if (!connected) {\r\n      return [];\r\n    }\r\n    return (\r\n      await Promise.all(\r\n        programIds.map((programId) =>\r\n          OpenOrders.findForOwner(connection, wallet.publicKey, programId),\r\n        ),\r\n      )\r\n    ).flat();\r\n  };\r\n  return useAsyncData(\r\n    getAllOpenOrdersAccounts,\r\n    tuple(\r\n      'getAllOpenOrdersAccounts',\r\n      connection,\r\n      connected,\r\n      wallet?.publicKey?.toBase58(),\r\n      customMarkets.length,\r\n      (programIds || []).length,\r\n    ),\r\n    { refreshInterval: _SLOW_REFRESH_INTERVAL },\r\n  );\r\n}\r\n\r\nexport function useAllOpenOrdersBalances() {\r\n  const [\r\n    openOrdersAccounts,\r\n    loadedOpenOrdersAccounts,\r\n  ] = useAllOpenOrdersAccounts();\r\n  const [mintInfos, mintInfosConnected] = useMintInfos();\r\n  const { customMarkets } = useMarket();\r\n  const [allMarkets] = useAllMarkets(customMarkets);\r\n  if (!loadedOpenOrdersAccounts || !mintInfosConnected) {\r\n    return {};\r\n  }\r\n\r\n  const marketsByAddress = Object.fromEntries(\r\n    (allMarkets || []).map((m) => [m.market.address.toBase58(), m]),\r\n  );\r\n  const openOrdersBalances: {\r\n    [mint: string]: { market: PublicKey; free: number; total: number }[];\r\n  } = {};\r\n  for (let account of openOrdersAccounts || []) {\r\n    const marketInfo = marketsByAddress[account.market.toBase58()];\r\n    const baseMint = marketInfo?.market.baseMintAddress.toBase58();\r\n    const quoteMint = marketInfo?.market.quoteMintAddress.toBase58();\r\n    if (!(baseMint in openOrdersBalances)) {\r\n      openOrdersBalances[baseMint] = [];\r\n    }\r\n    if (!(quoteMint in openOrdersBalances)) {\r\n      openOrdersBalances[quoteMint] = [];\r\n    }\r\n\r\n    const baseMintInfo = mintInfos && mintInfos[baseMint];\r\n    const baseFree = divideBnToNumber(\r\n      new BN(account.baseTokenFree),\r\n      getTokenMultiplierFromDecimals(baseMintInfo?.decimals || 0),\r\n    );\r\n    const baseTotal = divideBnToNumber(\r\n      new BN(account.baseTokenTotal),\r\n      getTokenMultiplierFromDecimals(baseMintInfo?.decimals || 0),\r\n    );\r\n    const quoteMintInfo = mintInfos && mintInfos[quoteMint];\r\n    const quoteFree = divideBnToNumber(\r\n      new BN(account.quoteTokenFree),\r\n      getTokenMultiplierFromDecimals(quoteMintInfo?.decimals || 0),\r\n    );\r\n    const quoteTotal = divideBnToNumber(\r\n      new BN(account.quoteTokenTotal),\r\n      getTokenMultiplierFromDecimals(quoteMintInfo?.decimals || 0),\r\n    );\r\n\r\n    openOrdersBalances[baseMint].push({\r\n      market: account.market,\r\n      free: baseFree,\r\n      total: baseTotal,\r\n    });\r\n    openOrdersBalances[quoteMint].push({\r\n      market: account.market,\r\n      free: quoteFree,\r\n      total: quoteTotal,\r\n    });\r\n  }\r\n  return openOrdersBalances;\r\n}\r\n\r\nexport function useAllOpenOrders(): {\r\n  openOrders: { orders: Order[]; marketAddress: string }[] | null | undefined;\r\n  loaded: boolean;\r\n  refreshOpenOrders: () => void;\r\n} {\r\n  const connection = useConnection();\r\n  const { connected } = useWallet();\r\n  const [\r\n    openOrdersAccounts,\r\n    openOrdersAccountsConnected,\r\n  ] = useAllOpenOrdersAccounts();\r\n  const { customMarkets } = useMarket();\r\n  const [marketInfos, marketInfosConnected] = useAllMarkets(customMarkets);\r\n  const openOrdersAccountsByAddress: {\r\n    [marketAddress: string]: OpenOrders[];\r\n  } = {};\r\n  for (let account of openOrdersAccounts || []) {\r\n    const marketsAddr = account.market.toBase58();\r\n    if (!(marketsAddr in openOrdersAccountsByAddress)) {\r\n      openOrdersAccountsByAddress[marketsAddr] = [];\r\n    }\r\n    openOrdersAccountsByAddress[marketsAddr].push(account);\r\n  }\r\n  const marketsByAddress = Object.fromEntries(\r\n    (marketInfos || []).map((info) => [info.market.publicKey.toBase58(), info]),\r\n  );\r\n  const getAllOpenOrders = async () => {\r\n    return await Promise.all(\r\n      Object.keys(openOrdersAccountsByAddress).map(async (marketAddr) => {\r\n        const market = marketsByAddress[marketAddr].market;\r\n        const [bids, asks] = await Promise.all([\r\n          market.loadBids(connection),\r\n          market.loadAsks(connection),\r\n        ]);\r\n        return {\r\n          orders: market.filterForOpenOrders(\r\n            bids,\r\n            asks,\r\n            openOrdersAccountsByAddress[marketAddr],\r\n          ),\r\n          marketAddress: marketAddr,\r\n        };\r\n      }),\r\n    );\r\n  };\r\n  const cacheKey = tuple(\r\n    'getAllOpenOrders',\r\n    openOrdersAccountsConnected,\r\n    (openOrdersAccounts || []).length,\r\n    connection,\r\n    connected,\r\n    marketInfosConnected,\r\n  );\r\n  const [openOrders, loaded] = useAsyncData(getAllOpenOrders, cacheKey, {\r\n    refreshInterval: _VERY_SLOW_REFRESH_INTERVAL,\r\n  });\r\n  return {\r\n    openOrders,\r\n    loaded,\r\n    refreshOpenOrders: () => refreshCache(cacheKey),\r\n  };\r\n}\r\n\r\nexport function useBalances(): Balances[] {\r\n  const baseCurrencyBalances = useSelectedBaseCurrencyBalances();\r\n  const quoteCurrencyBalances = useSelectedQuoteCurrencyBalances();\r\n  const openOrders = useSelectedOpenOrdersAccount(true);\r\n  const { baseCurrency, quoteCurrency, market } = useMarket();\r\n  const baseExists =\r\n    openOrders && openOrders.baseTokenTotal && openOrders.baseTokenFree;\r\n  const quoteExists =\r\n    openOrders && openOrders.quoteTokenTotal && openOrders.quoteTokenFree;\r\n  if (\r\n    baseCurrency === 'UNKNOWN' ||\r\n    quoteCurrency === 'UNKNOWN' ||\r\n    !baseCurrency ||\r\n    !quoteCurrency\r\n  ) {\r\n    return [];\r\n  }\r\n  return [\r\n    {\r\n      market,\r\n      key: `${baseCurrency}${quoteCurrency}${baseCurrency}`,\r\n      coin: baseCurrency,\r\n      wallet: baseCurrencyBalances,\r\n      orders:\r\n        baseExists && market && openOrders\r\n          ? market.baseSplSizeToNumber(\r\n              openOrders.baseTokenTotal.sub(openOrders.baseTokenFree),\r\n            )\r\n          : null,\r\n      openOrders,\r\n      unsettled:\r\n        baseExists && market && openOrders\r\n          ? market.baseSplSizeToNumber(openOrders.baseTokenFree)\r\n          : null,\r\n    },\r\n    {\r\n      market,\r\n      key: `${quoteCurrency}${baseCurrency}${quoteCurrency}`,\r\n      coin: quoteCurrency,\r\n      wallet: quoteCurrencyBalances,\r\n      openOrders,\r\n      orders:\r\n        quoteExists && market && openOrders\r\n          ? market.quoteSplSizeToNumber(\r\n              openOrders.quoteTokenTotal.sub(openOrders.quoteTokenFree),\r\n            )\r\n          : null,\r\n      unsettled:\r\n        quoteExists && market && openOrders\r\n          ? market.quoteSplSizeToNumber(openOrders.quoteTokenFree)\r\n          : null,\r\n    },\r\n  ];\r\n}\r\n\r\nexport function useWalletBalancesForAllMarkets(): {\r\n  mint: string;\r\n  balance: number;\r\n}[] {\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const { connected } = useWallet();\r\n  const [mintInfos, mintInfosConnected] = useMintInfos();\r\n\r\n  if (!connected || !mintInfosConnected) {\r\n    return [];\r\n  }\r\n\r\n  let balances: { [mint: string]: number } = {};\r\n  for (let account of tokenAccounts || []) {\r\n    if (!account.account) {\r\n      continue;\r\n    }\r\n    let parsedAccount;\r\n    if (account.effectiveMint.equals(WRAPPED_SOL_MINT)) {\r\n      parsedAccount = {\r\n        mint: WRAPPED_SOL_MINT,\r\n        owner: account.pubkey,\r\n        amount: account.account.lamports,\r\n      };\r\n    } else {\r\n      parsedAccount = parseTokenAccountData(account.account.data);\r\n    }\r\n    if (!(parsedAccount.mint.toBase58() in balances)) {\r\n      balances[parsedAccount.mint.toBase58()] = 0;\r\n    }\r\n    const mintInfo = mintInfos && mintInfos[parsedAccount.mint.toBase58()];\r\n    const additionalAmount = divideBnToNumber(\r\n      new BN(parsedAccount.amount),\r\n      getTokenMultiplierFromDecimals(mintInfo?.decimals || 0),\r\n    );\r\n    balances[parsedAccount.mint.toBase58()] += additionalAmount;\r\n  }\r\n  return Object.entries(balances).map(([mint, balance]) => {\r\n    return { mint, balance };\r\n  });\r\n}\r\n\r\nexport function useUnmigratedDeprecatedMarkets() {\r\n  const connection = useConnection();\r\n  const { accounts } = useUnmigratedOpenOrdersAccounts();\r\n  const marketsList =\r\n    accounts &&\r\n    Array.from(new Set(accounts.map((openOrders) => openOrders.market)));\r\n  const deps = marketsList && marketsList.map((m) => m.toBase58());\r\n\r\n  const useUnmigratedDeprecatedMarketsInner = async () => {\r\n    if (!marketsList) {\r\n      return null;\r\n    }\r\n    const getMarket = async (address) => {\r\n      const marketInfo = USE_MARKETS.find((market) =>\r\n        market.address.equals(address),\r\n      );\r\n      if (!marketInfo) {\r\n        console.log('Failed loading market');\r\n        notify({\r\n          message: 'Error loading market',\r\n          type: 'error',\r\n        });\r\n        return null;\r\n      }\r\n      try {\r\n        console.log('Loading market', marketInfo.name);\r\n        // NOTE: Should this just be cached by (connection, marketInfo.address, marketInfo.programId)?\r\n        return await Market.load(\r\n          connection,\r\n          marketInfo.address,\r\n          {},\r\n          marketInfo.programId,\r\n        );\r\n      } catch (e) {\r\n        console.log('Failed loading market', marketInfo.name, e);\r\n        notify({\r\n          message: 'Error loading market',\r\n          description: e.message,\r\n          type: 'error',\r\n        });\r\n        return null;\r\n      }\r\n    };\r\n    return (await Promise.all(marketsList.map(getMarket))).filter((x) => x);\r\n  };\r\n  const [markets] = useAsyncData(\r\n    useUnmigratedDeprecatedMarketsInner,\r\n    tuple(\r\n      'useUnmigratedDeprecatedMarketsInner',\r\n      connection,\r\n      deps && deps.toString(),\r\n    ),\r\n    { refreshInterval: _VERY_SLOW_REFRESH_INTERVAL },\r\n  );\r\n  if (!markets) {\r\n    return null;\r\n  }\r\n  return markets.map((market) => ({\r\n    market,\r\n    openOrdersList: accounts?.filter(\r\n      (openOrders) => market && openOrders.market.equals(market.address),\r\n    ),\r\n  }));\r\n}\r\n\r\nexport function useGetOpenOrdersForDeprecatedMarkets(): {\r\n  openOrders: OrderWithMarketAndMarketName[] | null | undefined;\r\n  loaded: boolean;\r\n  refreshOpenOrders: () => void;\r\n} {\r\n  const { connected, wallet } = useWallet();\r\n  const [customMarkets] = useLocalStorageState<CustomMarketInfo[]>(\r\n    'customMarkets',\r\n    [],\r\n  );\r\n  const connection = useConnection();\r\n  const marketsAndOrders = useUnmigratedDeprecatedMarkets();\r\n  const marketsList =\r\n    marketsAndOrders && marketsAndOrders.map(({ market }) => market);\r\n\r\n  // This isn't quite right: open order balances could change\r\n  const deps =\r\n    marketsList &&\r\n    marketsList\r\n      .filter((market): market is Market => !!market)\r\n      .map((market) => market.address.toBase58());\r\n\r\n  async function getOpenOrdersForDeprecatedMarkets() {\r\n    if (!connected) {\r\n      return null;\r\n    }\r\n    if (!marketsList) {\r\n      return null;\r\n    }\r\n    console.log('refreshing getOpenOrdersForDeprecatedMarkets');\r\n    const getOrders = async (market: Market | null) => {\r\n      if (!market) {\r\n        return null;\r\n      }\r\n      const { marketName } = getMarketDetails(market, customMarkets);\r\n      try {\r\n        console.log('Fetching open orders for', marketName);\r\n        // Can do better than this, we have the open orders accounts already\r\n        return (\r\n          await market.loadOrdersForOwner(connection, wallet.publicKey)\r\n        ).map((order) => ({ marketName, market, ...order }));\r\n      } catch (e) {\r\n        console.log('Failed loading open orders', market.address.toBase58(), e);\r\n        notify({\r\n          message: `Error loading open orders for deprecated ${marketName}`,\r\n          description: e.message,\r\n          type: 'error',\r\n        });\r\n        return null;\r\n      }\r\n    };\r\n    return (await Promise.all(marketsList.map(getOrders)))\r\n      .filter((x): x is OrderWithMarketAndMarketName[] => !!x)\r\n      .flat();\r\n  }\r\n\r\n  const cacheKey = tuple(\r\n    'getOpenOrdersForDeprecatedMarkets',\r\n    connected,\r\n    connection,\r\n    wallet,\r\n    deps && deps.toString(),\r\n  );\r\n  const [openOrders, loaded] = useAsyncData(\r\n    getOpenOrdersForDeprecatedMarkets,\r\n    cacheKey,\r\n    {\r\n      refreshInterval: _VERY_SLOW_REFRESH_INTERVAL,\r\n    },\r\n  );\r\n  console.log('openOrders', openOrders);\r\n  return {\r\n    openOrders,\r\n    loaded,\r\n    refreshOpenOrders: () => refreshCache(cacheKey),\r\n  };\r\n}\r\n\r\nexport function useBalancesForDeprecatedMarkets() {\r\n  const markets = useUnmigratedDeprecatedMarkets();\r\n  const [customMarkets] = useLocalStorageState<CustomMarketInfo[]>(\r\n    'customMarkets',\r\n    [],\r\n  );\r\n  if (!markets) {\r\n    return null;\r\n  }\r\n\r\n  const openOrderAccountBalances: DeprecatedOpenOrdersBalances[] = [];\r\n  markets.forEach(({ market, openOrdersList }) => {\r\n    const { baseCurrency, quoteCurrency, marketName } = getMarketDetails(\r\n      market,\r\n      customMarkets,\r\n    );\r\n    if (!baseCurrency || !quoteCurrency || !market) {\r\n      return;\r\n    }\r\n    (openOrdersList || []).forEach((openOrders) => {\r\n      const inOrdersBase =\r\n        openOrders?.baseTokenTotal &&\r\n        openOrders?.baseTokenFree &&\r\n        market.baseSplSizeToNumber(\r\n          openOrders.baseTokenTotal.sub(openOrders.baseTokenFree),\r\n        );\r\n      const inOrdersQuote =\r\n        openOrders?.quoteTokenTotal &&\r\n        openOrders?.quoteTokenFree &&\r\n        market.baseSplSizeToNumber(\r\n          openOrders.quoteTokenTotal.sub(openOrders.quoteTokenFree),\r\n        );\r\n      const unsettledBase =\r\n        openOrders?.baseTokenFree &&\r\n        market.baseSplSizeToNumber(openOrders.baseTokenFree);\r\n      const unsettledQuote =\r\n        openOrders?.quoteTokenFree &&\r\n        market.baseSplSizeToNumber(openOrders.quoteTokenFree);\r\n\r\n      openOrderAccountBalances.push({\r\n        marketName,\r\n        market,\r\n        coin: baseCurrency,\r\n        key: `${marketName}${baseCurrency}`,\r\n        orders: inOrdersBase,\r\n        unsettled: unsettledBase,\r\n        openOrders,\r\n      });\r\n      openOrderAccountBalances.push({\r\n        marketName,\r\n        market,\r\n        coin: quoteCurrency,\r\n        key: `${marketName}${quoteCurrency}`,\r\n        orders: inOrdersQuote,\r\n        unsettled: unsettledQuote,\r\n        openOrders,\r\n      });\r\n    });\r\n  });\r\n  return openOrderAccountBalances;\r\n}\r\n\r\nexport function getMarketInfos(\r\n  customMarkets: CustomMarketInfo[],\r\n): MarketInfo[] {\r\n  const customMarketsInfo = customMarkets.map((m) => ({\r\n    ...m,\r\n    address: new PublicKey(m.address),\r\n    programId: new PublicKey(m.programId),\r\n    deprecated: false,\r\n  }));\r\n\r\n  return [...customMarketsInfo, ...USE_MARKETS];\r\n}\r\n\r\nexport function useMarketInfos() {\r\n  const { customMarkets } = useMarket();\r\n  return getMarketInfos(customMarkets);\r\n}\r\n\r\n/**\r\n * If selling, choose min tick size. If buying choose a price\r\n * s.t. given the state of the orderbook, the order will spend\r\n * `cost` cost currency.\r\n *\r\n * @param orderbook serum Orderbook object\r\n * @param cost quantity to spend. Base currency if selling,\r\n *  quote currency if buying.\r\n * @param tickSizeDecimals size of price increment of the market\r\n */\r\nexport function getMarketOrderPrice(\r\n  orderbook: Orderbook,\r\n  cost: number,\r\n  tickSizeDecimals?: number,\r\n) {\r\n  if (orderbook.isBids) {\r\n    return orderbook.market.tickSize;\r\n  }\r\n  let spentCost = 0;\r\n  let price, sizeAtLevel, costAtLevel: number;\r\n  const asks = orderbook.getL2(1000);\r\n  for ([price, sizeAtLevel] of asks) {\r\n    costAtLevel = price * sizeAtLevel;\r\n    if (spentCost + costAtLevel > cost) {\r\n      break;\r\n    }\r\n    spentCost += costAtLevel;\r\n  }\r\n  const sendPrice = Math.min(price * 1.02, asks[0][0] * 1.05);\r\n  let formattedPrice;\r\n  if (tickSizeDecimals) {\r\n    formattedPrice = floorToDecimal(sendPrice, tickSizeDecimals);\r\n  } else {\r\n    formattedPrice = sendPrice;\r\n  }\r\n  return formattedPrice;\r\n}\r\n\r\nexport function getExpectedFillPrice(\r\n  orderbook: Orderbook,\r\n  cost: number,\r\n  tickSizeDecimals?: number,\r\n) {\r\n  let spentCost = 0;\r\n  let avgPrice = 0;\r\n  let price, sizeAtLevel, costAtLevel: number;\r\n  for ([price, sizeAtLevel] of orderbook.getL2(1000)) {\r\n    costAtLevel = (orderbook.isBids ? 1 : price) * sizeAtLevel;\r\n    if (spentCost + costAtLevel > cost) {\r\n      avgPrice += (cost - spentCost) * price;\r\n      spentCost = cost;\r\n      break;\r\n    }\r\n    avgPrice += costAtLevel * price;\r\n    spentCost += costAtLevel;\r\n  }\r\n  const totalAvgPrice = avgPrice / Math.min(cost, spentCost);\r\n  let formattedPrice;\r\n  if (tickSizeDecimals) {\r\n    formattedPrice = floorToDecimal(totalAvgPrice, tickSizeDecimals);\r\n  } else {\r\n    formattedPrice = totalAvgPrice;\r\n  }\r\n  return formattedPrice;\r\n}\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml,body{\r\n  background: #11161D;\r\n}\r\ninput[type=number]::-webkit-inner-spin-button {\r\n  opacity: 0;\r\n}\r\ninput[type=number]:hover::-webkit-inner-spin-button,\r\ninput[type=number]:focus::-webkit-inner-spin-button {\r\n  opacity: 0.25;\r\n}\r\n/* width */\r\n::-webkit-scrollbar {\r\n  width: 15px;\r\n}\r\n/* Track */\r\n::-webkit-scrollbar-track {\r\n  background: #2d313c;\r\n}\r\n/* Handle */\r\n::-webkit-scrollbar-thumb {\r\n  background: #5b5f67;\r\n}\r\n/* Handle on hover */\r\n::-webkit-scrollbar-thumb:hover {\r\n  background: #5b5f67;\r\n}\r\n.ant-slider-track, .ant-slider:hover .ant-slider-track {\r\n  background-color: #2abdd2;\r\n  opacity: 0.75;\r\n}\r\n.ant-slider-track,\r\n.ant-slider ant-slider-track:hover {\r\n  background-color: #2abdd2;\r\n  opacity: 0.75;\r\n}\r\n.ant-slider-dot-active,\r\n.ant-slider-handle,\r\n.ant-slider-handle-click-focused,\r\n.ant-slider:hover .ant-slider-handle:not(.ant-tooltip-open)  {\r\n  border: 2px solid #2abdd2; \r\n}\r\n.ant-table-tbody > tr.ant-table-row:hover > td {\r\n  background: #273043;\r\n}\r\n.ant-table-tbody > tr > td {\r\n  border-bottom: 8px solid #1A2029;\r\n}\r\n.ant-table-container table > thead > tr:first-child th {\r\n  border-bottom: none;\r\n}\r\n.ant-divider-horizontal.ant-divider-with-text::before, .ant-divider-horizontal.ant-divider-with-text::after {\r\n  border-top: 1px solid #434a59 !important;\r\n}\r\n.ant-layout {\r\n    background: #11161D\r\n  }\r\n  .ant-table {\r\n    background: #212734;\r\n  }\r\n  .ant-table-thead > tr > th {\r\n    background: #1A2029;\r\n  }\r\n.ant-select-item-option-content {\r\n  img {\r\n    margin-right: 4px;\r\n  }\r\n}\r\n.ant-modal-content {\r\n  background-color: #212734;\r\n}\r\n\r\n@-webkit-keyframes highlight {\r\n  from { background-color: #2abdd2;}\r\n  to {background-color: #1A2029;}\r\n}\r\n@-moz-keyframes highlight {\r\n  from { background-color: #2abdd2;}\r\n  to {background-color: #1A2029;}\r\n}\r\n@-keyframes highlight {\r\n  from { background-color: #2abdd2;}\r\n  to {background-color: #1A2029;}\r\n}\r\n.flash {\r\n  -moz-animation: highlight 0.5s ease 0s 1 alternate ;\r\n  -webkit-animation: highlight 0.5s ease 0s 1 alternate;\r\n  animation: highlight 0.5s ease 0s 1 alternate;\r\n}`;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from 'antd';\r\n\r\nconst { Title } = Typography;\r\n\r\nexport default class ErrorBoundary extends Component {\r\n  state = {\r\n    hasError: false,\r\n  };\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { hasError: true };\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <div>\r\n          <div>\r\n            <Title level={2}>Something went wrong.</Title>\r\n            <Title level={4}>Please try again later.</Title>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n","import { useRef, useEffect } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef<() => void>();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current && savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  margin: 5px;\r\n  padding: 20px;\r\n  background-color: #1a2029;\r\n`;\r\n\r\nexport default function FloatingElement({\r\n  style = undefined,\r\n  children,\r\n  stretchVertical = false,\r\n}) {\r\n  return (\r\n    <Wrapper\r\n      style={{\r\n        height: stretchVertical ? 'calc(100% - 10px)' : undefined,\r\n        ...style,\r\n      }}\r\n    >\r\n      {children}\r\n    </Wrapper>\r\n  );\r\n}\r\n","import { Col, Row } from 'antd';\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { useMarket, useOrderbook, useMarkPrice } from '../utils/markets';\r\nimport { isEqual, getDecimalCount } from '../utils/utils';\r\nimport { useInterval } from '../utils/useInterval';\r\nimport FloatingElement from './layout/FloatingElement';\r\nimport usePrevious from '../utils/usePrevious';\r\nimport { ArrowUpOutlined, ArrowDownOutlined } from '@ant-design/icons';\r\n\r\nconst Title = styled.div`\r\n  color: rgba(255, 255, 255, 1);\r\n`;\r\n\r\nconst SizeTitle = styled(Row)`\r\n  padding: 20px 0 14px;\r\n  color: #434a59;\r\n`;\r\n\r\nconst MarkPriceTitle = styled(Row)`\r\n  padding: 20px 0 14px;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst Line = styled.div`\r\n  text-align: right;\r\n  float: right;\r\n  height: 100%;\r\n  ${(props) =>\r\n    props['data-width'] &&\r\n    css`\r\n      width: ${props['data-width']};\r\n    `}\r\n  ${(props) =>\r\n    props['data-bgcolor'] &&\r\n    css`\r\n      background-color: ${props['data-bgcolor']};\r\n    `}\r\n`;\r\n\r\nconst Price = styled.div`\r\n  position: absolute;\r\n  right: 5px;\r\n  color: white;\r\n`;\r\n\r\nexport default function Orderbook({ smallScreen, depth = 7, onPrice, onSize }) {\r\n  const markPrice = useMarkPrice();\r\n  const [orderbook] = useOrderbook();\r\n  const { baseCurrency, quoteCurrency } = useMarket();\r\n\r\n  const currentOrderbookData = useRef(null);\r\n  const lastOrderbookData = useRef(null);\r\n\r\n  const [orderbookData, setOrderbookData] = useState(null);\r\n\r\n  useInterval(() => {\r\n    if (\r\n      !currentOrderbookData.current ||\r\n      JSON.stringify(currentOrderbookData.current) !==\r\n        JSON.stringify(lastOrderbookData.current)\r\n    ) {\r\n      let bids = orderbook?.bids || [];\r\n      let asks = orderbook?.asks || [];\r\n\r\n      let sum = (total, [, size], index) =>\r\n        index < depth ? total + size : total;\r\n      let totalSize = bids.reduce(sum, 0) + asks.reduce(sum, 0);\r\n\r\n      let bidsToDisplay = getCumulativeOrderbookSide(bids, totalSize, false);\r\n      let asksToDisplay = getCumulativeOrderbookSide(asks, totalSize, true);\r\n\r\n      currentOrderbookData.current = {\r\n        bids: orderbook?.bids,\r\n        asks: orderbook?.asks,\r\n      };\r\n\r\n      setOrderbookData({ bids: bidsToDisplay, asks: asksToDisplay });\r\n    }\r\n  }, 250);\r\n\r\n  useEffect(() => {\r\n    lastOrderbookData.current = {\r\n      bids: orderbook?.bids,\r\n      asks: orderbook?.asks,\r\n    };\r\n  }, [orderbook]);\r\n\r\n  function getCumulativeOrderbookSide(orders, totalSize, backwards = false) {\r\n    let cumulative = orders\r\n      .slice(0, depth)\r\n      .reduce((cumulative, [price, size], i) => {\r\n        const cumulativeSize = (cumulative[i - 1]?.cumulativeSize || 0) + size;\r\n        cumulative.push({\r\n          price,\r\n          size,\r\n          cumulativeSize,\r\n          sizePercent: Math.round((cumulativeSize / (totalSize || 1)) * 100),\r\n        });\r\n        return cumulative;\r\n      }, []);\r\n    if (backwards) {\r\n      cumulative = cumulative.reverse();\r\n    }\r\n    return cumulative;\r\n  }\r\n\r\n  return (\r\n    <FloatingElement\r\n      style={\r\n        smallScreen ? { flex: 1 } : { height: '500px', overflow: 'hidden' }\r\n      }\r\n    >\r\n      <Title>Orderbook</Title>\r\n      <SizeTitle>\r\n        <Col span={12} style={{ textAlign: 'left' }}>\r\n          Size ({baseCurrency})\r\n        </Col>\r\n        <Col span={12} style={{ textAlign: 'right' }}>\r\n          Price ({quoteCurrency})\r\n        </Col>\r\n      </SizeTitle>\r\n      {orderbookData?.asks.map(({ price, size, sizePercent }) => (\r\n        <OrderbookRow\r\n          key={price + ''}\r\n          price={price}\r\n          size={size}\r\n          side={'sell'}\r\n          sizePercent={sizePercent}\r\n          onPriceClick={() => onPrice(price)}\r\n          onSizeClick={() => onSize(size)}\r\n        />\r\n      ))}\r\n      <MarkPriceComponent markPrice={markPrice} />\r\n      {orderbookData?.bids.map(({ price, size, sizePercent }) => (\r\n        <OrderbookRow\r\n          key={price + ''}\r\n          price={price}\r\n          size={size}\r\n          side={'buy'}\r\n          sizePercent={sizePercent}\r\n          onPriceClick={() => onPrice(price)}\r\n          onSizeClick={() => onSize(size)}\r\n        />\r\n      ))}\r\n    </FloatingElement>\r\n  );\r\n}\r\n\r\nconst OrderbookRow = React.memo(\r\n  ({ side, price, size, sizePercent, onSizeClick, onPriceClick }) => {\r\n    const element = useRef();\r\n\r\n    const { market } = useMarket();\r\n\r\n    useEffect(() => {\r\n      // eslint-disable-next-line\r\n      !element.current?.classList.contains('flash') &&\r\n        element.current?.classList.add('flash');\r\n      const id = setTimeout(\r\n        () =>\r\n          element.current?.classList.contains('flash') &&\r\n          element.current?.classList.remove('flash'),\r\n        250,\r\n      );\r\n      return () => clearTimeout(id);\r\n    }, [price, size]);\r\n\r\n    let formattedSize =\r\n      market?.minOrderSize && !isNaN(size)\r\n        ? Number(size).toFixed(getDecimalCount(market.minOrderSize) + 1)\r\n        : size;\r\n\r\n    let formattedPrice =\r\n      market?.tickSize && !isNaN(price)\r\n        ? Number(price).toFixed(getDecimalCount(market.tickSize) + 1)\r\n        : price;\r\n\r\n    return (\r\n      <Row ref={element} style={{ marginBottom: 1 }} onClick={onSizeClick}>\r\n        <Col span={12} style={{ textAlign: 'left' }}>\r\n          {formattedSize}\r\n        </Col>\r\n        <Col span={12} style={{ textAlign: 'right' }}>\r\n          <Line\r\n            data-width={sizePercent + '%'}\r\n            data-bgcolor={\r\n              side === 'buy'\r\n                ? 'rgba(65, 199, 122, 0.6)'\r\n                : 'rgba(242, 60, 105, 0.6)'\r\n            }\r\n          />\r\n          <Price onClick={onPriceClick}>{formattedPrice}</Price>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  },\r\n  (prevProps, nextProps) =>\r\n    isEqual(prevProps, nextProps, ['price', 'size', 'sizePercent']),\r\n);\r\n\r\nconst MarkPriceComponent = React.memo(\r\n  ({ markPrice }) => {\r\n    const { market } = useMarket();\r\n    const previousMarkPrice = usePrevious(markPrice);\r\n\r\n    let markPriceColor =\r\n      markPrice > previousMarkPrice\r\n        ? '#41C77A'\r\n        : markPrice < previousMarkPrice\r\n        ? '#F23B69'\r\n        : 'white';\r\n\r\n    let formattedMarkPrice =\r\n      markPrice &&\r\n      market?.tickSize &&\r\n      markPrice.toFixed(getDecimalCount(market.tickSize));\r\n\r\n    return (\r\n      <MarkPriceTitle justify=\"center\">\r\n        <Col style={{ color: markPriceColor }}>\r\n          {markPrice > previousMarkPrice && (\r\n            <ArrowUpOutlined style={{ marginRight: 5 }} />\r\n          )}\r\n          {markPrice < previousMarkPrice && (\r\n            <ArrowDownOutlined style={{ marginRight: 5 }} />\r\n          )}\r\n          {formattedMarkPrice || '----'}\r\n        </Col>\r\n      </MarkPriceTitle>\r\n    );\r\n  },\r\n  (prevProps, nextProps) => isEqual(prevProps, nextProps, ['markPrice']),\r\n);\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport default function usePrevious(value) {\r\n  // The ref object is a generic container whose current property is mutable ...\r\n  // ... and can hold any value, similar to an instance property on a class\r\n  const ref = useRef();\r\n\r\n  // Store current value in ref\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]); // Only re-run if value changes\r\n\r\n  // Return previous value (happens before update in useEffect above)\r\n  return ref.current;\r\n}\r\n","import React from 'react';\r\nimport { ConfigProvider, Table } from 'antd';\r\n\r\nexport default function DataTable({\r\n  dataSource,\r\n  columns,\r\n  emptyLabel = 'No data',\r\n  pagination = false,\r\n  loading = false,\r\n  pageSize = 10,\r\n}) {\r\n  const customizeRenderEmpty = () => (\r\n    <div\r\n      style={{\r\n        padding: '20px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      {emptyLabel}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <ConfigProvider renderEmpty={customizeRenderEmpty}>\r\n      <Table\r\n        dataSource={dataSource}\r\n        columns={columns}\r\n        pagination={pagination ? { pagination: true, pageSize } : false}\r\n        loading={loading}\r\n      />\r\n    </ConfigProvider>\r\n  );\r\n}\r\n","import { Button } from 'antd';\r\nimport React from 'react';\r\nimport {\r\n  useTokenAccounts,\r\n  getSelectedTokenAccountForMint,\r\n} from '../../utils/markets';\r\nimport DataTable from '../layout/DataTable';\r\nimport { useSendConnection } from '../../utils/connection';\r\nimport { useWallet } from '../../utils/wallet';\r\nimport { settleFunds } from '../../utils/send';\r\nimport { notify } from '../../utils/notifications';\r\n\r\nexport default function BalancesTable({\r\n  balances,\r\n  showMarket,\r\n  hideWalletBalance,\r\n  onSettleSuccess,\r\n}) {\r\n  const [accounts] = useTokenAccounts();\r\n  const connection = useSendConnection();\r\n  const { wallet } = useWallet();\r\n\r\n  async function onSettleFunds(market, openOrders) {\r\n    try {\r\n      await settleFunds({\r\n        market,\r\n        openOrders,\r\n        connection,\r\n        wallet,\r\n        baseCurrencyAccount: getSelectedTokenAccountForMint(\r\n          accounts,\r\n          market?.baseMintAddress,\r\n        ),\r\n        quoteCurrencyAccount: getSelectedTokenAccountForMint(\r\n          accounts,\r\n          market?.quoteMintAddress,\r\n        ),\r\n      });\r\n    } catch (e) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    onSettleSuccess && onSettleSuccess();\r\n  }\r\n\r\n  const columns = [\r\n    showMarket\r\n      ? {\r\n          title: 'Market',\r\n          dataIndex: 'marketName',\r\n          key: 'marketName',\r\n        }\r\n      : null,\r\n    {\r\n      title: 'Coin',\r\n      dataIndex: 'coin',\r\n      key: 'coin',\r\n    },\r\n    hideWalletBalance\r\n      ? null\r\n      : {\r\n          title: 'Wallet Balance',\r\n          dataIndex: 'wallet',\r\n          key: 'wallet',\r\n        },\r\n    {\r\n      title: 'Orders',\r\n      dataIndex: 'orders',\r\n      key: 'orders',\r\n    },\r\n    {\r\n      title: 'Unsettled',\r\n      dataIndex: 'unsettled',\r\n      key: 'unsettled',\r\n    },\r\n    {\r\n      key: 'action',\r\n      render: ({ market, openOrders, marketName }) => (\r\n        <div style={{ textAlign: 'right' }}>\r\n          <Button\r\n            ghost\r\n            style={{ marginRight: 12 }}\r\n            onClick={() => onSettleFunds(market, openOrders)}\r\n          >\r\n            Settle {marketName}\r\n          </Button>\r\n        </div>\r\n      ),\r\n    },\r\n  ].filter((x) => x);\r\n  return (\r\n    <DataTable\r\n      emptyLabel=\"No balances\"\r\n      dataSource={balances}\r\n      columns={columns}\r\n      pagination={false}\r\n    />\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport DataTable from '../layout/DataTable';\r\n\r\nimport styled from 'styled-components';\r\nimport { Button, Col, Row, Tag } from 'antd';\r\nimport { cancelOrder } from '../../utils/send';\r\nimport { useWallet } from '../../utils/wallet';\r\nimport { useSendConnection } from '../../utils/connection';\r\nimport { notify } from '../../utils/notifications';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\nimport { OrderWithMarketAndMarketName } from '../../utils/types';\r\n\r\nconst CancelButton = styled(Button)`\r\n  color: #f23b69;\r\n  border: 1px solid #f23b69;\r\n`;\r\n\r\nexport default function OpenOrderTable({\r\n  openOrders,\r\n  onCancelSuccess,\r\n  pageSize,\r\n  loading,\r\n  marketFilter,\r\n}: {\r\n  openOrders: OrderWithMarketAndMarketName[] | null | undefined;\r\n  onCancelSuccess?: () => void;\r\n  pageSize?: number;\r\n  loading?: boolean;\r\n  marketFilter?: boolean;\r\n}) {\r\n  let { wallet } = useWallet();\r\n  let connection = useSendConnection();\r\n\r\n  const [cancelId, setCancelId] = useState(null);\r\n\r\n  async function cancel(order) {\r\n    setCancelId(order?.orderId);\r\n    try {\r\n      await cancelOrder({\r\n        order,\r\n        market: order.market,\r\n        connection,\r\n        wallet,\r\n      });\r\n    } catch (e) {\r\n      notify({\r\n        message: 'Error cancelling order',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n      return;\r\n    } finally {\r\n      setCancelId(null);\r\n    }\r\n    onCancelSuccess && onCancelSuccess();\r\n  }\r\n\r\n  const marketFilters = [\r\n    ...new Set((openOrders || []).map((orderInfos) => orderInfos.marketName)),\r\n  ].map((marketName) => {\r\n    return { text: marketName, value: marketName };\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Market',\r\n      dataIndex: 'marketName',\r\n      key: 'marketName',\r\n      filters: marketFilter ? marketFilters : undefined,\r\n      onFilter: (value, record) => record.marketName.indexOf(value) === 0,\r\n    },\r\n    {\r\n      title: 'Side',\r\n      dataIndex: 'side',\r\n      key: 'side',\r\n      render: (side) => (\r\n        <Tag\r\n          color={side === 'buy' ? '#41C77A' : '#F23B69'}\r\n          style={{ fontWeight: 700 }}\r\n        >\r\n          {side.charAt(0).toUpperCase() + side.slice(1)}\r\n        </Tag>\r\n      ),\r\n      sorter: (a, b) => {\r\n        if (a.side === b.side) {\r\n          return 0;\r\n        } else if (a.side === 'buy') {\r\n          return 1;\r\n        } else {\r\n          return -1;\r\n        }\r\n      },\r\n      showSorterTooltip: false,\r\n    },\r\n    {\r\n      title: 'Size',\r\n      dataIndex: 'size',\r\n      key: 'size',\r\n      sorter: (a, b) => b.size - a.size,\r\n      showSorterTooltip: false,\r\n    },\r\n    {\r\n      title: 'Price',\r\n      dataIndex: 'price',\r\n      key: 'price',\r\n      sorter: (a, b) => b.price - a.price,\r\n      showSorterTooltip: false,\r\n    },\r\n    {\r\n      key: 'orderId',\r\n      render: (order) => (\r\n        <div style={{ textAlign: 'right' }}>\r\n          <CancelButton\r\n            icon={<DeleteOutlined />}\r\n            onClick={() => cancel(order)}\r\n            loading={cancelId + '' === order?.orderId + ''}\r\n          >\r\n            Cancel\r\n          </CancelButton>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  const dataSource = (openOrders || []).map((order) => ({\r\n    ...order,\r\n    key: order.orderId,\r\n  }));\r\n\r\n  return (\r\n    <Row>\r\n      <Col span={24}>\r\n        <DataTable\r\n          emptyLabel=\"No open orders\"\r\n          dataSource={dataSource}\r\n          columns={columns}\r\n          pagination={true}\r\n          pageSize={pageSize ? pageSize : 5}\r\n          loading={loading !== undefined && loading}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Row, Col, Tag } from 'antd';\r\nimport { useFills, useMarket } from '../../utils/markets';\r\nimport DataTable from '../layout/DataTable';\r\n\r\nexport default function FillsTable() {\r\n  const fills = useFills();\r\n\r\n  const { quoteCurrency } = useMarket();\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Market',\r\n      dataIndex: 'marketName',\r\n      key: 'marketName',\r\n    },\r\n    {\r\n      title: 'Side',\r\n      dataIndex: 'side',\r\n      key: 'side',\r\n      render: (side) => (\r\n        <Tag\r\n          color={side === 'buy' ? '#41C77A' : '#F23B69'}\r\n          style={{ fontWeight: 700 }}\r\n        >\r\n          {side.charAt(0).toUpperCase() + side.slice(1)}\r\n        </Tag>\r\n      ),\r\n    },\r\n    {\r\n      title: `Size`,\r\n      dataIndex: 'size',\r\n      key: 'size',\r\n    },\r\n    {\r\n      title: `Price`,\r\n      dataIndex: 'price',\r\n      key: 'price',\r\n    },\r\n    {\r\n      title: `Liquidity`,\r\n      dataIndex: 'liquidity',\r\n      key: 'liquidity',\r\n    },\r\n    {\r\n      title: quoteCurrency ? `Fees (${quoteCurrency})` : 'Fees',\r\n      dataIndex: 'feeCost',\r\n      key: 'feeCost',\r\n    },\r\n  ];\r\n\r\n  const dataSource = (fills || []).map((fill) => ({\r\n    ...fill,\r\n    key: `${fill.orderId}${fill.side}`,\r\n    liquidity: fill.eventFlags.maker ? 'Maker' : 'Taker',\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col span={24}>\r\n          <DataTable\r\n            dataSource={dataSource}\r\n            columns={columns}\r\n            pagination={true}\r\n            pageSize={5}\r\n            emptyLabel=\"No fills\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Row, Col, Typography, Tag } from 'antd';\r\nimport { useFeeDiscountKeys } from '../../utils/markets';\r\nimport DataTable from '../layout/DataTable';\r\nimport { TokenInstructions, getFeeRates } from '@project-serum/serum';\r\nimport { percentFormat } from '../../utils/utils';\r\n\r\nexport default function FeesTable() {\r\n  const [feeAccounts] = useFeeDiscountKeys();\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Fee Tier',\r\n      dataIndex: 'feeTier',\r\n      key: 'feeTier',\r\n      render: (feeTier, row) => (\r\n        <div style={{ display: 'flex' }}>\r\n          <Typography>{feeTier}</Typography>\r\n          {row.index === 0 ? (\r\n            <div style={{ marginLeft: 10 }}>\r\n              <Tag color={'#41C77A'} style={{ fontWeight: 700 }}>\r\n                Selected\r\n              </Tag>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Taker',\r\n      dataIndex: 'taker',\r\n      key: 'taker',\r\n      render: (feeTier, row) =>\r\n        percentFormat.format(getFeeRates(row.feeTier).taker),\r\n    },\r\n    {\r\n      title: 'Maker',\r\n      dataIndex: 'maker',\r\n      key: 'maker',\r\n      render: (feeTier, row) =>\r\n        percentFormat.format(getFeeRates(row.feeTier).maker),\r\n    },\r\n    {\r\n      title: `Public Key`,\r\n      dataIndex: 'pubkey',\r\n      key: 'pubkey',\r\n      render: (pubkey) => pubkey.toBase58(),\r\n    },\r\n    {\r\n      title: `Balance`,\r\n      dataIndex: 'balance',\r\n      key: 'balance',\r\n    },\r\n    {\r\n      title: `Mint`,\r\n      dataIndex: 'mint',\r\n      key: 'mint',\r\n      render: (_, row) =>\r\n        row.mint.equals(TokenInstructions.SRM_MINT)\r\n          ? 'SRM'\r\n          : row.mint.equals(TokenInstructions.MSRM_MINT)\r\n          ? 'MSRM'\r\n          : 'UNKNOWN',\r\n    },\r\n  ];\r\n\r\n  const dataSource = (feeAccounts || []).map((account, index) => ({\r\n    ...account,\r\n    index,\r\n    key: account.pubkey.toBase58(),\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col span={24}>\r\n          <DataTable\r\n            dataSource={dataSource}\r\n            columns={columns}\r\n            pagination={true}\r\n            pageSize={5}\r\n            emptyLabel=\"No (M)SRM accounts\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ marginTop: 8 }}>\r\n        <Col>\r\n          <Typography>\r\n            Holding SRM or MSRM makes you eligible for fee discounts:\r\n          </Typography>\r\n          <FeeScheduleTable />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction FeeScheduleTable() {\r\n  // Representation of serum-js/src/fees.ts\r\n  const dataSource = [\r\n    { feeTier: 0, taker: 0.0022, maker: -0.0003, token: '', balance: '' },\r\n    { feeTier: 1, taker: 0.002, maker: -0.0003, token: 'SRM', balance: 100 },\r\n    { feeTier: 2, taker: 0.0018, maker: -0.0003, token: 'SRM', balance: 1000 },\r\n    { feeTier: 3, taker: 0.0016, maker: -0.0003, token: 'SRM', balance: 10000 },\r\n    {\r\n      feeTier: 4,\r\n      taker: 0.0014,\r\n      maker: -0.0003,\r\n      token: 'SRM',\r\n      balance: 100000,\r\n    },\r\n    {\r\n      feeTier: 5,\r\n      taker: 0.0012,\r\n      maker: -0.0003,\r\n      token: 'SRM',\r\n      balance: 1000000,\r\n    },\r\n    { feeTier: 6, taker: 0.001, maker: -0.0005, token: 'MSRM', balance: 1 },\r\n  ];\r\n  const columns = [\r\n    {\r\n      title: 'Fee Tier',\r\n      dataIndex: 'feeTier',\r\n      key: 'feeTier',\r\n    },\r\n    {\r\n      title: 'Taker',\r\n      dataIndex: 'taker',\r\n      key: 'taker',\r\n      render: (feeTier, row) =>\r\n        percentFormat.format(getFeeRates(row.feeTier).taker),\r\n    },\r\n    {\r\n      title: 'Maker',\r\n      dataIndex: 'maker',\r\n      key: 'maker',\r\n      render: (feeTier, row) =>\r\n        percentFormat.format(getFeeRates(row.feeTier).maker),\r\n    },\r\n    {\r\n      title: 'Requirements',\r\n      dataIndex: 'requirements',\r\n      key: 'requirements',\r\n      render: (_, row) => (\r\n        <Typography>\r\n          {!row.balance ? 'None' : `≥ ${row.balance} ${row.token}`}\r\n        </Typography>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <DataTable\r\n      dataSource={dataSource.map((info) => ({ ...info, key: info.feeTier }))}\r\n      columns={columns}\r\n    />\r\n  );\r\n}\r\n","import BalancesTable from './BalancesTable';\r\nimport OpenOrderTable from './OpenOrderTable';\r\nimport React from 'react';\r\nimport { Tabs, Typography } from 'antd';\r\nimport FillsTable from './FillsTable';\r\nimport FloatingElement from '../layout/FloatingElement';\r\nimport FeesTable from './FeesTable';\r\nimport { useOpenOrders, useBalances, useMarket } from '../../utils/markets';\r\n\r\nconst { Paragraph } = Typography;\r\nconst { TabPane } = Tabs;\r\n\r\nexport default function Index() {\r\n  const { market } = useMarket();\r\n  return (\r\n    <FloatingElement style={{ flex: 1, paddingTop: 20 }}>\r\n      <Typography>\r\n        <Paragraph style={{ color: 'rgba(255,255,255,0.5)' }}>\r\n          Make sure to go to Balances and click Settle to send out your funds.\r\n        </Paragraph>\r\n        <Paragraph style={{ color: 'rgba(255,255,255,0.5)' }}>\r\n          To fund your wallet, <a href=\"https://www.sollet.io\">sollet.io</a>.\r\n          You can get SOL from FTX, Binance, BitMax, and others. You can get\r\n          other tokens from FTX.{' '}\r\n        </Paragraph>\r\n      </Typography>\r\n      <Tabs defaultActiveKey=\"orders\">\r\n        <TabPane tab=\"Open Orders\" key=\"orders\">\r\n          <OpenOrdersTab />\r\n        </TabPane>\r\n        <TabPane tab=\"Recent Trade History\" key=\"fills\">\r\n          <FillsTable />\r\n        </TabPane>\r\n        <TabPane tab=\"Balances\" key=\"balances\">\r\n          <BalancesTab />\r\n        </TabPane>\r\n        {market && market.supportsSrmFeeDiscounts ? (\r\n          <TabPane tab=\"Fee discounts\" key=\"fees\">\r\n            <FeesTable />\r\n          </TabPane>\r\n        ) : null}\r\n      </Tabs>\r\n    </FloatingElement>\r\n  );\r\n}\r\n\r\nconst OpenOrdersTab = () => {\r\n  const openOrders = useOpenOrders();\r\n\r\n  return <OpenOrderTable openOrders={openOrders} />;\r\n};\r\n\r\nconst BalancesTab = () => {\r\n  const balances = useBalances();\r\n\r\n  return <BalancesTable balances={balances} />;\r\n};\r\n","import React from 'react';\r\nimport { Modal } from 'antd';\r\nimport {\r\n  useSelectedBaseCurrencyAccount,\r\n  useMarket,\r\n  useSelectedQuoteCurrencyAccount,\r\n} from '../utils/markets';\r\nimport { useWallet } from '../utils/wallet';\r\nimport Link from './Link';\r\n\r\nexport default function DepositDialog({ onClose, baseOrQuote }) {\r\n  const { market, baseCurrency, quoteCurrency } = useMarket();\r\n\r\n  const { providerName, providerUrl } = useWallet();\r\n  const baseCurrencyAccount = useSelectedBaseCurrencyAccount();\r\n  const quoteCurrencyAccount = useSelectedQuoteCurrencyAccount();\r\n  let coinMint;\r\n  let account;\r\n  let depositCoin;\r\n  if (baseOrQuote === 'base') {\r\n    coinMint = market?.baseMintAddress;\r\n    account = baseCurrencyAccount;\r\n    depositCoin = baseCurrency;\r\n  } else if (baseOrQuote === 'quote') {\r\n    coinMint = market?.quoteMintAddress;\r\n    account = quoteCurrencyAccount;\r\n    depositCoin = quoteCurrency;\r\n  } else {\r\n    account = null;\r\n  }\r\n  if (!coinMint) {\r\n    return null;\r\n  }\r\n  return (\r\n    <Modal\r\n      title={depositCoin}\r\n      visible={!!coinMint}\r\n      onOk={onClose}\r\n      onCancel={onClose}\r\n    >\r\n      <div style={{ paddingTop: '20px' }}>\r\n        <p style={{ color: 'white' }}>Mint address:</p>\r\n        <p style={{ color: 'rgba(255,255,255,0.5)' }}>{coinMint.toBase58()}</p>\r\n        <div>\r\n          <p style={{ color: 'white' }}>SPL Deposit address:</p>\r\n          <p style={{ color: 'rgba(255,255,255,0.5)' }}>\r\n            {account ? (\r\n              account.pubkey.toBase58()\r\n            ) : (\r\n              <>\r\n                Visit{' '}\r\n                <Link external to={providerUrl}>\r\n                  {providerName}\r\n                </Link>{' '}\r\n                to create an account for this mint\r\n              </>\r\n            )}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { TokenAccount } from '../utils/types';\r\nimport { useSelectedTokenAccounts } from '../utils/markets';\r\nimport { Button, Col, Select, Typography } from 'antd';\r\nimport { CopyOutlined } from '@ant-design/icons';\r\nimport { abbreviateAddress } from '../utils/utils';\r\nimport { notify } from '../utils/notifications';\r\n\r\nexport default function StandaloneTokenAccountsSelect({\r\n  accounts,\r\n  mint,\r\n  label,\r\n}: {\r\n  accounts: TokenAccount[] | null | undefined;\r\n  mint: string | undefined;\r\n  label?: boolean;\r\n}) {\r\n  const [\r\n    selectedTokenAccounts,\r\n    setSelectedTokenAccounts,\r\n  ] = useSelectedTokenAccounts();\r\n\r\n  let selectedValue: string | undefined;\r\n  if (mint && mint in selectedTokenAccounts) {\r\n    selectedValue = selectedTokenAccounts[mint];\r\n  } else if (accounts && accounts?.length > 0) {\r\n    selectedValue = accounts[0].pubkey.toBase58();\r\n  } else {\r\n    selectedValue = undefined;\r\n  }\r\n\r\n  const setTokenAccountForCoin = (value) => {\r\n    if (!mint) {\r\n      notify({\r\n        message: 'Error selecting token account',\r\n        description: 'Mint is undefined',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    const newSelectedTokenAccounts = { ...selectedTokenAccounts };\r\n    newSelectedTokenAccounts[mint] = value;\r\n    setSelectedTokenAccounts(newSelectedTokenAccounts);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {label && <Col span={8}>Token account:</Col>}\r\n      <Col span={label ? 13 : 21}>\r\n        <Select\r\n          style={{ width: '100%' }}\r\n          value={selectedValue}\r\n          onSelect={setTokenAccountForCoin}\r\n        >\r\n          {accounts?.map((account) => (\r\n            <Select.Option\r\n              key={account.pubkey.toBase58()}\r\n              value={account.pubkey.toBase58()}\r\n            >\r\n              <Typography.Text code>\r\n                {label\r\n                  ? abbreviateAddress(account.pubkey, 8)\r\n                  : account.pubkey.toBase58()}\r\n              </Typography.Text>\r\n            </Select.Option>\r\n          ))}\r\n        </Select>\r\n      </Col>\r\n      <Col span={2} offset={1}>\r\n        <Button\r\n          shape=\"round\"\r\n          icon={<CopyOutlined />}\r\n          size={'small'}\r\n          onClick={() =>\r\n            selectedValue && navigator.clipboard.writeText(selectedValue)\r\n          }\r\n        />\r\n      </Col>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Button } from 'antd';\r\nimport { LinkOutlined } from '@ant-design/icons';\r\n\r\nexport default function LinkAddress({\r\n  title,\r\n  address,\r\n}: {\r\n  title?: undefined | any;\r\n  address: string;\r\n}) {\r\n  return (\r\n    <div>\r\n      {title && <p style={{ color: 'white' }}>{title}</p>}\r\n      <Button\r\n        type=\"link\"\r\n        icon={<LinkOutlined />}\r\n        href={'https://explorer.solana.com/address/' + address}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        {address}\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import { Button, Col, Divider, Popover, Row } from 'antd';\r\nimport React, { useState } from 'react';\r\nimport FloatingElement from './layout/FloatingElement';\r\nimport styled from 'styled-components';\r\nimport {\r\n  useBalances,\r\n  useMarket,\r\n  useSelectedBaseCurrencyAccount,\r\n  useSelectedOpenOrdersAccount,\r\n  useSelectedQuoteCurrencyAccount,\r\n  useTokenAccounts,\r\n} from '../utils/markets';\r\nimport DepositDialog from './DepositDialog';\r\nimport { useWallet } from '../utils/wallet';\r\nimport Link from './Link';\r\nimport { settleFunds } from '../utils/send';\r\nimport { useSendConnection } from '../utils/connection';\r\nimport { notify } from '../utils/notifications';\r\nimport { Balances } from '../utils/types';\r\nimport StandaloneTokenAccountsSelect from './StandaloneTokenAccountSelect';\r\nimport LinkAddress from './LinkAddress';\r\nimport { InfoCircleOutlined } from '@ant-design/icons';\r\n\r\nconst RowBox = styled(Row)`\r\n  padding-bottom: 20px;\r\n`;\r\n\r\nconst Tip = styled.p`\r\n  font-size: 12px;\r\n  padding-top: 6px;\r\n`;\r\n\r\nconst ActionButton = styled(Button)`\r\n  color: #2abdd2;\r\n  background-color: #212734;\r\n  border-width: 0px;\r\n`;\r\n\r\nexport default function StandaloneBalancesDisplay() {\r\n  const { baseCurrency, quoteCurrency, market } = useMarket();\r\n  const balances = useBalances();\r\n  const openOrdersAccount = useSelectedOpenOrdersAccount(true);\r\n  const connection = useSendConnection();\r\n  const { providerUrl, providerName, wallet, connected } = useWallet();\r\n  const [baseOrQuote, setBaseOrQuote] = useState('');\r\n  const baseCurrencyAccount = useSelectedBaseCurrencyAccount();\r\n  const quoteCurrencyAccount = useSelectedQuoteCurrencyAccount();\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const baseCurrencyBalances =\r\n    balances && balances.find((b) => b.coin === baseCurrency);\r\n  const quoteCurrencyBalances =\r\n    balances && balances.find((b) => b.coin === quoteCurrency);\r\n\r\n  async function onSettleFunds() {\r\n    if (!market) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: 'market is undefined',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    if (!openOrdersAccount) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: 'Open orders account is undefined',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    if (!baseCurrencyAccount) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: 'Open orders account is undefined',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    if (!quoteCurrencyAccount) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: 'Open orders account is undefined',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await settleFunds({\r\n        market,\r\n        openOrders: openOrdersAccount,\r\n        connection,\r\n        wallet,\r\n        baseCurrencyAccount,\r\n        quoteCurrencyAccount,\r\n      });\r\n    } catch (e) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    }\r\n  }\r\n\r\n  const formattedBalances: [\r\n    string | undefined,\r\n    Balances | undefined,\r\n    string,\r\n    string | undefined,\r\n  ][] = [\r\n    [\r\n      baseCurrency,\r\n      baseCurrencyBalances,\r\n      'base',\r\n      market?.baseMintAddress.toBase58(),\r\n    ],\r\n    [\r\n      quoteCurrency,\r\n      quoteCurrencyBalances,\r\n      'quote',\r\n      market?.quoteMintAddress.toBase58(),\r\n    ],\r\n  ];\r\n\r\n  return (\r\n    <FloatingElement style={{ flex: 1, paddingTop: 10 }}>\r\n      {formattedBalances.map(\r\n        ([currency, balances, baseOrQuote, mint], index) => (\r\n          <React.Fragment key={index}>\r\n            <Divider style={{ borderColor: 'white' }}>\r\n              {currency}{' '}\r\n              {mint && (\r\n                <Popover\r\n                  content={<LinkAddress address={mint} />}\r\n                  placement=\"bottomRight\"\r\n                  title=\"Token mint\"\r\n                  trigger=\"hover\"\r\n                >\r\n                  <InfoCircleOutlined style={{ color: '#2abdd2' }} />\r\n                </Popover>\r\n              )}\r\n            </Divider>\r\n            {connected && (\r\n              <RowBox align=\"middle\" style={{ paddingBottom: 10 }}>\r\n                <StandaloneTokenAccountsSelect\r\n                  accounts={tokenAccounts?.filter(\r\n                    (account) => account.effectiveMint.toBase58() === mint,\r\n                  )}\r\n                  mint={mint}\r\n                  label\r\n                />\r\n              </RowBox>\r\n            )}\r\n            <RowBox\r\n              align=\"middle\"\r\n              justify=\"space-between\"\r\n              style={{ paddingBottom: 12 }}\r\n            >\r\n              <Col>Wallet balance:</Col>\r\n              <Col>{balances && balances.wallet}</Col>\r\n            </RowBox>\r\n            <RowBox\r\n              align=\"middle\"\r\n              justify=\"space-between\"\r\n              style={{ paddingBottom: 12 }}\r\n            >\r\n              <Col>Unsettled balance:</Col>\r\n              <Col>{balances && balances.unsettled}</Col>\r\n            </RowBox>\r\n            <RowBox align=\"middle\" justify=\"space-around\">\r\n              <Col style={{ width: 150 }}>\r\n                <ActionButton\r\n                  block\r\n                  size=\"large\"\r\n                  onClick={() => setBaseOrQuote(baseOrQuote)}\r\n                >\r\n                  Deposit\r\n                </ActionButton>\r\n              </Col>\r\n              <Col style={{ width: 150 }}>\r\n                <ActionButton block size=\"large\" onClick={onSettleFunds}>\r\n                  Settle\r\n                </ActionButton>\r\n              </Col>\r\n            </RowBox>\r\n            <Tip>\r\n              All deposits go to your{' '}\r\n              <Link external to={providerUrl}>\r\n                {providerName}\r\n              </Link>{' '}\r\n              wallet\r\n            </Tip>\r\n          </React.Fragment>\r\n        ),\r\n      )}\r\n      <DepositDialog\r\n        baseOrQuote={baseOrQuote}\r\n        onClose={() => setBaseOrQuote('')}\r\n      />\r\n    </FloatingElement>\r\n  );\r\n}\r\n","import { Button, Input, Radio, Switch, Slider } from 'antd';\r\nimport React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport {\r\n  useSelectedBaseCurrencyBalances,\r\n  useSelectedQuoteCurrencyBalances,\r\n  useMarket,\r\n  useMarkPrice,\r\n  useSelectedOpenOrdersAccount,\r\n  useSelectedBaseCurrencyAccount,\r\n  useSelectedQuoteCurrencyAccount,\r\n} from '../utils/markets';\r\nimport { useWallet } from '../utils/wallet';\r\nimport { notify } from '../utils/notifications';\r\nimport {\r\n  getDecimalCount,\r\n  roundToDecimal,\r\n  floorToDecimal,\r\n} from '../utils/utils';\r\nimport { useSendConnection } from '../utils/connection';\r\nimport FloatingElement from './layout/FloatingElement';\r\nimport { placeOrder } from '../utils/send';\r\nimport { SwitchChangeEventHandler } from 'antd/es/switch';\r\nimport { refreshCache } from '../utils/fetch-loop';\r\nimport tuple from 'immutable-tuple';\r\n\r\nconst SellButton = styled(Button)`\r\n  margin: 20px 0px 0px 0px;\r\n  background: #f23b69;\r\n  border-color: #f23b69;\r\n`;\r\n\r\nconst BuyButton = styled(Button)`\r\n  margin: 20px 0px 0px 0px;\r\n  background: #02bf76;\r\n  border-color: #02bf76;\r\n`;\r\n\r\nconst sliderMarks = {\r\n  0: '0%',\r\n  25: '25%',\r\n  50: '50%',\r\n  75: '75%',\r\n  100: '100%',\r\n};\r\n\r\nexport default function TradeForm({\r\n  style,\r\n  setChangeOrderRef,\r\n}: {\r\n  style?: any;\r\n  setChangeOrderRef?: (\r\n    ref: ({ size, price }: { size?: number; price?: number }) => void,\r\n  ) => void;\r\n}) {\r\n  const [side, setSide] = useState<'buy' | 'sell'>('buy');\r\n  const { baseCurrency, quoteCurrency, market } = useMarket();\r\n  const baseCurrencyBalances = useSelectedBaseCurrencyBalances();\r\n  const quoteCurrencyBalances = useSelectedQuoteCurrencyBalances();\r\n  const baseCurrencyAccount = useSelectedBaseCurrencyAccount();\r\n  const quoteCurrencyAccount = useSelectedQuoteCurrencyAccount();\r\n  const openOrdersAccount = useSelectedOpenOrdersAccount(true);\r\n  const { wallet, connected } = useWallet();\r\n  const sendConnection = useSendConnection();\r\n  const markPrice = useMarkPrice();\r\n\r\n  const [postOnly, setPostOnly] = useState(false);\r\n  const [ioc, setIoc] = useState(false);\r\n  const [baseSize, setBaseSize] = useState<number | undefined>(undefined);\r\n  const [quoteSize, setQuoteSize] = useState<number | undefined>(undefined);\r\n  const [price, setPrice] = useState<number | undefined>(undefined);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [sizeFraction, setSizeFraction] = useState(0);\r\n\r\n  const availableQuote =\r\n    openOrdersAccount && market\r\n      ? market.quoteSplSizeToNumber(openOrdersAccount.quoteTokenFree)\r\n      : 0;\r\n\r\n  let quoteBalance = (quoteCurrencyBalances || 0) + (availableQuote || 0);\r\n  let baseBalance = baseCurrencyBalances || 0;\r\n  let sizeDecimalCount =\r\n    market?.minOrderSize && getDecimalCount(market.minOrderSize);\r\n  let priceDecimalCount = market?.tickSize && getDecimalCount(market.tickSize);\r\n\r\n  useEffect(() => {\r\n    setChangeOrderRef && setChangeOrderRef(doChangeOrder);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [setChangeOrderRef]);\r\n\r\n  useEffect(() => {\r\n    baseSize && price && onSliderChange(sizeFraction);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [side]);\r\n\r\n  useEffect(() => {\r\n    updateSizeFraction();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [price, baseSize]);\r\n\r\n  const onSetBaseSize = (baseSize: number | undefined) => {\r\n    setBaseSize(baseSize);\r\n    if (!baseSize) {\r\n      setQuoteSize(undefined);\r\n      return;\r\n    }\r\n    let usePrice = price || markPrice;\r\n    if (!usePrice) {\r\n      setQuoteSize(undefined);\r\n      return;\r\n    }\r\n    const rawQuoteSize = baseSize * usePrice;\r\n    const quoteSize =\r\n      baseSize && roundToDecimal(rawQuoteSize, sizeDecimalCount);\r\n    setQuoteSize(quoteSize);\r\n  };\r\n\r\n  const onSetQuoteSize = (quoteSize: number | undefined) => {\r\n    setQuoteSize(quoteSize);\r\n    if (!quoteSize) {\r\n      setBaseSize(undefined);\r\n      return;\r\n    }\r\n    let usePrice = price || markPrice;\r\n    if (!usePrice) {\r\n      setBaseSize(undefined);\r\n      return;\r\n    }\r\n    const rawBaseSize = quoteSize / usePrice;\r\n    const baseSize = quoteSize && roundToDecimal(rawBaseSize, sizeDecimalCount);\r\n    setBaseSize(baseSize);\r\n  };\r\n\r\n  const doChangeOrder = ({\r\n    size,\r\n    price,\r\n  }: {\r\n    size?: number;\r\n    price?: number;\r\n  }) => {\r\n    const formattedSize = size && roundToDecimal(size, sizeDecimalCount);\r\n    const formattedPrice = price && roundToDecimal(price, priceDecimalCount);\r\n    formattedSize && onSetBaseSize(formattedSize);\r\n    formattedPrice && setPrice(formattedPrice);\r\n  };\r\n\r\n  const updateSizeFraction = () => {\r\n    const rawMaxSize =\r\n      side === 'buy' ? quoteBalance / (price || markPrice || 1) : baseBalance;\r\n    const maxSize = floorToDecimal(rawMaxSize, sizeDecimalCount);\r\n    const sizeFraction = Math.min(((baseSize || 0) / maxSize) * 100, 100);\r\n    setSizeFraction(sizeFraction);\r\n  };\r\n\r\n  const onSliderChange = (value) => {\r\n    if (!price && markPrice) {\r\n      let formattedMarkPrice: number | string = priceDecimalCount\r\n        ? markPrice.toFixed(priceDecimalCount)\r\n        : markPrice;\r\n      setPrice(\r\n        typeof formattedMarkPrice === 'number'\r\n          ? formattedMarkPrice\r\n          : parseFloat(formattedMarkPrice),\r\n      );\r\n    }\r\n\r\n    let newSize;\r\n    if (side === 'buy') {\r\n      if (price || markPrice) {\r\n        newSize = ((quoteBalance / (price || markPrice || 1)) * value) / 100;\r\n      }\r\n    } else {\r\n      newSize = (baseBalance * value) / 100;\r\n    }\r\n\r\n    // round down to minOrderSize increment\r\n    let formatted = floorToDecimal(newSize, sizeDecimalCount);\r\n\r\n    onSetBaseSize(formatted);\r\n  };\r\n\r\n  const postOnChange: SwitchChangeEventHandler = (checked) => {\r\n    if (checked) {\r\n      setIoc(false);\r\n    }\r\n    setPostOnly(checked);\r\n  };\r\n  const iocOnChange: SwitchChangeEventHandler = (checked) => {\r\n    if (checked) {\r\n      setPostOnly(false);\r\n    }\r\n    setIoc(checked);\r\n  };\r\n\r\n  async function onSubmit() {\r\n    if (!price) {\r\n      console.warn('Missing price');\r\n      notify({\r\n        message: 'Missing price',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    } else if (!baseSize) {\r\n      console.warn('Missing size');\r\n      notify({\r\n        message: 'Missing size',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSubmitting(true);\r\n    try {\r\n      await placeOrder({\r\n        side,\r\n        price,\r\n        size: baseSize,\r\n        orderType: ioc ? 'ioc' : postOnly ? 'postOnly' : 'limit',\r\n        market,\r\n        connection: sendConnection,\r\n        wallet,\r\n        baseCurrencyAccount: baseCurrencyAccount?.pubkey,\r\n        quoteCurrencyAccount: quoteCurrencyAccount?.pubkey,\r\n      });\r\n      refreshCache(tuple('getTokenAccounts', wallet, connected));\r\n      setPrice(undefined);\r\n      onSetBaseSize(undefined);\r\n    } catch (e) {\r\n      console.warn(e);\r\n      notify({\r\n        message: 'Error placing order',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <FloatingElement\r\n      style={{ display: 'flex', flexDirection: 'column', ...style }}\r\n    >\r\n      <div style={{ flex: 1 }}>\r\n        <Radio.Group\r\n          onChange={(e) => setSide(e.target.value)}\r\n          value={side}\r\n          buttonStyle=\"solid\"\r\n          style={{\r\n            marginBottom: 8,\r\n            width: '100%',\r\n          }}\r\n        >\r\n          <Radio.Button\r\n            value=\"buy\"\r\n            style={{\r\n              width: '50%',\r\n              textAlign: 'center',\r\n              background: side === 'buy' ? '#02bf76' : '',\r\n              borderColor: side === 'buy' ? '#02bf76' : '',\r\n            }}\r\n          >\r\n            BUY\r\n          </Radio.Button>\r\n          <Radio.Button\r\n            value=\"sell\"\r\n            style={{\r\n              width: '50%',\r\n              textAlign: 'center',\r\n              background: side === 'sell' ? '#F23B69' : '',\r\n              borderColor: side === 'sell' ? '#F23B69' : '',\r\n            }}\r\n          >\r\n            SELL\r\n          </Radio.Button>\r\n        </Radio.Group>\r\n        <Input\r\n          style={{ textAlign: 'right', paddingBottom: 8 }}\r\n          addonBefore={<div style={{ width: '30px' }}>Price</div>}\r\n          suffix={\r\n            <span style={{ fontSize: 10, opacity: 0.5 }}>{quoteCurrency}</span>\r\n          }\r\n          value={price}\r\n          type=\"number\"\r\n          step={market?.tickSize || 1}\r\n          onChange={(e) => setPrice(parseFloat(e.target.value))}\r\n        />\r\n        <Input.Group compact style={{ paddingBottom: 8 }}>\r\n          <Input\r\n            style={{ width: 'calc(50% + 30px)', textAlign: 'right' }}\r\n            addonBefore={<div style={{ width: '30px' }}>Size</div>}\r\n            suffix={\r\n              <span style={{ fontSize: 10, opacity: 0.5 }}>{baseCurrency}</span>\r\n            }\r\n            value={baseSize}\r\n            type=\"number\"\r\n            step={market?.minOrderSize || 1}\r\n            onChange={(e) => onSetBaseSize(parseFloat(e.target.value))}\r\n          />\r\n          <Input\r\n            style={{ width: 'calc(50% - 30px)', textAlign: 'right' }}\r\n            suffix={\r\n              <span style={{ fontSize: 10, opacity: 0.5 }}>\r\n                {quoteCurrency}\r\n              </span>\r\n            }\r\n            value={quoteSize}\r\n            type=\"number\"\r\n            step={market?.minOrderSize || 1}\r\n            onChange={(e) => onSetQuoteSize(parseFloat(e.target.value))}\r\n          />\r\n        </Input.Group>\r\n        <Slider\r\n          value={sizeFraction}\r\n          tipFormatter={(value) => `${value}%`}\r\n          marks={sliderMarks}\r\n          onChange={onSliderChange}\r\n        />\r\n        <div style={{ paddingTop: 18 }}>\r\n          {'POST '}\r\n          <Switch\r\n            checked={postOnly}\r\n            onChange={postOnChange}\r\n            style={{ marginRight: 40 }}\r\n          />\r\n          {'IOC '}\r\n          <Switch checked={ioc} onChange={iocOnChange} />\r\n        </div>\r\n      </div>\r\n      {side === 'buy' ? (\r\n        <BuyButton\r\n          disabled={!price || !baseSize}\r\n          onClick={onSubmit}\r\n          block\r\n          type=\"primary\"\r\n          size=\"large\"\r\n          loading={submitting}\r\n        >\r\n          Buy {baseCurrency}\r\n        </BuyButton>\r\n      ) : (\r\n        <SellButton\r\n          disabled={!price || !baseSize}\r\n          onClick={onSubmit}\r\n          block\r\n          type=\"primary\"\r\n          size=\"large\"\r\n          loading={submitting}\r\n        >\r\n          Sell {baseCurrency}\r\n        </SellButton>\r\n      )}\r\n    </FloatingElement>\r\n  );\r\n}\r\n","import { Col, Row } from 'antd';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useMarket, useBonfidaTrades } from '../utils/markets';\r\nimport { getDecimalCount } from '../utils/utils';\r\nimport FloatingElement from './layout/FloatingElement';\r\nimport { BonfidaTrade } from '../utils/types';\r\n\r\nconst Title = styled.div`\r\n  color: rgba(255, 255, 255, 1);\r\n`;\r\nconst SizeTitle = styled(Row)`\r\n  padding: 20px 0 14px;\r\n  color: #434a59;\r\n`;\r\n\r\nexport default function PublicTrades({ smallScreen }) {\r\n  const { baseCurrency, quoteCurrency, market } = useMarket();\r\n  const [trades, loaded] = useBonfidaTrades();\r\n\r\n  return (\r\n    <FloatingElement\r\n      style={\r\n        smallScreen\r\n          ? { flex: 1 }\r\n          : {\r\n              marginTop: '10px',\r\n              minHeight: '270px',\r\n              maxHeight: 'calc(100vh - 700px)',\r\n            }\r\n      }\r\n    >\r\n      <Title>Recent Market trades</Title>\r\n      <SizeTitle>\r\n        <Col span={8}>Price ({quoteCurrency}) </Col>\r\n        <Col span={8} style={{ textAlign: 'right' }}>\r\n          Size ({baseCurrency})\r\n        </Col>\r\n        <Col span={8} style={{ textAlign: 'right' }}>\r\n          Time\r\n        </Col>\r\n      </SizeTitle>\r\n      {!!trades && loaded && (\r\n        <div\r\n          style={{\r\n            marginRight: '-20px',\r\n            paddingRight: '5px',\r\n            overflowY: 'scroll',\r\n            maxHeight: smallScreen\r\n              ? 'calc(100% - 75px)'\r\n              : 'calc(100vh - 800px)',\r\n          }}\r\n        >\r\n          {trades.map((trade: BonfidaTrade, i: number) => (\r\n            <Row key={i} style={{ marginBottom: 4 }}>\r\n              <Col\r\n                span={8}\r\n                style={{\r\n                  color: trade.side === 'buy' ? '#41C77A' : '#F23B69',\r\n                }}\r\n              >\r\n                {market?.tickSize && !isNaN(trade.price)\r\n                  ? Number(trade.price).toFixed(\r\n                      getDecimalCount(market.tickSize),\r\n                    )\r\n                  : trade.price}\r\n              </Col>\r\n              <Col span={8} style={{ textAlign: 'right' }}>\r\n                {market?.minOrderSize && !isNaN(trade.size)\r\n                  ? Number(trade.size).toFixed(\r\n                      getDecimalCount(market.minOrderSize),\r\n                    )\r\n                  : trade.size}\r\n              </Col>\r\n              <Col span={8} style={{ textAlign: 'right', color: '#434a59' }}>\r\n                {trade.time && new Date(trade.time).toLocaleTimeString()}\r\n              </Col>\r\n            </Row>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </FloatingElement>\r\n  );\r\n}\r\n","import { Button, Divider, Spin, Typography } from 'antd';\r\nimport React from 'react';\r\nimport {\r\n  useGetOpenOrdersForDeprecatedMarkets,\r\n  useBalancesForDeprecatedMarkets,\r\n  useUnmigratedOpenOrdersAccounts,\r\n} from '../utils/markets';\r\nimport FloatingElement from './layout/FloatingElement';\r\nimport CheckOutlined from '@ant-design/icons/lib/icons/CheckOutlined';\r\nimport BalancesTable from './UserInfoTable/BalancesTable';\r\nimport Link from './Link';\r\nimport OpenOrderTable from './UserInfoTable/OpenOrderTable';\r\nimport SyncOutlined from '@ant-design/icons/lib/icons/SyncOutlined';\r\n\r\nconst { Title } = Typography;\r\n\r\nexport default function DeprecatedMarketsInstructions({ switchToLiveMarkets }) {\r\n  const balances = useBalancesForDeprecatedMarkets();\r\n  const {\r\n    openOrders,\r\n    loaded,\r\n    refreshOpenOrders,\r\n  } = useGetOpenOrdersForDeprecatedMarkets();\r\n\r\n  const { refresh } = useUnmigratedOpenOrdersAccounts();\r\n  const needToCancelOrders = !openOrders || openOrders.length > 0;\r\n  const filteredBalances =\r\n    balances &&\r\n    balances.filter(({ orders, unsettled }) => orders > 0 || unsettled > 0);\r\n  const needToSettleFunds = filteredBalances && filteredBalances.length > 0;\r\n  return (\r\n    <FloatingElement>\r\n      <Title level={4} style={{ color: 'rgba(255, 255, 255, 1)' }}>\r\n        Migrate to new USDC markets\r\n      </Title>\r\n      <Typography>\r\n        <Link\r\n          external\r\n          to={\r\n            'https://explorer.solana.com/address/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'\r\n          }\r\n        >\r\n          Native USDC\r\n        </Link>{' '}\r\n        has arrived on Solana! See{' '}\r\n        <Link\r\n          external\r\n          to={\r\n            'https://www.circle.com/blog/circle-partners-with-alameda-research-ftx-project-serum-to-introduce-support-for-usdc-on-solana'\r\n          }\r\n        >\r\n          Circle's announcement\r\n        </Link>{' '}\r\n        for more information.\r\n      </Typography>\r\n      <br />\r\n      <Typography>\r\n        Serum is transitioning from the previous{' '}\r\n        <Link\r\n          external\r\n          to={\r\n            'https://explorer.solana.com/address/BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW'\r\n          }\r\n        >\r\n          Wrapped USDC\r\n        </Link>\r\n        , now called WUSDC, to Native USDC. You can convert from WUSDC to USDC\r\n        directly on{' '}\r\n        <Link external to={'https://sollet.io'}>\r\n          sollet.io\r\n        </Link>\r\n        , or can deposit WUSDC and be credited USDC on exchanges like{' '}\r\n        <Link external to={'https://ftx.com'}>\r\n          FTX\r\n        </Link>\r\n        .\r\n      </Typography>\r\n      <br />\r\n      <Typography>\r\n        Markets with WUSDC as the quote curency are now deprecated. To migrate\r\n        over to the new USDC markets, please cancel your orders and settle your\r\n        funds on old markets.\r\n      </Typography>\r\n      <div style={{ marginTop: 20, display: 'flex', justifyContent: 'center' }}>\r\n        <Button onClick={() => refresh(true)}>\r\n          <SyncOutlined /> Refresh data\r\n        </Button>\r\n      </div>\r\n      {!balances ? (\r\n        <Spin size=\"large\" />\r\n      ) : (\r\n        <>\r\n          <Divider>\r\n            {!needToCancelOrders && <CheckOutlined />} Cancel your orders\r\n          </Divider>\r\n          {needToCancelOrders ? (\r\n            loaded ? (\r\n              <OpenOrderTable\r\n                openOrders={openOrders}\r\n                onCancelSuccess={() => {\r\n                  setTimeout(() => {\r\n                    refresh();\r\n                    refreshOpenOrders();\r\n                  }, 1000); // Wait so that on-chain account state reflects the update\r\n                }}\r\n              />\r\n            ) : (\r\n              <Spin size=\"large\" />\r\n            )\r\n          ) : null}\r\n          <Divider>\r\n            {!needToSettleFunds && <CheckOutlined />} Settle your funds\r\n          </Divider>\r\n          {needToSettleFunds && (\r\n            <BalancesTable\r\n              balances={filteredBalances}\r\n              hideWalletBalance\r\n              showMarket\r\n              onSettleSuccess={() => {\r\n                setTimeout(refresh, 1000); // Wait so that on-chain account state reflects the update\r\n              }}\r\n            />\r\n          )}\r\n          <Divider>Switch to upgraded markets</Divider>\r\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n            <Button\r\n              onClick={switchToLiveMarkets}\r\n              disabled={needToSettleFunds || needToCancelOrders}\r\n            >\r\n              Switch to new markets\r\n            </Button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </FloatingElement>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Col, Input, Modal, Row, Typography } from 'antd';\r\nimport { notify } from '../utils/notifications';\r\nimport { isValidPublicKey } from '../utils/utils';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { Market, MARKETS, TOKEN_MINTS } from '@project-serum/serum';\r\nimport { useAccountInfo, useConnection } from '../utils/connection';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nconst { Text } = Typography;\r\n\r\nexport default function CustomMarketDialog({\r\n  visible,\r\n  onAddCustomMarket,\r\n  onClose,\r\n}) {\r\n  const connection = useConnection();\r\n\r\n  const [marketId, setMarketId] = useState('');\r\n\r\n  const [marketLabel, setMarketLabel] = useState('');\r\n  const [baseLabel, setBaseLabel] = useState('');\r\n  const [quoteLabel, setQuoteLabel] = useState('');\r\n\r\n  const [market, setMarket] = useState(null);\r\n  const [loadingMarket, setLoadingMarket] = useState(false);\r\n\r\n  const wellFormedMarketId = isValidPublicKey(marketId);\r\n\r\n  const [marketAccountInfo] = useAccountInfo(\r\n    wellFormedMarketId ? new PublicKey(marketId) : null,\r\n  );\r\n  const programId = marketAccountInfo\r\n    ? marketAccountInfo.owner.toBase58()\r\n    : MARKETS.find(({ deprecated }) => !deprecated).programId.toBase58();\r\n\r\n  useEffect(() => {\r\n    if (!wellFormedMarketId || !programId) {\r\n      resetLabels();\r\n      return;\r\n    }\r\n    setLoadingMarket(true);\r\n    Market.load(\r\n      connection,\r\n      new PublicKey(marketId),\r\n      {},\r\n      new PublicKey(programId),\r\n    )\r\n      .then((market) => {\r\n        setMarket(market);\r\n      })\r\n      .catch(() => {\r\n        resetLabels();\r\n        setMarket(null);\r\n      })\r\n      .finally(() => setLoadingMarket(false));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [connection, marketId, programId]);\r\n\r\n  const resetLabels = () => {\r\n    setMarketLabel(null);\r\n    setBaseLabel(null);\r\n    setQuoteLabel(null);\r\n  };\r\n\r\n  const knownMarket = MARKETS.find(\r\n    (m) =>\r\n      m.address.toBase58() === marketId && m.programId.toBase58() === programId,\r\n  );\r\n  const knownProgram = MARKETS.find(\r\n    (m) => m.programId.toBase58() === programId,\r\n  );\r\n  const knownBaseCurrency =\r\n    market?.baseMintAddress &&\r\n    TOKEN_MINTS.find((token) => token.address.equals(market.baseMintAddress))\r\n      ?.name;\r\n\r\n  const knownQuoteCurrency =\r\n    market?.quoteMintAddress &&\r\n    TOKEN_MINTS.find((token) => token.address.equals(market.quoteMintAddress))\r\n      ?.name;\r\n\r\n  const canSubmit =\r\n    !loadingMarket &&\r\n    !!market &&\r\n    market.publicKey.toBase58() === marketId &&\r\n    marketId &&\r\n    programId &&\r\n    marketLabel &&\r\n    (knownBaseCurrency || baseLabel) &&\r\n    (knownQuoteCurrency || quoteLabel) &&\r\n    wellFormedMarketId;\r\n\r\n  const onSubmit = () => {\r\n    if (!canSubmit) {\r\n      notify({\r\n        message: 'Please fill in all fields with valid values',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n\r\n    let params = {\r\n      address: marketId,\r\n      programId,\r\n      name: marketLabel,\r\n    };\r\n    if (!knownBaseCurrency) {\r\n      params.baseLabel = baseLabel;\r\n    }\r\n    if (!knownQuoteCurrency) {\r\n      params.quoteLabel = quoteLabel;\r\n    }\r\n    onAddCustomMarket(params);\r\n    onDoClose();\r\n  };\r\n\r\n  const onDoClose = () => {\r\n    resetLabels();\r\n    setMarket(null);\r\n    setMarketId(null);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title={'Add custom market'}\r\n      visible={visible}\r\n      onOk={onSubmit}\r\n      okText={'Add'}\r\n      onCancel={onDoClose}\r\n      okButtonProps={{ disabled: !canSubmit }}\r\n    >\r\n      <div>\r\n        {wellFormedMarketId ? (\r\n          <>\r\n            {!market && !loadingMarket && (\r\n              <Row style={{ marginBottom: 8 }}>\r\n                <Text type=\"danger\">Not a valid market</Text>\r\n              </Row>\r\n            )}\r\n            {market && knownMarket && (\r\n              <Row style={{ marginBottom: 8 }}>\r\n                <Text type=\"warning\">Market known: {knownMarket.name}</Text>\r\n              </Row>\r\n            )}\r\n            {market && !knownProgram && (\r\n              <Row style={{ marginBottom: 8 }}>\r\n                <Text type=\"danger\">Warning: unknown DEX program</Text>\r\n              </Row>\r\n            )}\r\n            {market && knownProgram && knownProgram.deprecated && (\r\n              <Row style={{ marginBottom: 8 }}>\r\n                <Text type=\"warning\">Warning: deprecated DEX program</Text>\r\n              </Row>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <>\r\n            {marketId && !wellFormedMarketId && (\r\n              <Row style={{ marginBottom: 8 }}>\r\n                <Text type=\"danger\">Invalid market ID</Text>\r\n              </Row>\r\n            )}\r\n          </>\r\n        )}\r\n        <Row style={{ marginBottom: 8 }}>\r\n          <Col span={24}>\r\n            <Input\r\n              placeholder=\"Market Id\"\r\n              value={marketId}\r\n              onChange={(e) => setMarketId(e.target.value)}\r\n              suffix={loadingMarket ? <LoadingOutlined /> : null}\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row style={{ marginBottom: 8, marginTop: 8 }}>\r\n          <Col span={24}>\r\n            <Input\r\n              placeholder=\"Market Label\"\r\n              disabled={!market}\r\n              value={marketLabel}\r\n              onChange={(e) => setMarketLabel(e.target.value)}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row gutter={[8]} style={{ marginBottom: 8 }}>\r\n          <Col span={12}>\r\n            <Input\r\n              placeholder=\"Base label\"\r\n              disabled={!market || knownBaseCurrency}\r\n              value={knownBaseCurrency || baseLabel}\r\n              onChange={(e) => setBaseLabel(e.target.value)}\r\n            />\r\n            {market && !knownBaseCurrency && (\r\n              <div style={{ marginTop: 8 }}>\r\n                <Text type=\"warning\">Warning: unknown token</Text>\r\n              </div>\r\n            )}\r\n          </Col>\r\n          <Col span={12}>\r\n            <Input\r\n              placeholder=\"Quote label\"\r\n              disabled={!market || knownQuoteCurrency}\r\n              value={knownQuoteCurrency || quoteLabel}\r\n              onChange={(e) => setQuoteLabel(e.target.value)}\r\n            />\r\n            {market && !knownQuoteCurrency && (\r\n              <div style={{ marginTop: 8 }}>\r\n                <Text type=\"warning\">Warning: unknown token</Text>\r\n              </div>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Col, Popover, Row, Select, Typography, Button } from 'antd';\r\nimport styled from 'styled-components';\r\nimport Orderbook from '../components/Orderbook';\r\nimport UserInfoTable from '../components/UserInfoTable';\r\nimport StandaloneBalancesDisplay from '../components/StandaloneBalancesDisplay';\r\nimport {\r\n  useMarket,\r\n  useMarketsList,\r\n  useUnmigratedDeprecatedMarkets,\r\n  getMarketInfos,\r\n} from '../utils/markets';\r\nimport TradeForm from '../components/TradeForm';\r\nimport TradesTable from '../components/TradesTable';\r\nimport LinkAddress from '../components/LinkAddress';\r\nimport DeprecatedMarketsInstructions from '../components/DeprecatedMarketsInstructions';\r\nimport {\r\n  InfoCircleOutlined,\r\n  PlusCircleOutlined,\r\n  DeleteOutlined,\r\n} from '@ant-design/icons';\r\nimport CustomMarketDialog from '../components/CustomMarketDialog';\r\nimport { notify } from '../utils/notifications';\r\n\r\nconst { Option, OptGroup } = Select;\r\n\r\nconst Wrapper = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 16px 16px;\r\n  .borderNone .ant-select-selector {\r\n    border: none !important;\r\n  }\r\n`;\r\n\r\nexport default function TradePage() {\r\n  const {\r\n    market,\r\n    marketName,\r\n    customMarkets,\r\n    setCustomMarkets,\r\n    setMarketAddress,\r\n  } = useMarket();\r\n  const markets = useMarketsList();\r\n  const [handleDeprecated, setHandleDeprecated] = useState(false);\r\n  const [addMarketVisible, setAddMarketVisible] = useState(false);\r\n  const deprecatedMarkets = useUnmigratedDeprecatedMarkets();\r\n  const [dimensions, setDimensions] = useState({\r\n    height: window.innerHeight,\r\n    width: window.innerWidth,\r\n  });\r\n\r\n  useEffect(() => {\r\n    document.title = marketName ? `${marketName} — Serum` : 'Serum';\r\n  }, [marketName]);\r\n\r\n  const changeOrderRef = useRef<\r\n    ({ size, price }: { size?: number; price?: number }) => void\r\n  >();\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setDimensions({\r\n        height: window.innerHeight,\r\n        width: window.innerWidth,\r\n      });\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  const width = dimensions?.width;\r\n  const componentProps = {\r\n    onChangeOrderRef: (ref) => (changeOrderRef.current = ref),\r\n    onPrice: useCallback(\r\n      (price) => changeOrderRef.current && changeOrderRef.current({ price }),\r\n      [],\r\n    ),\r\n    onSize: useCallback(\r\n      (size) => changeOrderRef.current && changeOrderRef.current({ size }),\r\n      [],\r\n    ),\r\n  };\r\n  const getComponent = useCallback(() => {\r\n    if (handleDeprecated) {\r\n      return (\r\n        <DeprecatedMarketsPage\r\n          switchToLiveMarkets={() => setHandleDeprecated(false)}\r\n        />\r\n      );\r\n    } else if (width < 1000) {\r\n      return <RenderSmaller {...componentProps} />;\r\n    } else if (width < 1450) {\r\n      return <RenderSmall {...componentProps} />;\r\n    } else {\r\n      return <RenderNormal {...componentProps} />;\r\n    }\r\n  }, [width, componentProps, handleDeprecated]);\r\n\r\n  const onAddCustomMarket = (customMarket) => {\r\n    const marketInfo = getMarketInfos(customMarkets).some(\r\n      (m) => m.address.toBase58() === customMarket.address,\r\n    );\r\n    if (marketInfo) {\r\n      notify({\r\n        message: `A market with the given ID already exists`,\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    const newCustomMarkets = [...customMarkets, customMarket];\r\n    setCustomMarkets(newCustomMarkets);\r\n    setMarketAddress(customMarket.address);\r\n  };\r\n\r\n  const onDeleteCustomMarket = (address) => {\r\n    const newCustomMarkets = customMarkets.filter((m) => m.address !== address);\r\n    setCustomMarkets(newCustomMarkets);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CustomMarketDialog\r\n        visible={addMarketVisible}\r\n        onClose={() => setAddMarketVisible(false)}\r\n        onAddCustomMarket={onAddCustomMarket}\r\n      />\r\n      <Wrapper>\r\n        <Row\r\n          align=\"middle\"\r\n          style={{ paddingLeft: 5, paddingRight: 5 }}\r\n          gutter={16}\r\n        >\r\n          <Col>\r\n            <MarketSelector\r\n              markets={markets}\r\n              setHandleDeprecated={setHandleDeprecated}\r\n              placeholder={'Select market'}\r\n              customMarkets={customMarkets}\r\n              onDeleteCustomMarket={onDeleteCustomMarket}\r\n            />\r\n          </Col>\r\n          {market ? (\r\n            <Col>\r\n              <Popover\r\n                content={<LinkAddress address={market.publicKey.toBase58()} />}\r\n                placement=\"bottomRight\"\r\n                title=\"Market address\"\r\n                trigger=\"click\"\r\n              >\r\n                <InfoCircleOutlined style={{ color: '#2abdd2' }} />\r\n              </Popover>\r\n            </Col>\r\n          ) : null}\r\n          <Col>\r\n            <PlusCircleOutlined\r\n              style={{ color: '#2abdd2' }}\r\n              onClick={() => setAddMarketVisible(true)}\r\n            />\r\n          </Col>\r\n          {deprecatedMarkets && deprecatedMarkets.length > 0 && (\r\n            <React.Fragment>\r\n              <Col>\r\n                <Typography>\r\n                  You have unsettled funds on old markets! Please go through\r\n                  them to claim your funds.\r\n                </Typography>\r\n              </Col>\r\n              <Col>\r\n                <Button onClick={() => setHandleDeprecated(!handleDeprecated)}>\r\n                  {handleDeprecated ? 'View new markets' : 'Handle old markets'}\r\n                </Button>\r\n              </Col>\r\n            </React.Fragment>\r\n          )}\r\n        </Row>\r\n        {getComponent()}\r\n      </Wrapper>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction MarketSelector({\r\n  markets,\r\n  placeholder,\r\n  setHandleDeprecated,\r\n  customMarkets,\r\n  onDeleteCustomMarket,\r\n}) {\r\n  const { market, setMarketAddress } = useMarket();\r\n\r\n  const onSetMarketAddress = (marketAddress) => {\r\n    setHandleDeprecated(false);\r\n    setMarketAddress(marketAddress);\r\n  };\r\n\r\n  const extractBase = (a) => a.split('/')[0];\r\n  const extractQuote = (a) => a.split('/')[1];\r\n\r\n  const selectedMarket = getMarketInfos(customMarkets)\r\n    .find(\r\n      (proposedMarket) =>\r\n        market?.address && proposedMarket.address.equals(market.address),\r\n    )\r\n    ?.address?.toBase58();\r\n\r\n  return (\r\n    <Select\r\n      showSearch\r\n      size={'large'}\r\n      style={{ width: 200 }}\r\n      placeholder={placeholder || 'Select a market'}\r\n      optionFilterProp=\"name\"\r\n      onSelect={onSetMarketAddress}\r\n      listHeight={400}\r\n      value={selectedMarket}\r\n      filterOption={(input, option) =>\r\n        option?.name?.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n      }\r\n    >\r\n      {customMarkets && customMarkets.length > 0 && (\r\n        <OptGroup label=\"Custom\">\r\n          {customMarkets.map(({ address, name }, i) => (\r\n            <Option\r\n              value={address}\r\n              key={address}\r\n              name={name}\r\n              style={{\r\n                padding: '10px',\r\n                // @ts-ignore\r\n                backgroundColor: i % 2 === 0 ? 'rgb(39, 44, 61)' : null,\r\n              }}\r\n            >\r\n              <Row>\r\n                <Col flex=\"auto\">{name}</Col>\r\n                {selectedMarket !== address && (\r\n                  <Col>\r\n                    <DeleteOutlined\r\n                      onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        e.nativeEvent.stopImmediatePropagation();\r\n                        onDeleteCustomMarket && onDeleteCustomMarket(address);\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                )}\r\n              </Row>\r\n            </Option>\r\n          ))}\r\n        </OptGroup>\r\n      )}\r\n      <OptGroup label=\"Markets\">\r\n        {markets\r\n          .sort((a, b) =>\r\n            extractQuote(a.name) === 'USDT' && extractQuote(b.name) !== 'USDT'\r\n              ? -1\r\n              : extractQuote(a.name) !== 'USDT' &&\r\n                extractQuote(b.name) === 'USDT'\r\n              ? 1\r\n              : 0,\r\n          )\r\n          .sort((a, b) =>\r\n            extractBase(a.name) < extractBase(b.name)\r\n              ? -1\r\n              : extractBase(a.name) > extractBase(b.name)\r\n              ? 1\r\n              : 0,\r\n          )\r\n          .map(({ address, name, deprecated }, i) => (\r\n            <Option\r\n              value={address.toBase58()}\r\n              key={address}\r\n              name={name}\r\n              style={{\r\n                padding: '10px',\r\n                // @ts-ignore\r\n                backgroundColor: i % 2 === 0 ? 'rgb(39, 44, 61)' : null,\r\n              }}\r\n            >\r\n              {name} {deprecated ? ' (Deprecated)' : null}\r\n            </Option>\r\n          ))}\r\n      </OptGroup>\r\n    </Select>\r\n  );\r\n}\r\n\r\nconst DeprecatedMarketsPage = ({ switchToLiveMarkets }) => {\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col flex=\"auto\">\r\n          <DeprecatedMarketsInstructions\r\n            switchToLiveMarkets={switchToLiveMarkets}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nconst RenderNormal = ({ onChangeOrderRef, onPrice, onSize }) => {\r\n  return (\r\n    <Row\r\n      style={{\r\n        minHeight: '900px',\r\n        flexWrap: 'nowrap',\r\n      }}\r\n    >\r\n      <Col flex=\"auto\" style={{ height: '100%', display: 'flex' }}>\r\n        <UserInfoTable />\r\n      </Col>\r\n      <Col flex={'360px'} style={{ height: '100%' }}>\r\n        <Orderbook smallScreen={false} onPrice={onPrice} onSize={onSize} />\r\n        <TradesTable smallScreen={false} />\r\n      </Col>\r\n      <Col\r\n        flex=\"400px\"\r\n        style={{ height: '100%', display: 'flex', flexDirection: 'column' }}\r\n      >\r\n        <TradeForm setChangeOrderRef={onChangeOrderRef} />\r\n        <StandaloneBalancesDisplay />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst RenderSmall = ({ onChangeOrderRef, onPrice, onSize }) => {\r\n  return (\r\n    <>\r\n      <Row\r\n        style={{\r\n          height: '900px',\r\n        }}\r\n      >\r\n        <Col flex=\"auto\" style={{ height: '100%', display: 'flex' }}>\r\n          <Orderbook\r\n            smallScreen={true}\r\n            depth={13}\r\n            onPrice={onPrice}\r\n            onSize={onSize}\r\n          />\r\n        </Col>\r\n        <Col flex=\"auto\" style={{ height: '100%', display: 'flex' }}>\r\n          <TradesTable smallScreen={true} />\r\n        </Col>\r\n        <Col\r\n          flex=\"400px\"\r\n          style={{ height: '100%', display: 'flex', flexDirection: 'column' }}\r\n        >\r\n          <TradeForm setChangeOrderRef={onChangeOrderRef} />\r\n          <StandaloneBalancesDisplay />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col flex=\"auto\">\r\n          <UserInfoTable />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nconst RenderSmaller = ({ onChangeOrderRef, onPrice, onSize }) => {\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col xs={24} sm={12} style={{ height: '100%', display: 'flex' }}>\r\n          <TradeForm style={{ flex: 1 }} setChangeOrderRef={onChangeOrderRef} />\r\n        </Col>\r\n        <Col xs={24} sm={12}>\r\n          <StandaloneBalancesDisplay />\r\n        </Col>\r\n      </Row>\r\n      <Row\r\n        style={{\r\n          height: '500px',\r\n        }}\r\n      >\r\n        <Col xs={24} sm={12} style={{ height: '100%', display: 'flex' }}>\r\n          <Orderbook smallScreen={true} onPrice={onPrice} onSize={onSize} />\r\n        </Col>\r\n        <Col xs={24} sm={12} style={{ height: '100%', display: 'flex' }}>\r\n          <TradesTable smallScreen={true} />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col flex=\"auto\">\r\n          <UserInfoTable />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport FloatingElement from '../components/layout/FloatingElement';\r\nimport {\r\n  getMarketInfos,\r\n  useAllMarkets,\r\n  useAllOpenOrders,\r\n  useMarket,\r\n} from '../utils/markets';\r\nimport OpenOrderTable from '../components/UserInfoTable/OpenOrderTable';\r\nimport { Button } from 'antd';\r\nimport { OrderWithMarketAndMarketName } from '../utils/types';\r\n\r\nexport default function OpenOrdersPage() {\r\n  const { openOrders, loaded, refreshOpenOrders } = useAllOpenOrders();\r\n  let { customMarkets } = useMarket();\r\n  let marketInfos = getMarketInfos(customMarkets);\r\n  let marketAddressesToNames = Object.fromEntries(\r\n    marketInfos.map((info) => [info.address.toBase58(), info.name]),\r\n  );\r\n  let [allMarkets] = useAllMarkets(customMarkets);\r\n  const marketsByAddress = Object.fromEntries(\r\n    (allMarkets || []).map((marketInfo) => [\r\n      marketInfo.market.address.toBase58(),\r\n      marketInfo.market,\r\n    ]),\r\n  );\r\n\r\n  const dataSource: OrderWithMarketAndMarketName[] = (openOrders || [])\r\n    .map((orderInfos) =>\r\n      orderInfos.orders.map((order) => {\r\n        return {\r\n          marketName: marketAddressesToNames[orderInfos.marketAddress],\r\n          market: marketsByAddress[orderInfos.marketAddress],\r\n          ...order,\r\n        };\r\n      }),\r\n    )\r\n    .flat();\r\n\r\n  return (\r\n    <FloatingElement style={{ flex: 1, paddingTop: 10 }}>\r\n      <Button onClick={refreshOpenOrders} loading={!loaded}>\r\n        Refresh\r\n      </Button>\r\n      <OpenOrderTable\r\n        openOrders={dataSource}\r\n        pageSize={25}\r\n        loading={!loaded}\r\n        onCancelSuccess={refreshOpenOrders}\r\n        marketFilter\r\n      />\r\n    </FloatingElement>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport DataTable from '../layout/DataTable';\r\nimport { Button, Row } from 'antd';\r\nimport { settleAllFunds } from '../../utils/send';\r\nimport { notify } from '../../utils/notifications';\r\nimport { useConnection } from '../../utils/connection';\r\nimport { useWallet } from '../../utils/wallet';\r\nimport {\r\n  useAllMarkets,\r\n  useMarket,\r\n  useSelectedTokenAccounts,\r\n  useTokenAccounts,\r\n} from '../../utils/markets';\r\nimport StandaloneTokenAccountsSelect from '../StandaloneTokenAccountSelect';\r\nimport { abbreviateAddress } from '../../utils/utils';\r\nimport { PublicKey } from '@solana/web3.js';\r\n\r\nexport default function WalletBalancesTable({\r\n  walletBalances,\r\n}: {\r\n  walletBalances: {\r\n    coin: string;\r\n    mint: string;\r\n    walletBalance: number;\r\n    openOrdersFree: number;\r\n    openOrdersTotal: number;\r\n  }[];\r\n}) {\r\n  const connection = useConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [selectedTokenAccounts] = useSelectedTokenAccounts();\r\n  const [tokenAccounts, tokenAccountsConnected] = useTokenAccounts();\r\n  const { customMarkets } = useMarket();\r\n  const [allMarkets, allMarketsConnected] = useAllMarkets(customMarkets);\r\n  const [settlingFunds, setSettlingFunds] = useState(false);\r\n\r\n  async function onSettleFunds() {\r\n    setSettlingFunds(true);\r\n    try {\r\n      if (!tokenAccounts || !tokenAccountsConnected) {\r\n        notify({\r\n          message: 'Error settling funds',\r\n          description: 'TokenAccounts not connected',\r\n          type: 'error',\r\n        });\r\n        return;\r\n      }\r\n      if (!allMarkets || !allMarketsConnected) {\r\n        notify({\r\n          message: 'Error settling funds',\r\n          description: 'Markets not connected',\r\n          type: 'error',\r\n        });\r\n        return;\r\n      }\r\n      await settleAllFunds({\r\n        connection,\r\n        tokenAccounts,\r\n        selectedTokenAccounts,\r\n        wallet,\r\n        markets: allMarkets.map((marketInfo) => marketInfo.market),\r\n      });\r\n    } catch (e) {\r\n      notify({\r\n        message: 'Error settling funds',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setSettlingFunds(false);\r\n    }\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Coin',\r\n      key: 'coin',\r\n      width: '20%',\r\n      render: (walletBalance) => (\r\n        <Row align=\"middle\">\r\n          <a\r\n            href={`https://explorer.solana.com/address/${walletBalance.mint}`}\r\n            target={'_blank'}\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {walletBalance.coin ||\r\n              abbreviateAddress(new PublicKey(walletBalance.mint))}\r\n          </a>\r\n        </Row>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Wallet Balance',\r\n      dataIndex: 'walletBalance',\r\n      key: 'walletBalance',\r\n      width: '20%',\r\n    },\r\n    {\r\n      title: 'Open orders total balances',\r\n      dataIndex: 'openOrdersTotal',\r\n      key: 'openOrdersTotal',\r\n      width: '20%',\r\n    },\r\n    {\r\n      title: 'Unsettled balances',\r\n      dataIndex: 'openOrdersFree',\r\n      key: 'openOrdersFree',\r\n      width: '20%',\r\n    },\r\n    {\r\n      title: 'Selected token account',\r\n      key: 'selectTokenAccount',\r\n      width: '20%',\r\n      render: (walletBalance) => (\r\n        <Row align=\"middle\" style={{ width: '430px' }}>\r\n          <StandaloneTokenAccountsSelect\r\n            accounts={tokenAccounts?.filter(\r\n              (t) => t.effectiveMint.toBase58() === walletBalance.mint,\r\n            )}\r\n            mint={walletBalance.mint}\r\n          />\r\n        </Row>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <React.Fragment>\r\n      <DataTable\r\n        emptyLabel=\"No balances\"\r\n        dataSource={walletBalances}\r\n        columns={columns}\r\n        pagination={false}\r\n      />\r\n      {connected && (\r\n        <Button onClick={onSettleFunds} loading={settlingFunds}>\r\n          Settle all funds\r\n        </Button>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Tabs } from 'antd';\r\nimport {\r\n  useAllOpenOrdersBalances,\r\n  useWalletBalancesForAllMarkets,\r\n} from '../utils/markets';\r\nimport FloatingElement from '../components/layout/FloatingElement';\r\nimport WalletBalancesTable from '../components/UserInfoTable/WalletBalancesTable';\r\nimport { useMintToTickers } from '../utils/tokens';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport default function BalancesPage() {\r\n  const walletBalances = useWalletBalancesForAllMarkets();\r\n  const mintToTickers = useMintToTickers();\r\n  const openOrdersBalances = useAllOpenOrdersBalances();\r\n\r\n  const data = (walletBalances || []).map((balance) => {\r\n    const balances = {\r\n      coin: mintToTickers[balance.mint],\r\n      mint: balance.mint,\r\n      walletBalance: balance.balance,\r\n      openOrdersFree: 0,\r\n      openOrdersTotal: 0,\r\n    };\r\n    for (let openOrdersAccount of openOrdersBalances[balance.mint] || []) {\r\n      balances['openOrdersFree'] += openOrdersAccount.free;\r\n      balances['openOrdersTotal'] += openOrdersAccount.total;\r\n    }\r\n    return balances;\r\n  });\r\n\r\n  return (\r\n    <FloatingElement style={{ flex: 1, paddingTop: 10 }}>\r\n      <Tabs defaultActiveKey=\"walletBalances\">\r\n        <TabPane tab=\"Wallet Balances\" key=\"walletBalances\">\r\n          <WalletBalancesTable walletBalances={data} />\r\n        </TabPane>\r\n      </Tabs>\r\n    </FloatingElement>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Button, Popover } from 'antd';\r\nimport { InfoCircleOutlined, UserOutlined } from '@ant-design/icons';\r\nimport { useWallet } from '../utils/wallet';\r\nimport LinkAddress from './LinkAddress';\r\n\r\nexport default function WalletConnect() {\r\n  const { connected, wallet } = useWallet();\r\n  const publicKey = wallet?.publicKey?.toBase58();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        type=\"text\"\r\n        size=\"large\"\r\n        onClick={connected ? wallet.disconnect : wallet.connect}\r\n        style={{ color: '#2abdd2' }}\r\n      >\r\n        <UserOutlined />\r\n        {!connected ? 'Connect wallet' : 'Disconnect'}\r\n      </Button>\r\n      {connected && (\r\n        <Popover\r\n          content={<LinkAddress address={publicKey} />}\r\n          placement=\"bottomRight\"\r\n          title=\"Wallet public key\"\r\n          trigger=\"click\"\r\n        >\r\n          <InfoCircleOutlined style={{ color: '#2abdd2' }} />\r\n        </Popover>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Col, Input, Row, Select, Typography } from 'antd';\r\nimport styled from 'styled-components';\r\nimport { Market, Orderbook } from '@project-serum/serum';\r\nimport {\r\n  getExpectedFillPrice,\r\n  getMarketDetails,\r\n  getMarketInfos,\r\n  getMarketOrderPrice,\r\n  getSelectedTokenAccountForMint,\r\n  useBalances,\r\n  useMarket,\r\n  useTokenAccounts,\r\n} from '../utils/markets';\r\nimport { notify } from '../utils/notifications';\r\nimport { useWallet } from '../utils/wallet';\r\nimport { useConnection, useSendConnection } from '../utils/connection';\r\nimport { placeOrder } from '../utils/send';\r\nimport { floorToDecimal, getDecimalCount } from '../utils/utils';\r\nimport FloatingElement from './layout/FloatingElement';\r\nimport WalletConnect from './WalletConnect';\r\nimport { SwapOutlined } from '@ant-design/icons';\r\nimport { CustomMarketInfo } from '../utils/types';\r\nimport Wallet from '@project-serum/sol-wallet-adapter';\r\n\r\nconst { Option } = Select;\r\nconst { Title } = Typography;\r\n\r\nconst ActionButton = styled(Button)`\r\n  color: #2abdd2;\r\n  background-color: #212734;\r\n  border-width: 0px;\r\n`;\r\n\r\nconst ConvertButton = styled(Button)`\r\n  background: #02bf76;\r\n  border-color: #02bf76;\r\n`;\r\n\r\nexport default function ConvertForm() {\r\n  const { connected, wallet } = useWallet();\r\n  const { customMarkets } = useMarket();\r\n  const marketInfos = getMarketInfos(customMarkets);\r\n  const { market, setMarketAddress } = useMarket();\r\n\r\n  const [fromToken, setFromToken] = useState<string | undefined>(undefined);\r\n  const [toToken, setToToken] = useState<string | undefined>(undefined);\r\n  const [size, setSize] = useState<number | undefined>(undefined);\r\n\r\n  const marketInfosbyName = Object.fromEntries(\r\n    marketInfos.map((market) => [market.name, market]),\r\n  );\r\n\r\n  const tokenConvertMap: Map<string, Set<string>> = new Map();\r\n  Object.keys(marketInfosbyName).forEach((market) => {\r\n    let [base, quote] = market.split('/');\r\n    !tokenConvertMap.has(base)\r\n      ? tokenConvertMap.set(base, new Set([quote]))\r\n      : tokenConvertMap.set(\r\n          base,\r\n          new Set([...(tokenConvertMap.get(base) || []), quote]),\r\n        );\r\n    !tokenConvertMap.has(quote)\r\n      ? tokenConvertMap.set(quote, new Set([base]))\r\n      : tokenConvertMap.set(\r\n          quote,\r\n          new Set([...(tokenConvertMap.get(quote) || []), base]),\r\n        );\r\n  });\r\n\r\n  const setMarket = (toToken) => {\r\n    const marketInfo = marketInfos\r\n      .filter((marketInfo) => !marketInfo.deprecated)\r\n      .find(\r\n        (marketInfo) =>\r\n          marketInfo.name === `${fromToken}/${toToken}` ||\r\n          marketInfo.name === `${toToken}/${fromToken}`,\r\n      );\r\n    if (!marketInfo) {\r\n      console.warn(\r\n        `Could not find market info for market names ${fromToken}/${toToken} or ${toToken}/${fromToken}`,\r\n      );\r\n      notify({\r\n        message: 'Invalid market',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    setMarketAddress(marketInfo.address.toBase58());\r\n    setToToken(toToken);\r\n  };\r\n\r\n  return (\r\n    <FloatingElement style={{ maxWidth: 500 }}>\r\n      <Title level={3}>Convert</Title>\r\n      {!connected && (\r\n        <Row justify=\"center\">\r\n          <Col>\r\n            <WalletConnect />\r\n          </Col>\r\n        </Row>\r\n      )}\r\n      {tokenConvertMap && connected && (\r\n        <>\r\n          <Row style={{ marginBottom: 8 }}>\r\n            <Col>\r\n              <Select\r\n                style={{ minWidth: 300 }}\r\n                placeholder=\"Select a token\"\r\n                value={fromToken}\r\n                onChange={(token) => {\r\n                  setFromToken(token);\r\n                  setToToken(undefined);\r\n                }}\r\n              >\r\n                {Array.from(tokenConvertMap.keys()).map((token) => (\r\n                  <Option value={token} key={token}>\r\n                    {token}\r\n                  </Option>\r\n                ))}\r\n              </Select>\r\n            </Col>\r\n          </Row>\r\n          {fromToken && (\r\n            <Row style={{ marginBottom: 8 }}>\r\n              <Col>\r\n                <Select\r\n                  style={{ minWidth: 300 }}\r\n                  value={toToken}\r\n                  onChange={setMarket}\r\n                >\r\n                  {[...(tokenConvertMap.get(fromToken) || [])].map((token) => (\r\n                    <Option value={token} key={token}>\r\n                      {token}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n          {fromToken && toToken && (\r\n            <ConvertFormSubmit\r\n              size={size}\r\n              setSize={setSize}\r\n              fromToken={fromToken}\r\n              toToken={toToken}\r\n              wallet={wallet}\r\n              market={market}\r\n              customMarkets={customMarkets}\r\n            />\r\n          )}\r\n        </>\r\n      )}\r\n    </FloatingElement>\r\n  );\r\n}\r\n\r\nfunction ConvertFormSubmit({\r\n  size,\r\n  setSize,\r\n  fromToken,\r\n  toToken,\r\n  wallet,\r\n  market,\r\n  customMarkets,\r\n}: {\r\n  size: number | null | undefined;\r\n  setSize: (newSize: number | undefined) => void;\r\n  fromToken: string;\r\n  toToken: string;\r\n  wallet: Wallet;\r\n  market: Market | null | undefined;\r\n  customMarkets: CustomMarketInfo[];\r\n}) {\r\n  const [accounts] = useTokenAccounts();\r\n  const balances = useBalances();\r\n  const [fromAmount, setFromAmount] = useState<number | undefined>();\r\n  const [toAmount, setToAmount] = useState<number | undefined>();\r\n\r\n  const connection = useConnection();\r\n  const sendConnection = useSendConnection();\r\n\r\n  const [isConverting, setIsConverting] = useState(false);\r\n\r\n  const isFromTokenBaseOfMarket = (market) => {\r\n    const { marketName } = getMarketDetails(market, customMarkets);\r\n    if (!marketName) {\r\n      throw Error(\r\n        'Cannot determine if coin is quote or base because marketName is missing',\r\n      );\r\n    }\r\n    const [base] = marketName.split('/');\r\n    return fromToken === base;\r\n  };\r\n\r\n  const onConvert = async () => {\r\n    if (!market) {\r\n      console.warn('Market is null when attempting convert.');\r\n      notify({\r\n        message: 'Invalid market',\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n    // get accounts\r\n    const baseCurrencyAccount = getSelectedTokenAccountForMint(\r\n      accounts,\r\n      market?.baseMintAddress,\r\n    );\r\n    const quoteCurrencyAccount = getSelectedTokenAccountForMint(\r\n      accounts,\r\n      market?.quoteMintAddress,\r\n    );\r\n\r\n    // get approximate price\r\n    let side;\r\n    try {\r\n      side = isFromTokenBaseOfMarket(market) ? 'sell' : 'buy';\r\n    } catch (e) {\r\n      console.warn(e);\r\n      notify({\r\n        message: 'Error placing order',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n\r\n    const sidedOrderbookAccount =\r\n      // @ts-ignore\r\n      side === 'buy' ? market._decoded.asks : market._decoded.bids;\r\n    const orderbookData = await connection.getAccountInfo(\r\n      sidedOrderbookAccount,\r\n    );\r\n    if (!orderbookData?.data) {\r\n      notify({ message: 'Invalid orderbook data', type: 'error' });\r\n      return;\r\n    }\r\n    const decodedOrderbookData = Orderbook.decode(market, orderbookData.data);\r\n    const [bbo] =\r\n      decodedOrderbookData &&\r\n      decodedOrderbookData.getL2(1).map(([price]) => price);\r\n    if (!bbo) {\r\n      notify({ message: 'No best price found', type: 'error' });\r\n      return;\r\n    }\r\n    if (!size) {\r\n      notify({ message: 'Size not specified', type: 'error' });\r\n      return;\r\n    }\r\n\r\n    const tickSizeDecimals = getDecimalCount(market.tickSize);\r\n    const parsedPrice = getMarketOrderPrice(\r\n      decodedOrderbookData,\r\n      size,\r\n      tickSizeDecimals,\r\n    );\r\n\r\n    // round size\r\n    const sizeDecimalCount = getDecimalCount(market.minOrderSize);\r\n    const nativeSize = side === 'sell' ? size : size / parsedPrice;\r\n    const parsedSize = floorToDecimal(nativeSize, sizeDecimalCount);\r\n\r\n    setIsConverting(true);\r\n    try {\r\n      await placeOrder({\r\n        side,\r\n        price: parsedPrice,\r\n        size: parsedSize,\r\n        orderType: 'ioc',\r\n        market,\r\n        connection: sendConnection,\r\n        wallet,\r\n        baseCurrencyAccount: baseCurrencyAccount?.pubkey,\r\n        quoteCurrencyAccount: quoteCurrencyAccount?.pubkey,\r\n      });\r\n    } catch (e) {\r\n      console.warn(e);\r\n      notify({\r\n        message: 'Error placing order',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setIsConverting(false);\r\n    }\r\n  };\r\n\r\n  const getPrice = async () => {\r\n    try {\r\n      const side = isFromTokenBaseOfMarket(market) ? 'sell' : 'buy';\r\n      const sidedOrderbookAccount =\r\n        // @ts-ignore\r\n        side === 'buy' ? market._decoded.asks : market._decoded.bids;\r\n      const orderbookData = await connection.getAccountInfo(\r\n        sidedOrderbookAccount,\r\n      );\r\n      if (!orderbookData?.data || !market) {\r\n        return [null, null];\r\n      }\r\n      const decodedOrderbookData = Orderbook.decode(market, orderbookData.data);\r\n      const [bbo] =\r\n        decodedOrderbookData &&\r\n        decodedOrderbookData.getL2(1).map(([price]) => price);\r\n      if (!bbo || !size) {\r\n        return [null, null];\r\n      }\r\n      const tickSizeDecimals = getDecimalCount(market.tickSize);\r\n      const expectedPrice = getExpectedFillPrice(\r\n        decodedOrderbookData,\r\n        size,\r\n        tickSizeDecimals,\r\n      );\r\n      if (side === 'buy') {\r\n        return [expectedPrice.toFixed(6), 1];\r\n      } else {\r\n        return [1, expectedPrice.toFixed(6)];\r\n      }\r\n    } catch (e) {\r\n      console.log(`Got error ${e}`);\r\n      return [null, null];\r\n    }\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      getPrice().then(([fromAmount, toAmount]) => {\r\n        setFromAmount(fromAmount || undefined);\r\n        setToAmount(toAmount || undefined);\r\n      });\r\n    },\r\n    // eslint-disable-next-line\r\n    [market?.address.toBase58(), size],\r\n  );\r\n\r\n  const canConvert = market && size && size > 0;\r\n  const balance = balances.find(\r\n    (coinBalance) => coinBalance.coin === fromToken,\r\n  );\r\n  const availableBalance =\r\n    ((balance?.unsettled || 0) + (balance?.wallet || 0)) * 0.99;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Row style={{ marginBottom: 8 }}>\r\n        <Col>\r\n          <Input\r\n            style={{ minWidth: 300 }}\r\n            addonBefore={`Size (${fromToken})`}\r\n            placeholder=\"Size\"\r\n            value={size === null ? undefined : size}\r\n            type=\"number\"\r\n            onChange={(e) => setSize(parseFloat(e.target.value) || undefined)}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={12} style={{ marginBottom: 8 }}>\r\n        <Col span={12}>\r\n          <ActionButton\r\n            block\r\n            size=\"large\"\r\n            onClick={() => setSize(floorToDecimal(availableBalance, 4))}\r\n          >\r\n            Max: {availableBalance.toFixed(4)}\r\n          </ActionButton>\r\n        </Col>\r\n        <Col span={12}>\r\n          <ConvertButton\r\n            block\r\n            type=\"primary\"\r\n            size=\"large\"\r\n            loading={isConverting}\r\n            onClick={onConvert}\r\n            disabled={!canConvert}\r\n          >\r\n            Convert\r\n          </ConvertButton>\r\n        </Col>\r\n      </Row>\r\n      {canConvert && (\r\n        <Row align=\"middle\" justify=\"center\">\r\n          <Col>\r\n            {fromAmount} {fromToken}\r\n          </Col>\r\n          <Col offset={1}>\r\n            <SwapOutlined />\r\n          </Col>\r\n          <Col offset={1}>\r\n            {toAmount} {toToken}\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ConvertForm from '../components/ConvertForm';\r\nimport { Row, Col } from 'antd';\r\n\r\nconst Wrapper = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 16px 16px;\r\n  .borderNone .ant-select-selector {\r\n    border: none !important;\r\n  }\r\n`;\r\n\r\nexport default function ConvertPage() {\r\n  return (\r\n    <Wrapper style={{ flex: 1, paddingTop: 10 }}>\r\n      <Row justify=\"center\">\r\n        <Col>\r\n          <ConvertForm />\r\n        </Col>\r\n      </Row>\r\n    </Wrapper>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { useLocalStorageState } from './utils';\r\nimport { useInterval } from './useInterval';\r\nimport { useConnection } from './connection';\r\nimport { useWallet } from './wallet';\r\nimport {\r\n  useAllMarkets,\r\n  useTokenAccounts,\r\n  useMarket,\r\n  useSelectedTokenAccounts,\r\n} from './markets';\r\nimport { settleAllFunds } from './send';\r\nimport { PreferencesContextValues } from './types';\r\n\r\nconst PreferencesContext = React.createContext<PreferencesContextValues | null>(\r\n  null,\r\n);\r\n\r\nexport function PreferencesProvider({ children }) {\r\n  const [autoSettleEnabled, setAutoSettleEnabled] = useLocalStorageState(\r\n    'autoSettleEnabled',\r\n    true,\r\n  );\r\n\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const { connected, wallet } = useWallet();\r\n  const { customMarkets } = useMarket();\r\n  const [marketList] = useAllMarkets(customMarkets);\r\n  const connection = useConnection();\r\n  const [selectedTokenAccounts] = useSelectedTokenAccounts();\r\n\r\n  useInterval(() => {\r\n    const autoSettle = async () => {\r\n      const markets = (marketList || []).map((m) => m.market);\r\n      try {\r\n        console.log('Auto settling');\r\n        await settleAllFunds({\r\n          connection,\r\n          wallet,\r\n          tokenAccounts: tokenAccounts || [],\r\n          markets,\r\n          selectedTokenAccounts,\r\n        });\r\n      } catch (e) {\r\n        console.log('Error auto settling funds: ' + e.message);\r\n      }\r\n    };\r\n\r\n    connected && wallet?.autoApprove && autoSettleEnabled && autoSettle();\r\n  }, 10000);\r\n\r\n  return (\r\n    <PreferencesContext.Provider\r\n      value={{\r\n        autoSettleEnabled,\r\n        setAutoSettleEnabled,\r\n      }}\r\n    >\r\n      {children}\r\n    </PreferencesContext.Provider>\r\n  );\r\n}\r\n\r\nexport function usePreferences() {\r\n  const context = useContext(PreferencesContext);\r\n  if (!context) {\r\n    throw new Error('Missing preferences context');\r\n  }\r\n  return {\r\n    autoSettleEnabled: context.autoSettleEnabled,\r\n    setAutoSettleEnabled: context.setAutoSettleEnabled,\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { Switch, Typography } from 'antd';\r\nimport { usePreferences } from '../utils/preferences';\r\n\r\nconst { Paragraph } = Typography;\r\n\r\nexport default function Settings({ autoApprove }) {\r\n  const { autoSettleEnabled, setAutoSettleEnabled } = usePreferences();\r\n\r\n  return (\r\n    <div>\r\n      <Switch\r\n        style={{ marginRight: 10 }}\r\n        disabled={!autoApprove}\r\n        checked={autoApprove && autoSettleEnabled}\r\n        onChange={setAutoSettleEnabled}\r\n      />{' '}\r\n      Auto settle\r\n      {!autoApprove && (\r\n        <Paragraph style={{ color: 'rgba(255,255,255,0.5)', marginTop: 10 }}>\r\n          To use auto settle, first enable auto approval in your wallet\r\n        </Paragraph>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Col, Input, Modal, Row } from 'antd';\r\nimport { EndpointInfo } from '../utils/types';\r\n\r\nexport default function CustomClusterEndpointDialog({\r\n  visible,\r\n  testingConnection,\r\n  onAddCustomEndpoint,\r\n  onClose,\r\n}: {\r\n  visible: boolean;\r\n  testingConnection: boolean;\r\n  onAddCustomEndpoint: (info: EndpointInfo) => void;\r\n  onClose?: () => void;\r\n}) {\r\n  const [customEndpoint, setCustomEndpoint] = useState('');\r\n  const [customEndpointName, setCustomEndpointName] = useState('');\r\n\r\n  const onSubmit = () => {\r\n    const fullEndpoint = 'https://' + customEndpoint;\r\n    const params = {\r\n      name: customEndpointName,\r\n      endpoint: fullEndpoint,\r\n      custom: true,\r\n    };\r\n    onAddCustomEndpoint(params);\r\n    onDoClose();\r\n  };\r\n  const onDoClose = () => {\r\n    setCustomEndpoint('');\r\n    setCustomEndpointName('');\r\n    onClose && onClose();\r\n  };\r\n  const canSubmit = customEndpoint !== '' && customEndpointName !== '';\r\n\r\n  return (\r\n    <Modal\r\n      title={'Add custom endpoint'}\r\n      visible={visible}\r\n      onOk={onSubmit}\r\n      okText={'Add'}\r\n      onCancel={onDoClose}\r\n      okButtonProps={{ disabled: !canSubmit, loading: testingConnection }}\r\n    >\r\n      <Row style={{ marginBottom: 8 }}>\r\n        <Col span={24}>\r\n          <Input\r\n            placeholder=\"Cluster Name\"\r\n            value={customEndpointName}\r\n            onChange={(e) => setCustomEndpointName(e.target.value)}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ marginBottom: 8 }}>\r\n        <Col span={24}>\r\n          <Input\r\n            placeholder=\"Cluster Endpoint\"\r\n            value={customEndpoint}\r\n            addonBefore={'https://'}\r\n            onChange={(e) => setCustomEndpoint(e.target.value)}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Modal>\r\n  );\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport { Select, Typography } from 'antd';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { TOKEN_MINTS } from '@project-serum/serum';\r\nimport apps from '@project-serum/awesome-serum';\r\n\r\nconst { Option } = Select;\r\n\r\nconst appsAndTokens = apps.concat(\r\n  TOKEN_MINTS.map((mint) => {\r\n    return {\r\n      name: `${mint.name} SPL`,\r\n      url: `https://explorer.solana.com/address/${mint.address.toBase58()}`,\r\n      description: `${mint.name} SPL token`,\r\n      icon: '',\r\n      tags: [\r\n        'token',\r\n        'blockchain',\r\n        'solana',\r\n        'spl',\r\n        'solana',\r\n        mint.address.toBase58(),\r\n      ],\r\n    };\r\n  }),\r\n);\r\n\r\ninterface App {\r\n  name: string;\r\n  url: string;\r\n  description: string;\r\n  tags: string[];\r\n}\r\n\r\nexport default function AppSearch(props) {\r\n  const [searchMatches, setSearchMatches] = useState<App[]>([]);\r\n  const [searchValue, setSearchValue] = useState<string | undefined>(undefined);\r\n\r\n  const matchApp = (searchString: string, app: App) => {\r\n    const lowerSearchStr = searchString.toLowerCase();\r\n    return (\r\n      app.name.toLowerCase().includes(lowerSearchStr) ||\r\n      app.tags.some(\r\n        (tag) =>\r\n          tag.toLowerCase().includes(lowerSearchStr) ||\r\n          lowerSearchStr.includes(tag.toLowerCase()),\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleSearch = (value) => {\r\n    setSearchValue(value === '' ? undefined : value);\r\n    const filteredApps = appsAndTokens.filter((app) => matchApp(value, app));\r\n    setSearchMatches(filteredApps);\r\n  };\r\n\r\n  const handleSelect = (value, option) => {\r\n    window.open(option.href, '_blank');\r\n    handleClear();\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setSearchMatches([]);\r\n    setSearchValue(undefined);\r\n  };\r\n\r\n  const options = searchMatches.map((d) => (\r\n    <Option key={d.name} value={d.name} href={d.url}>\r\n      <h3>{d.name}</h3>\r\n      <Typography.Text type=\"secondary\">\r\n        {d.url.replace('https://', '')}\r\n      </Typography.Text>\r\n    </Option>\r\n  ));\r\n\r\n  const ref = useRef<any>();\r\n  return (\r\n    <Select\r\n      ref={ref}\r\n      showSearch\r\n      allowClear\r\n      value={searchValue}\r\n      placeholder={\r\n        props.focussed || props.focussed === undefined\r\n          ? 'Search for dex, swap, wallet, token...'\r\n          : ''\r\n      }\r\n      onSearch={handleSearch}\r\n      onClear={handleClear}\r\n      onSelect={handleSelect}\r\n      onFocus={props.onFocus}\r\n      onBlur={() => {\r\n        props.onBlur();\r\n        handleClear();\r\n      }}\r\n      notFoundContent={null} // todo: make this search history\r\n      style={{\r\n        width: props.width || '300px',\r\n        transition: props.focussed ? 'width 0.1s ease 0.1s' : '',\r\n      }}\r\n      dropdownStyle={{\r\n        width: props.width || '300px',\r\n      }}\r\n      dropdownMatchSelectWidth={false}\r\n      suffixIcon={\r\n        <SearchOutlined onClick={() => ref.current && ref.current.focus()} />\r\n      }\r\n      filterOption={false}\r\n    >\r\n      {options}\r\n    </Select>\r\n  );\r\n}\r\n","import {\r\n  InfoCircleOutlined,\r\n  PlusCircleOutlined,\r\n  SettingOutlined,\r\n} from '@ant-design/icons';\r\nimport { Button, Col, Menu, Popover, Row, Select } from 'antd';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport logo from '../assets/logo.svg';\r\nimport styled from 'styled-components';\r\nimport { useWallet, WALLET_PROVIDERS } from '../utils/wallet';\r\nimport { ENDPOINTS, useConnectionConfig } from '../utils/connection';\r\nimport Settings from './Settings';\r\nimport CustomClusterEndpointDialog from './CustomClusterEndpointDialog';\r\nimport { EndpointInfo } from '../utils/types';\r\nimport { notify } from '../utils/notifications';\r\nimport { Connection } from '@solana/web3.js';\r\nimport WalletConnect from './WalletConnect';\r\nimport AppSearch from './AppSearch';\r\n\r\nconst Wrapper = styled.div`\r\n  background-color: #0d1017;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-end;\r\n  padding: 0px 30px;\r\n  flex-wrap: wrap;\r\n`;\r\nconst LogoWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: #2abdd2;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  img {\r\n    height: 30px;\r\n    margin-right: 8px;\r\n  }\r\n`;\r\n\r\nconst EXTERNAL_LINKS = {\r\n  '/learn': 'https://serum-academy.com/en/serum-dex/',\r\n  '/add-market': 'https://serum-academy.com/en/add-market/',\r\n  '/wallet-support': 'https://serum-academy.com/en/wallet-support',\r\n  '/dex-list': 'https://serum-academy.com/en/dex-list/',\r\n  '/developer-resources': 'https://serum-academy.com/en/developer-resources/',\r\n  '/explorer': 'https://explorer.solana.com',\r\n  '/srm-faq': 'https://projectserum.com/srm-faq',\r\n  '/swap': 'https://swap.projectserum.com',\r\n};\r\n\r\nexport default function TopBar() {\r\n  const { connected, wallet, providerUrl, setProvider } = useWallet();\r\n  const {\r\n    endpoint,\r\n    endpointInfo,\r\n    setEndpoint,\r\n    availableEndpoints,\r\n    setCustomEndpoints,\r\n  } = useConnectionConfig();\r\n  const [addEndpointVisible, setAddEndpointVisible] = useState(false);\r\n  const [testingConnection, setTestingConnection] = useState(false);\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [searchFocussed, setSearchFocussed] = useState(false);\r\n\r\n  const handleClick = useCallback(\r\n    (e) => {\r\n      if (!(e.key in EXTERNAL_LINKS)) {\r\n        history.push(e.key);\r\n      }\r\n    },\r\n    [history],\r\n  );\r\n\r\n  const onAddCustomEndpoint = (info: EndpointInfo) => {\r\n    const existingEndpoint = availableEndpoints.some(\r\n      (e) => e.endpoint === info.endpoint,\r\n    );\r\n    if (existingEndpoint) {\r\n      notify({\r\n        message: `An endpoint with the given url already exists`,\r\n        type: 'error',\r\n      });\r\n      return;\r\n    }\r\n\r\n    const handleError = (e) => {\r\n      console.log(`Connection to ${info.endpoint} failed: ${e}`);\r\n      notify({\r\n        message: `Failed to connect to ${info.endpoint}`,\r\n        type: 'error',\r\n      });\r\n    };\r\n\r\n    try {\r\n      const connection = new Connection(info.endpoint, 'recent');\r\n      connection\r\n        .getEpochInfo()\r\n        .then((result) => {\r\n          setTestingConnection(true);\r\n          console.log(`testing connection to ${info.endpoint}`);\r\n          const newCustomEndpoints = [\r\n            ...availableEndpoints.filter((e) => e.custom),\r\n            info,\r\n          ];\r\n          setEndpoint(info.endpoint);\r\n          setCustomEndpoints(newCustomEndpoints);\r\n        })\r\n        .catch(handleError);\r\n    } catch (e) {\r\n      handleError(e);\r\n    } finally {\r\n      setTestingConnection(false);\r\n    }\r\n  };\r\n\r\n  const endpointInfoCustom = endpointInfo && endpointInfo.custom;\r\n  useEffect(() => {\r\n    const handler = () => {\r\n      if (endpointInfoCustom) {\r\n        setEndpoint(ENDPOINTS[0].endpoint);\r\n      }\r\n    };\r\n    window.addEventListener('beforeunload', handler);\r\n    return () => window.removeEventListener('beforeunload', handler);\r\n  }, [endpointInfoCustom, setEndpoint]);\r\n\r\n  return (\r\n    <>\r\n      <CustomClusterEndpointDialog\r\n        visible={addEndpointVisible}\r\n        testingConnection={testingConnection}\r\n        onAddCustomEndpoint={onAddCustomEndpoint}\r\n        onClose={() => setAddEndpointVisible(false)}\r\n      />\r\n      <Wrapper>\r\n        <LogoWrapper onClick={() => history.push('/')}>\r\n          <img src={logo} alt=\"\" />\r\n          {'SERUM'}\r\n        </LogoWrapper>\r\n        <Menu\r\n          mode=\"horizontal\"\r\n          onClick={handleClick}\r\n          selectedKeys={[location.pathname]}\r\n          style={{\r\n            borderBottom: 'none',\r\n            backgroundColor: 'transparent',\r\n            display: 'flex',\r\n            alignItems: 'flex-end',\r\n            flex: 1,\r\n          }}\r\n        >\r\n          <Menu.Item key=\"/\" style={{ margin: '0 10px 0 20px' }}>\r\n            TRADE\r\n          </Menu.Item>\r\n          {!searchFocussed && (\r\n            <Menu.Item key=\"/swap\" style={{ margin: '0 10px' }}>\r\n              <a\r\n                href={EXTERNAL_LINKS['/swap']}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                SWAP\r\n              </a>\r\n            </Menu.Item>\r\n          )}\r\n          {connected && (!searchFocussed || location.pathname === '/balances') && (\r\n            <Menu.Item key=\"/balances\" style={{ margin: '0 10px' }}>\r\n              BALANCES\r\n            </Menu.Item>\r\n          )}\r\n          {connected && (!searchFocussed || location.pathname === '/orders') && (\r\n            <Menu.Item key=\"/orders\" style={{ margin: '0 10px' }}>\r\n              ORDERS\r\n            </Menu.Item>\r\n          )}\r\n          {connected && (!searchFocussed || location.pathname === '/convert') && (\r\n            <Menu.Item key=\"/convert\" style={{ margin: '0 10px' }}>\r\n              CONVERT\r\n            </Menu.Item>\r\n          )}\r\n          {(!searchFocussed || location.pathname === '/list-new-market') && (\r\n            <Menu.Item key=\"/list-new-market\" style={{ margin: '0 10px' }}>\r\n              ADD MARKET\r\n            </Menu.Item>\r\n          )}\r\n          {!searchFocussed && (\r\n            <Menu.SubMenu\r\n              title=\"LEARN\"\r\n              onTitleClick={() =>\r\n                window.open(EXTERNAL_LINKS['/learn'], '_blank')\r\n              }\r\n              style={{ margin: '0 0px 0 10px' }}\r\n            >\r\n              <Menu.Item key=\"/add-market\">\r\n                <a\r\n                  href={EXTERNAL_LINKS['/add-market']}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Adding a market\r\n                </a>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"/wallet-support\">\r\n                <a\r\n                  href={EXTERNAL_LINKS['/wallet-support']}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Supported wallets\r\n                </a>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"/dex-list\">\r\n                <a\r\n                  href={EXTERNAL_LINKS['/dex-list']}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  DEX list\r\n                </a>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"/developer-resources\">\r\n                <a\r\n                  href={EXTERNAL_LINKS['/developer-resources']}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Developer resources\r\n                </a>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"/explorer\">\r\n                <a\r\n                  href={EXTERNAL_LINKS['/explorer']}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Solana block explorer\r\n                </a>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"/srm-faq\">\r\n                <a\r\n                  href={EXTERNAL_LINKS['/srm-faq']}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  SRM FAQ\r\n                </a>\r\n              </Menu.Item>\r\n            </Menu.SubMenu>\r\n          )}\r\n        </Menu>\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            paddingRight: 5,\r\n          }}\r\n        >\r\n          <AppSearch\r\n            onFocus={() => setSearchFocussed(true)}\r\n            onBlur={() => setSearchFocussed(false)}\r\n            focussed={searchFocussed}\r\n            width={searchFocussed ? '350px' : '35px'}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Row\r\n            align=\"middle\"\r\n            style={{ paddingLeft: 5, paddingRight: 5 }}\r\n            gutter={16}\r\n          >\r\n            <Col>\r\n              <PlusCircleOutlined\r\n                style={{ color: '#2abdd2' }}\r\n                onClick={() => setAddEndpointVisible(true)}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <Popover\r\n                content={endpoint}\r\n                placement=\"bottomRight\"\r\n                title=\"URL\"\r\n                trigger=\"hover\"\r\n              >\r\n                <InfoCircleOutlined style={{ color: '#2abdd2' }} />\r\n              </Popover>\r\n            </Col>\r\n            <Col>\r\n              <Select\r\n                onSelect={setEndpoint}\r\n                value={endpoint}\r\n                style={{ marginRight: 8, width: '150px' }}\r\n              >\r\n                {availableEndpoints.map(({ name, endpoint }) => (\r\n                  <Select.Option value={endpoint} key={endpoint}>\r\n                    {name}\r\n                  </Select.Option>\r\n                ))}\r\n              </Select>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        {connected && (\r\n          <div>\r\n            <Popover\r\n              content={<Settings autoApprove={wallet?.autoApprove} />}\r\n              placement=\"bottomRight\"\r\n              title=\"Settings\"\r\n              trigger=\"click\"\r\n            >\r\n              <Button style={{ marginRight: 8 }}>\r\n                <SettingOutlined />\r\n                Settings\r\n              </Button>\r\n            </Popover>\r\n          </div>\r\n        )}\r\n        <div>\r\n          <Select onSelect={setProvider} value={providerUrl}>\r\n            {WALLET_PROVIDERS.map(({ name, url }) => (\r\n              <Select.Option value={url} key={url}>\r\n                {name}\r\n              </Select.Option>\r\n            ))}\r\n          </Select>\r\n        </div>\r\n        <div>\r\n          <WalletConnect />\r\n        </div>\r\n      </Wrapper>\r\n    </>\r\n  );\r\n}\r\n","export const helpUrls = {\r\n  customerSupport: 'https://t.me/ProjectSerum',\r\n  customerSupportZh: 'https://t.me/ProjectSerum_Chinese',\r\n  contactEmail: 'mailto:contact@projectserum.com',\r\n  discord: 'https://discord.gg/EDvudv6',\r\n  telegram: 'https://t.me/ProjectSerum',\r\n  github: 'https://github.com/project-serum',\r\n  projectSerum: 'https://projectserum.com/',\r\n  developerResources: 'https://projectserum.com/developer-resources',\r\n  solanaBeach: 'https://solanabeach.io',\r\n};\r\n","import React from 'react';\r\nimport { Layout, Row, Col, Grid } from 'antd';\r\nimport Link from './Link';\r\nimport { helpUrls } from './HelpUrls';\r\nconst { Footer } = Layout;\r\nconst { useBreakpoint } = Grid;\r\n\r\nconst footerElements = [\r\n  {\r\n    description: 'Serum Developer Resources',\r\n    link: helpUrls.developerResources,\r\n  },\r\n  { description: 'Discord', link: helpUrls.discord },\r\n  { description: 'Telegram', link: helpUrls.telegram },\r\n  { description: 'GitHub', link: helpUrls.github },\r\n  { description: 'Project Serum', link: helpUrls.projectSerum },\r\n  { description: 'Solana Network', link: helpUrls.solanaBeach },\r\n];\r\n\r\nexport const CustomFooter = () => {\r\n  const smallScreen = !useBreakpoint().lg;\r\n\r\n  return (\r\n    <Footer\r\n      style={{\r\n        height: '45px',\r\n        paddingBottom: 10,\r\n        paddingTop: 10,\r\n      }}\r\n    >\r\n      <Row align=\"middle\" gutter={[16, 4]}>\r\n        {!smallScreen && (\r\n          <>\r\n            <Col flex=\"auto\" />\r\n            {footerElements.map((elem, index) => {\r\n              return (\r\n                <Col key={index + ''}>\r\n                  <Link external to={elem.link}>\r\n                    {elem.description}\r\n                  </Link>\r\n                </Col>\r\n              );\r\n            })}\r\n          </>\r\n        )}\r\n        <Col flex=\"auto\">{/*  <DexProgramSelector />*/}</Col>\r\n      </Row>\r\n    </Footer>\r\n  );\r\n};\r\n","import { Layout } from 'antd';\r\nimport React from 'react';\r\nimport TopBar from './TopBar';\r\nimport { CustomFooter as Footer } from './Footer';\r\nconst { Header, Content } = Layout;\r\n\r\nexport default function BasicLayout({ children }) {\r\n  return (\r\n    <React.Fragment>\r\n      <Layout\r\n        style={{ display: 'flex', minHeight: '100vh', flexDirection: 'column' }}\r\n      >\r\n        <Header style={{ padding: 0, minHeight: 64, height: 'unset' }}>\r\n          <TopBar />\r\n        </Header>\r\n        <Content style={{ flex: 1 }}>{children}</Content>\r\n        <Footer />\r\n      </Layout>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import { PublicKey } from '@solana/web3.js';\r\nimport React, { ReactElement, useMemo, useState } from 'react';\r\nimport { useAccountInfo } from '../utils/connection';\r\nimport { isValidPublicKey } from '../utils/utils';\r\nimport { ValidateStatus } from 'antd/lib/form/FormItem';\r\nimport { TokenInstructions } from '@project-serum/serum';\r\nimport { parseTokenMintData, useMintToTickers } from '../utils/tokens';\r\nimport { AutoComplete, Form, Tooltip } from 'antd';\r\nimport Link from './Link';\r\n\r\nexport interface MintInfo {\r\n  address: PublicKey;\r\n  decimals: number;\r\n}\r\n\r\nexport function useMintInput(\r\n  name,\r\n  label: string | ReactElement,\r\n  tooltip?: string | ReactElement,\r\n): [ReactElement, MintInfo | null] {\r\n  const [address, setAddress] = useState('');\r\n  const [accountInfo, loaded] = useAccountInfo(\r\n    isValidPublicKey(address) ? new PublicKey(address) : null,\r\n  );\r\n\r\n  const mintToTickers = useMintToTickers();\r\n  const options = useMemo(() => {\r\n    return Object.entries(mintToTickers)\r\n      .filter(\r\n        ([mintAddress, ticker]) =>\r\n          mintAddress.includes(address) ||\r\n          ticker.toLowerCase().includes(address.toLowerCase()),\r\n      )\r\n      .map(([mintAddress, ticker]) => ({\r\n        value: mintAddress,\r\n        label: (\r\n          <>\r\n            {ticker} ({mintAddress})\r\n          </>\r\n        ),\r\n      }));\r\n  }, [mintToTickers, address]);\r\n\r\n  const { validateStatus, hasFeedback, help, mintInfo } = useMemo(() => {\r\n    let validateStatus: ValidateStatus = '';\r\n    let hasFeedback = false;\r\n    let help: string | null = null;\r\n    let mintInfo: MintInfo | null = null;\r\n    if (address) {\r\n      hasFeedback = true;\r\n      if (accountInfo) {\r\n        if (\r\n          accountInfo.owner.equals(TokenInstructions.TOKEN_PROGRAM_ID) &&\r\n          accountInfo.data.length === 82\r\n        ) {\r\n          let parsed = parseTokenMintData(accountInfo.data);\r\n          if (parsed.initialized) {\r\n            validateStatus = 'success';\r\n            mintInfo = {\r\n              address: new PublicKey(address),\r\n              decimals: parsed.decimals,\r\n            };\r\n          } else {\r\n            validateStatus = 'error';\r\n            help = 'Invalid SPL mint';\r\n          }\r\n        } else {\r\n          validateStatus = 'error';\r\n          help = 'Invalid SPL mint address';\r\n        }\r\n      } else if (isValidPublicKey(address) && !loaded) {\r\n        validateStatus = 'validating';\r\n      } else {\r\n        validateStatus = 'error';\r\n        help = 'Invalid Solana address';\r\n      }\r\n    }\r\n    return { validateStatus, hasFeedback, help, mintInfo };\r\n  }, [address, accountInfo, loaded]);\r\n\r\n  const input = (\r\n    <Form.Item\r\n      label={\r\n        <Tooltip\r\n          title={\r\n            <>\r\n              {tooltip} You can look up token mint addresses on{' '}\r\n              <Link external to=\"https://sollet.io\">\r\n                sollet.io\r\n              </Link>\r\n              .\r\n            </>\r\n          }\r\n        >\r\n          {label}\r\n        </Tooltip>\r\n      }\r\n      name={name}\r\n      validateStatus={validateStatus}\r\n      hasFeedback={hasFeedback}\r\n      help={help}\r\n    >\r\n      <AutoComplete\r\n        options={options}\r\n        value={address}\r\n        onChange={(value) => setAddress(value)}\r\n      />\r\n    </Form.Item>\r\n  );\r\n\r\n  return [input, mintInfo];\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Button, Form, Input, Tooltip, Typography } from 'antd';\r\nimport { notify } from '../utils/notifications';\r\nimport { MARKETS } from '@project-serum/serum';\r\nimport { useConnection } from '../utils/connection';\r\nimport FloatingElement from '../components/layout/FloatingElement';\r\nimport styled from 'styled-components';\r\nimport { useWallet } from '../utils/wallet';\r\nimport { listMarket } from '../utils/send';\r\nimport { useMintInput } from '../components/useMintInput';\r\n\r\nconst { Text, Title } = Typography;\r\n\r\nconst Wrapper = styled.div`\r\n  max-width: 800px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 24px;\r\n  margin-bottom: 24px;\r\n`;\r\n\r\nexport default function ListNewMarketPage() {\r\n  const connection = useConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [baseMintInput, baseMintInfo] = useMintInput(\r\n    'baseMint',\r\n    <Text>\r\n      Base Token Mint Address{' '}\r\n      <Text type=\"secondary\">\r\n        (e.g. BTC solana address:{' '}\r\n        {\r\n          <Text type=\"secondary\" code>\r\n            9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E\r\n          </Text>\r\n        }\r\n        )\r\n      </Text>\r\n    </Text>,\r\n    'The base token is the token being traded. For example, the base token of a BTC/USDT market is BTC.',\r\n  );\r\n  const [quoteMintInput, quoteMintInfo] = useMintInput(\r\n    'quoteMint',\r\n    <Text>\r\n      Quote Token Mint Address{' '}\r\n      <Text type=\"secondary\">\r\n        (e.g. USDT solana address:{' '}\r\n        {\r\n          <Text type=\"secondary\" code>\r\n            BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4\r\n          </Text>\r\n        }\r\n        )\r\n      </Text>\r\n    </Text>,\r\n    'The quote token is the token used to price trades. For example, the quote token of a BTC/USDT market is USDT.',\r\n  );\r\n  const [lotSize, setLotSize] = useState('1');\r\n  const [tickSize, setTickSize] = useState('0.01');\r\n  const dexProgramId = MARKETS.find(({ deprecated }) => !deprecated).programId;\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  const [listedMarket, setListedMarket] = useState(null);\r\n\r\n  let baseLotSize;\r\n  let quoteLotSize;\r\n  if (baseMintInfo && parseFloat(lotSize) > 0) {\r\n    baseLotSize = Math.round(10 ** baseMintInfo.decimals * parseFloat(lotSize));\r\n    if (quoteMintInfo && parseFloat(tickSize) > 0) {\r\n      quoteLotSize = Math.round(\r\n        parseFloat(lotSize) *\r\n          10 ** quoteMintInfo.decimals *\r\n          parseFloat(tickSize),\r\n      );\r\n    }\r\n  }\r\n\r\n  const canSubmit =\r\n    connected &&\r\n    !!baseMintInfo &&\r\n    !!quoteMintInfo &&\r\n    !!baseLotSize &&\r\n    !!quoteLotSize;\r\n\r\n  async function onSubmit() {\r\n    if (!canSubmit) {\r\n      return;\r\n    }\r\n    setSubmitting(true);\r\n    try {\r\n      const marketAddress = await listMarket({\r\n        connection,\r\n        wallet,\r\n        baseMint: baseMintInfo.address,\r\n        quoteMint: quoteMintInfo.address,\r\n        baseLotSize,\r\n        quoteLotSize,\r\n        dexProgramId,\r\n      });\r\n      setListedMarket(marketAddress);\r\n    } catch (e) {\r\n      console.warn(e);\r\n      notify({\r\n        message: 'Error listing new market',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <FloatingElement>\r\n        <Title level={4}>List New Market</Title>\r\n        <Form\r\n          labelCol={{ span: 24 }}\r\n          wrapperCol={{ span: 24 }}\r\n          layout={'vertical'}\r\n          onFinish={onSubmit}\r\n        >\r\n          {baseMintInput}\r\n          {quoteMintInput}\r\n          <Form.Item\r\n            label={\r\n              <Tooltip title=\"Smallest allowed order size. For a BTC/USDT market, this would be in units of BTC.\">\r\n                Minimum Order Size{' '}\r\n                <Text type=\"secondary\">(Lot size in e.g. BTC)</Text>\r\n              </Tooltip>\r\n            }\r\n            name=\"lotSize\"\r\n            initialValue=\"1\"\r\n            validateStatus={\r\n              baseMintInfo && quoteMintInfo\r\n                ? baseLotSize\r\n                  ? 'success'\r\n                  : 'error'\r\n                : null\r\n            }\r\n            hasFeedback={baseMintInfo && quoteMintInfo}\r\n          >\r\n            <Input\r\n              value={lotSize}\r\n              onChange={(e) => setLotSize(e.target.value.trim())}\r\n              type=\"number\"\r\n              min=\"0\"\r\n              step=\"any\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label={\r\n              <Tooltip title=\"Smallest amount by which prices can move. For a BTC/USDT market, this would be in units of USDT.\">\r\n                Tick Size{' '}\r\n                <Text type=\"secondary\">(Price increment in e.g. USDT)</Text>\r\n              </Tooltip>\r\n            }\r\n            name=\"tickSize\"\r\n            initialValue=\"0.01\"\r\n            validateStatus={\r\n              baseMintInfo && quoteMintInfo\r\n                ? quoteLotSize\r\n                  ? 'success'\r\n                  : 'error'\r\n                : null\r\n            }\r\n            hasFeedback={baseMintInfo && quoteMintInfo}\r\n          >\r\n            <Input\r\n              value={tickSize}\r\n              onChange={(e) => setTickSize(e.target.value.trim())}\r\n              type=\"number\"\r\n              min=\"0\"\r\n              step=\"any\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item label=\" \" colon={false}>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              disabled={!canSubmit}\r\n              loading={submitting}\r\n            >\r\n              {connected ? 'Submit' : 'Not connected to wallet'}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </FloatingElement>\r\n      {listedMarket ? (\r\n        <FloatingElement>\r\n          <Text>New market address: {listedMarket.toBase58()}</Text>\r\n        </FloatingElement>\r\n      ) : null}\r\n    </Wrapper>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  AutoComplete,\r\n  Button,\r\n  Form,\r\n  Input,\r\n  Switch,\r\n  Tooltip,\r\n  Typography,\r\n} from 'antd';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { useConnection } from '../../utils/connection';\r\nimport FloatingElement from '../../components/layout/FloatingElement';\r\nimport styled from 'styled-components';\r\nimport { useWallet } from '../../utils/wallet';\r\nimport { sendSignedTransaction, signTransaction } from '../../utils/send';\r\nimport { useMintInput } from '../../components/useMintInput';\r\nimport { PoolTransactions } from '@project-serum/pool';\r\nimport { useTokenAccounts } from '../../utils/markets';\r\nimport BN from 'bn.js';\r\nimport { notify } from '../../utils/notifications';\r\nimport Link from '../../components/Link';\r\n\r\nconst { Text, Title } = Typography;\r\n\r\nconst Wrapper = styled.div`\r\n  max-width: 800px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 24px;\r\n  margin-bottom: 24px;\r\n`;\r\n\r\nconst AddRemoveTokenButtons = styled.div`\r\n  margin-top: 16px;\r\n  margin-bottom: 16px;\r\n`;\r\n\r\nconst SIMPLE_POOL_PROGRAM_ID = 'AuQRLHwApDLinkrAZCkGqQ9TB7bH7KhpfCHtm6iYNHUz';\r\nconst ADMIN_CONTROLLED_POOL_PROGRAM_ID =\r\n  '4RtoceJET4bF5mWXCp2iaZmssEPS7Z43XRaYEyA8TCkB';\r\nconst DEFAULT_PROGRAM_ID = ADMIN_CONTROLLED_POOL_PROGRAM_ID;\r\nconst PROGRAM_ID_OPTIONS = [\r\n  {\r\n    label: `Simple Pool (${SIMPLE_POOL_PROGRAM_ID})`,\r\n    value: SIMPLE_POOL_PROGRAM_ID,\r\n  },\r\n  {\r\n    label: `Admin-Controlled Pool (${ADMIN_CONTROLLED_POOL_PROGRAM_ID})`,\r\n    value: ADMIN_CONTROLLED_POOL_PROGRAM_ID,\r\n  },\r\n];\r\n\r\nexport default function NewPoolPage() {\r\n  const connection = useConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [poolName, setPoolName] = useState('');\r\n  const [programId, setProgramId] = useState(DEFAULT_PROGRAM_ID);\r\n  const [initialSupply, setInitialSupply] = useState('1');\r\n  const [initialAssets, setInitialAssets] = useState<InitialAsset[]>([\r\n    { valid: false },\r\n    { valid: false },\r\n  ]);\r\n  const [adminControlled, setAdminControlled] = useState(false);\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [newPoolAddress, setNewPoolAddress] = useState<PublicKey | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (programId === SIMPLE_POOL_PROGRAM_ID) {\r\n      setAdminControlled(false);\r\n    } else if (programId === ADMIN_CONTROLLED_POOL_PROGRAM_ID) {\r\n      setAdminControlled(true);\r\n    }\r\n  }, [programId]);\r\n\r\n  const canSubmit =\r\n    connected &&\r\n    poolName.trim() &&\r\n    programId &&\r\n    parseFloat(initialSupply) > 0 &&\r\n    initialAssets.every((asset) => asset.valid) &&\r\n    tokenAccounts;\r\n\r\n  async function onSubmit() {\r\n    if (!canSubmit) {\r\n      return;\r\n    }\r\n    setSubmitting(true);\r\n    try {\r\n      const assets = initialAssets as ValidInitialAsset[];\r\n      const [\r\n        poolAddress,\r\n        transactions,\r\n      ] = await PoolTransactions.initializeSimplePool({\r\n        connection,\r\n        programId: new PublicKey(programId),\r\n        poolName,\r\n        poolStateSpace: 1024,\r\n        poolMintDecimals: 6,\r\n        initialPoolMintSupply: new BN(\r\n          Math.round(10 ** 6 * parseFloat(initialSupply)),\r\n        ),\r\n        assetMints: assets.map((asset) => asset.mint),\r\n        initialAssetQuantities: assets.map((asset) => new BN(asset.quantity)),\r\n        creator: wallet.publicKey,\r\n        creatorAssets: assets.map((asset) => {\r\n          const found = tokenAccounts?.find((tokenAccount) =>\r\n            tokenAccount.effectiveMint.equals(asset.mint),\r\n          );\r\n          if (!found) {\r\n            throw new Error('No token account for ' + asset.mint.toBase58());\r\n          }\r\n          return found.pubkey;\r\n        }),\r\n        additionalAccounts: adminControlled\r\n          ? [{ pubkey: wallet.publicKey, isSigner: false, isWritable: false }]\r\n          : [],\r\n      });\r\n      const signed = await Promise.all(\r\n        transactions.map(({ transaction, signers }) =>\r\n          signTransaction({ transaction, wallet, signers, connection }),\r\n        ),\r\n      );\r\n      for (let signedTransaction of signed) {\r\n        await sendSignedTransaction({ signedTransaction, connection });\r\n      }\r\n      setNewPoolAddress(poolAddress);\r\n    } catch (e) {\r\n      console.warn(e);\r\n      notify({\r\n        message: 'Error creating new pool',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <FloatingElement>\r\n        <Title level={4}>Create new pool</Title>\r\n        <Form layout=\"vertical\" onFinish={onSubmit}>\r\n          <Form.Item\r\n            label={\r\n              <Tooltip title=\"Public name of the pool.\">Pool Name</Tooltip>\r\n            }\r\n            name=\"name\"\r\n          >\r\n            <Input\r\n              value={poolName}\r\n              onChange={(e) => setPoolName(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label={\r\n              <Tooltip title=\"Address of the pool program.\">\r\n                Program ID{' '}\r\n                <Text type=\"secondary\">(e.g. {DEFAULT_PROGRAM_ID})</Text>\r\n              </Tooltip>\r\n            }\r\n            name=\"programId\"\r\n            initialValue={DEFAULT_PROGRAM_ID}\r\n          >\r\n            <AutoComplete\r\n              value={programId}\r\n              onChange={(value) => setProgramId(value)}\r\n              options={PROGRAM_ID_OPTIONS}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label={\r\n              <Tooltip title=\"Initial number of pool tokens to mint to your account.\">\r\n                Initial Pool Token Supply\r\n              </Tooltip>\r\n            }\r\n            name=\"initialSupply\"\r\n            initialValue=\"1\"\r\n          >\r\n            <Input\r\n              value={initialSupply}\r\n              onChange={(e) => setInitialSupply(e.target.value.trim())}\r\n              type=\"number\"\r\n              min=\"0\"\r\n              step=\"any\"\r\n            />\r\n          </Form.Item>\r\n          <AddRemoveTokenButtons>\r\n            <Button\r\n              onClick={() =>\r\n                setInitialAssets((assets) => assets.concat({ valid: false }))\r\n              }\r\n            >\r\n              Add token\r\n            </Button>{' '}\r\n            <Button\r\n              onClick={() =>\r\n                setInitialAssets((assets) => assets.slice(0, assets.length - 1))\r\n              }\r\n              disabled={initialAssets.length <= 1}\r\n            >\r\n              Remove token\r\n            </Button>\r\n          </AddRemoveTokenButtons>\r\n          {initialAssets.map((asset, i) => (\r\n            <AssetInput setInitialAssets={setInitialAssets} index={i} key={i} />\r\n          ))}\r\n          <Form.Item\r\n            label={\r\n              <Tooltip title=\"Whether the assets in the pool can be controlled by the pool admin.\">\r\n                Admin Controlled\r\n              </Tooltip>\r\n            }\r\n            name=\"adminControlled\"\r\n          >\r\n            <Switch\r\n              checked={adminControlled}\r\n              onChange={(checked) => setAdminControlled(checked)}\r\n              disabled={\r\n                programId === SIMPLE_POOL_PROGRAM_ID ||\r\n                programId === ADMIN_CONTROLLED_POOL_PROGRAM_ID\r\n              }\r\n            />\r\n          </Form.Item>\r\n          <Form.Item label=\" \" colon={false}>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              disabled={!canSubmit}\r\n              loading={submitting}\r\n            >\r\n              {connected ? 'Submit' : 'Not connected to wallet'}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </FloatingElement>\r\n      {newPoolAddress ? (\r\n        <FloatingElement>\r\n          <Text>\r\n            New pool address:{' '}\r\n            <Link to={`/pools/${newPoolAddress.toBase58()}`}>\r\n              {newPoolAddress.toBase58()}\r\n            </Link>\r\n          </Text>\r\n        </FloatingElement>\r\n      ) : null}\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\ntype InitialAsset = { valid: false } | ValidInitialAsset;\r\ninterface ValidInitialAsset {\r\n  valid: true;\r\n  mint: PublicKey;\r\n  quantity: number;\r\n}\r\n\r\nfunction AssetInput({ setInitialAssets, index }) {\r\n  const [mintInput, mintInfo] = useMintInput(\r\n    `mint${index}`,\r\n    <Text>Token {index + 1} Mint Address</Text>,\r\n    <>Token mint address for token {index + 1}.</>,\r\n  );\r\n  const [quantity, setQuantity] = useState('');\r\n\r\n  useEffect(() => {\r\n    let change: InitialAsset;\r\n    if (mintInfo && parseFloat(quantity) >= 0) {\r\n      let parsedQuantity = Math.round(\r\n        10 ** mintInfo.decimals * parseFloat(quantity),\r\n      );\r\n      change = {\r\n        mint: mintInfo.address,\r\n        quantity: parsedQuantity,\r\n        valid: true,\r\n      };\r\n    } else {\r\n      change = { valid: false };\r\n    }\r\n    setInitialAssets((assets: InitialAsset[]) =>\r\n      assets.map((old, i) => (i === index ? change : old)),\r\n    );\r\n  }, [setInitialAssets, index, mintInfo, quantity]);\r\n\r\n  return (\r\n    <>\r\n      {mintInput}\r\n      <Form.Item\r\n        label={\r\n          <Tooltip\r\n            title={\r\n              <>\r\n                Initial quantity of token {index + 1} to deposit into the pool.\r\n              </>\r\n            }\r\n          >\r\n            Token {index + 1} Initial Quantity\r\n          </Tooltip>\r\n        }\r\n        name={`quantity${index}`}\r\n        validateStatus={'success'}\r\n      >\r\n        <Input\r\n          value={quantity}\r\n          onChange={(e) => setQuantity(e.target.value.trim())}\r\n          type=\"number\"\r\n          min=\"0\"\r\n          step=\"any\"\r\n        />\r\n      </Form.Item>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { abbreviateAddress } from '../utils/utils';\r\nimport { useMintToTickers } from '../utils/tokens';\r\nimport { Popover } from 'antd';\r\nimport LinkAddress from './LinkAddress';\r\nimport { InfoCircleOutlined } from '@ant-design/icons';\r\n\r\nexport function MintName({\r\n  mint,\r\n  showAddress = false,\r\n}: {\r\n  mint: string | PublicKey | null | undefined;\r\n  showAddress?: boolean;\r\n}) {\r\n  const mintToTickers = useMintToTickers();\r\n  if (!mint) {\r\n    return null;\r\n  }\r\n  const mintKey = typeof mint === 'string' ? new PublicKey(mint) : mint;\r\n  const mintAddress = typeof mint === 'string' ? mint : mint.toBase58();\r\n  const ticker = mintToTickers[mintAddress] ?? abbreviateAddress(mintKey);\r\n\r\n  return (\r\n    <>\r\n      {ticker}\r\n      {showAddress ? (\r\n        <>\r\n          {' '}\r\n          <Popover\r\n            content={<LinkAddress address={mintAddress} />}\r\n            placement=\"bottomRight\"\r\n            title=\"Token mint\"\r\n            trigger=\"hover\"\r\n          >\r\n            <InfoCircleOutlined style={{ color: '#2abdd2' }} />\r\n          </Popover>\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n","import { Basket, PoolInfo } from '@project-serum/pool';\r\nimport React from 'react';\r\nimport BN from 'bn.js';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { useAccountInfo } from '../../../utils/connection';\r\nimport { parseTokenMintData } from '../../../utils/tokens';\r\nimport { Spin } from 'antd';\r\nimport { MintName } from '../../../components/MintName';\r\n\r\ninterface BasketDisplayProps {\r\n  poolInfo: PoolInfo;\r\n  basket?: Basket | null | undefined;\r\n}\r\n\r\nexport default function PoolBasketDisplay({\r\n  poolInfo,\r\n  basket,\r\n}: BasketDisplayProps) {\r\n  return (\r\n    <ul>\r\n      {poolInfo.state.assets.map((asset, index) => (\r\n        <BasketItem\r\n          key={index}\r\n          mint={asset.mint}\r\n          quantity={basket?.quantities[index]}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\ninterface BasketItemProps {\r\n  mint: PublicKey;\r\n  quantity?: BN;\r\n}\r\n\r\nfunction BasketItem({ mint, quantity }: BasketItemProps) {\r\n  const [mintAccountInfo] = useAccountInfo(mint);\r\n  let quantityDisplay = <Spin size=\"small\" />;\r\n  if (mintAccountInfo && quantity) {\r\n    const mintInfo = parseTokenMintData(mintAccountInfo.data);\r\n    quantityDisplay = <>{quantity.toNumber() / 10 ** mintInfo.decimals}</>;\r\n  }\r\n\r\n  return (\r\n    <li>\r\n      {quantityDisplay} <MintName mint={mint} showAddress />\r\n    </li>\r\n  );\r\n}\r\n","import { getPoolBasket, PoolInfo } from '@project-serum/pool';\r\nimport React from 'react';\r\nimport FloatingElement from '../../../components/layout/FloatingElement';\r\nimport { Typography } from 'antd';\r\nimport { MintInfo } from '../../../utils/tokens';\r\nimport { useAsyncData } from '../../../utils/fetch-loop';\r\nimport { useConnection } from '../../../utils/connection';\r\nimport tuple from 'immutable-tuple';\r\nimport PoolBasketDisplay from './PoolBasketDisplay';\r\n\r\nconst { Text, Paragraph } = Typography;\r\n\r\ninterface PoolInfoProps {\r\n  poolInfo: PoolInfo;\r\n  mintInfo: MintInfo;\r\n}\r\n\r\nconst feeFormat = new Intl.NumberFormat(undefined, {\r\n  style: 'percent',\r\n  minimumFractionDigits: 0,\r\n  maximumFractionDigits: 6,\r\n});\r\n\r\nexport default function PoolInfoPanel({ poolInfo, mintInfo }: PoolInfoProps) {\r\n  const connection = useConnection();\r\n\r\n  const [totalBasket] = useAsyncData(\r\n    () => getPoolBasket(connection, poolInfo, { redeem: mintInfo.supply }),\r\n    tuple(getPoolBasket, connection, poolInfo, 'total', mintInfo),\r\n  );\r\n\r\n  return (\r\n    <FloatingElement stretchVertical>\r\n      <Paragraph>Name: {poolInfo.state.name}</Paragraph>\r\n      <Paragraph>\r\n        Address: <Text copyable>{poolInfo.address.toBase58()}</Text>\r\n      </Paragraph>\r\n      <Paragraph>\r\n        Pool token mint address:{' '}\r\n        <Text copyable>{poolInfo.state.poolTokenMint.toBase58()}</Text>\r\n      </Paragraph>\r\n      {poolInfo.state.adminKey ? (\r\n        <Paragraph>\r\n          Pool admin: <Text copyable>{poolInfo.state.adminKey.toBase58()}</Text>\r\n        </Paragraph>\r\n      ) : null}\r\n      <Paragraph>\r\n        Fee rate: {feeFormat.format(poolInfo.state.feeRate / 1_000_000)}\r\n      </Paragraph>\r\n      <Paragraph>\r\n        Total supply: {mintInfo.supply.toNumber() / 10 ** mintInfo.decimals}\r\n      </Paragraph>\r\n      <Text>Total assets:</Text>\r\n      <div>\r\n        <PoolBasketDisplay poolInfo={poolInfo} basket={totalBasket} />\r\n      </div>\r\n    </FloatingElement>\r\n  );\r\n}\r\n","import { getPoolBasket, PoolInfo, PoolTransactions } from '@project-serum/pool';\r\nimport React, { useMemo, useState } from 'react';\r\nimport FloatingElement from '../../../components/layout/FloatingElement';\r\nimport { Button, Input, Spin, Tabs, Typography } from 'antd';\r\nimport { MintInfo } from '../../../utils/tokens';\r\nimport { useAsyncData } from '../../../utils/fetch-loop';\r\nimport { useConnection } from '../../../utils/connection';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport tuple from 'immutable-tuple';\r\nimport PoolBasketDisplay from './PoolBasketDisplay';\r\nimport BN from 'bn.js';\r\nimport { notify } from '../../../utils/notifications';\r\nimport { useWallet } from '../../../utils/wallet';\r\nimport { useTokenAccounts } from '../../../utils/markets';\r\nimport { sendTransaction } from '../../../utils/send';\r\n\r\nconst { Text } = Typography;\r\nconst { TabPane } = Tabs;\r\n\r\ninterface PoolCreateRedeemPanel {\r\n  poolInfo: PoolInfo;\r\n  mintInfo: MintInfo;\r\n}\r\n\r\nexport default function PoolCreateRedeemPanel({\r\n  poolInfo,\r\n  mintInfo,\r\n}: PoolCreateRedeemPanel) {\r\n  return (\r\n    <FloatingElement stretchVertical>\r\n      <Tabs>\r\n        <TabPane tab=\"Create\" key=\"create\">\r\n          <CreateRedeemTab\r\n            poolInfo={poolInfo}\r\n            mintInfo={mintInfo}\r\n            tab=\"create\"\r\n          />\r\n        </TabPane>\r\n        <TabPane tab=\"Redeem\" key=\"redeem\">\r\n          <CreateRedeemTab\r\n            poolInfo={poolInfo}\r\n            mintInfo={mintInfo}\r\n            tab=\"redeem\"\r\n          />\r\n        </TabPane>\r\n      </Tabs>\r\n    </FloatingElement>\r\n  );\r\n}\r\n\r\ninterface CreateRedeemInnerPanel {\r\n  poolInfo: PoolInfo;\r\n  mintInfo: MintInfo;\r\n  tab: string;\r\n}\r\n\r\nfunction CreateRedeemTab({ poolInfo, mintInfo, tab }: CreateRedeemInnerPanel) {\r\n  const connection = useConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [quantity, setQuantity] = useState('');\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  const action = useMemo(() => {\r\n    const parsedQuantity = Math.round(\r\n      parseFloat(quantity) * 10 ** mintInfo.decimals,\r\n    );\r\n    if (parsedQuantity > 0) {\r\n      if (tab === 'create') {\r\n        return { create: new BN(parsedQuantity) };\r\n      } else {\r\n        return { redeem: new BN(parsedQuantity) };\r\n      }\r\n    }\r\n    return null;\r\n  }, [mintInfo.decimals, quantity, tab]);\r\n\r\n  const [basket, basketLoaded] = useAsyncData(\r\n    async () =>\r\n      action ? await getPoolBasket(connection, poolInfo, action) : null,\r\n    tuple(getPoolBasket, connection, poolInfo.address.toBase58(), action),\r\n  );\r\n\r\n  function findTokenAccount(mint: PublicKey): PublicKey {\r\n    const account = tokenAccounts?.find((account) =>\r\n      account.effectiveMint.equals(mint),\r\n    );\r\n    if (account) {\r\n      return account.pubkey;\r\n    }\r\n    throw new Error('No token account for ' + mint.toBase58());\r\n  }\r\n\r\n  const canSubmit = connected && action && basket;\r\n\r\n  async function onSubmit(e) {\r\n    e.preventDefault();\r\n    if (!action || !basket || !connected || !canSubmit) {\r\n      return;\r\n    }\r\n    setSubmitting(true);\r\n    try {\r\n      const { transaction, signers } = PoolTransactions.execute(\r\n        poolInfo,\r\n        action,\r\n        {\r\n          owner: wallet.publicKey,\r\n          poolTokenAccount: findTokenAccount(poolInfo.state.poolTokenMint),\r\n          assetAccounts: poolInfo.state.assets.map((asset) =>\r\n            findTokenAccount(asset.mint),\r\n          ),\r\n        },\r\n        basket,\r\n      );\r\n      await sendTransaction({ connection, wallet, transaction, signers });\r\n    } catch (e) {\r\n      console.warn(e);\r\n      notify({\r\n        message:\r\n          'Error ' +\r\n          (tab === 'create' ? 'creating' : 'redeeming') +\r\n          ' pool tokens',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <Input\r\n        addonBefore={<>Quantity</>}\r\n        value={quantity}\r\n        onChange={(e) => setQuantity(e.target.value.trim())}\r\n        style={{ marginBottom: 24 }}\r\n      />\r\n      <div>\r\n        {!basket ? (\r\n          basketLoaded ? null : (\r\n            <Spin />\r\n          )\r\n        ) : (\r\n          <>\r\n            <Text>{tab === 'create' ? 'Cost' : 'Proceeds'}: </Text>\r\n            <Text type=\"secondary\">(indicative only)</Text>\r\n            <PoolBasketDisplay poolInfo={poolInfo} basket={basket} />\r\n          </>\r\n        )}\r\n      </div>\r\n      <Button\r\n        htmlType=\"submit\"\r\n        type=\"primary\"\r\n        disabled={!canSubmit || submitting}\r\n      >\r\n        {!connected ? 'Wallet not connected' : 'Submit'}\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n","import { PoolInfo } from '@project-serum/pool';\r\nimport React from 'react';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { useAccountInfo } from '../../../utils/connection';\r\nimport {\r\n  parseTokenAccountData,\r\n  parseTokenMintData,\r\n} from '../../../utils/tokens';\r\nimport { Button, Spin, Tabs } from 'antd';\r\nimport FloatingElement from '../../../components/layout/FloatingElement';\r\nimport { useTokenAccounts } from '../../../utils/markets';\r\nimport { MintName } from '../../../components/MintName';\r\nimport { LinkOutlined } from '@ant-design/icons';\r\nimport { WRAPPED_SOL_MINT } from '@project-serum/serum/lib/token-instructions';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport default function PoolBalancesPanel({\r\n  poolInfo,\r\n}: {\r\n  poolInfo: PoolInfo;\r\n}) {\r\n  return (\r\n    <FloatingElement>\r\n      <Tabs>\r\n        <TabPane tab=\"Wallet Balances\" key=\"wallet\">\r\n          <WalletBalancesTab poolInfo={poolInfo} />\r\n        </TabPane>\r\n        <TabPane tab=\"Pool Balances\" key=\"pool\">\r\n          <PoolBalancesTab poolInfo={poolInfo} />\r\n        </TabPane>\r\n      </Tabs>\r\n    </FloatingElement>\r\n  );\r\n}\r\n\r\nfunction WalletBalancesTab({ poolInfo }: { poolInfo: PoolInfo }) {\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  return (\r\n    <ul>\r\n      {[\r\n        poolInfo.state.poolTokenMint,\r\n        ...poolInfo.state.assets.map((asset) => asset.mint),\r\n      ].map((mint, index) => {\r\n        const tokenAccount = tokenAccounts?.find((account) =>\r\n          account.effectiveMint.equals(mint),\r\n        );\r\n        if (!tokenAccount) {\r\n          return null;\r\n        }\r\n        return (\r\n          <BalanceItem\r\n            key={index}\r\n            mint={mint}\r\n            publicKey={tokenAccount.pubkey}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nfunction PoolBalancesTab({ poolInfo }: { poolInfo: PoolInfo }) {\r\n  return (\r\n    <ul>\r\n      {poolInfo.state.assets.map((asset, index) => {\r\n        return (\r\n          <BalanceItem\r\n            key={index}\r\n            mint={asset.mint}\r\n            publicKey={asset.vaultAddress}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\ninterface BalanceItemProps {\r\n  mint: PublicKey;\r\n  publicKey: PublicKey;\r\n}\r\n\r\nfunction BalanceItem({ mint, publicKey }: BalanceItemProps) {\r\n  const [mintAccountInfo] = useAccountInfo(mint);\r\n  const [balanceAccountInfo] = useAccountInfo(publicKey);\r\n  let quantityDisplay = <Spin size=\"small\" />;\r\n  if (mintAccountInfo && balanceAccountInfo) {\r\n    const mintInfo = parseTokenMintData(mintAccountInfo.data);\r\n    if (mint.equals(WRAPPED_SOL_MINT)) {\r\n      quantityDisplay = (\r\n        <>{balanceAccountInfo.lamports / 10 ** mintInfo.decimals}</>\r\n      );\r\n    } else {\r\n      const accountInfo = parseTokenAccountData(balanceAccountInfo.data);\r\n      quantityDisplay = <>{accountInfo.amount / 10 ** mintInfo.decimals}</>;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <li>\r\n      {quantityDisplay} <MintName mint={mint} />{' '}\r\n      <Button\r\n        type=\"link\"\r\n        icon={<LinkOutlined />}\r\n        href={'https://explorer.solana.com/address/' + publicKey.toBase58()}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      />\r\n    </li>\r\n  );\r\n}\r\n","import React, { FormEvent, useMemo, useState } from 'react';\r\nimport { AdminControlledPoolInstructions, PoolInfo } from '@project-serum/pool';\r\nimport { TokenInstructions } from '@project-serum/serum';\r\nimport FloatingElement from '../../../components/layout/FloatingElement';\r\nimport { useConnection } from '../../../utils/connection';\r\nimport { useWallet } from '../../../utils/wallet';\r\nimport {\r\n  getSelectedTokenAccountForMint,\r\n  useTokenAccounts,\r\n} from '../../../utils/markets';\r\nimport { sendTransaction } from '../../../utils/send';\r\nimport { notify } from '../../../utils/notifications';\r\nimport {\r\n  Account,\r\n  PublicKey,\r\n  SystemProgram,\r\n  Transaction,\r\n} from '@solana/web3.js';\r\nimport { AutoComplete, Button, Input, Select, Tabs } from 'antd';\r\nimport {\r\n  createAssociatedTokenAccount,\r\n  getAssociatedTokenAddress,\r\n} from '@project-serum/associated-token';\r\nimport { parseTokenMintData, useMintToTickers } from '../../../utils/tokens';\r\nimport BN from 'bn.js';\r\nimport { refreshAllCaches } from '../../../utils/fetch-loop';\r\n\r\nconst { TabPane } = Tabs;\r\nconst { Option } = Select;\r\n\r\nexport function PoolAdminPanel({ poolInfo }: { poolInfo: PoolInfo }) {\r\n  return (\r\n    <FloatingElement>\r\n      <Tabs>\r\n        <TabPane tab=\"Pause/Unpause\" key=\"pause\">\r\n          <PauseUnpauseTab poolInfo={poolInfo} />\r\n        </TabPane>\r\n        <TabPane tab=\"Add Token\" key=\"addAsset\">\r\n          <AddAssetTab poolInfo={poolInfo} />\r\n        </TabPane>\r\n        <TabPane tab=\"Remove Token\" key=\"removeAsset\">\r\n          <RemoveAssetTab poolInfo={poolInfo} />\r\n        </TabPane>\r\n        <TabPane tab=\"Deposit\" key=\"deposit\">\r\n          <DepositTab poolInfo={poolInfo} />\r\n        </TabPane>\r\n        <TabPane tab=\"Withdraw\" key=\"withdraw\">\r\n          <WithdrawTab poolInfo={poolInfo} />\r\n        </TabPane>\r\n        <TabPane tab=\"Modify Fee\" key=\"updateFee\">\r\n          <UpdateFeeTab poolInfo={poolInfo} />\r\n        </TabPane>\r\n      </Tabs>\r\n    </FloatingElement>\r\n  );\r\n}\r\n\r\ninterface TabParams {\r\n  poolInfo: PoolInfo;\r\n}\r\n\r\nfunction PauseUnpauseTab({ poolInfo }: TabParams) {\r\n  const connection = useConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  async function sendPause() {\r\n    if (!connected) {\r\n      return;\r\n    }\r\n    setSubmitting(true);\r\n    try {\r\n      const transaction = new Transaction();\r\n      transaction.add(AdminControlledPoolInstructions.pause(poolInfo));\r\n      await sendTransaction({ connection, wallet, transaction });\r\n    } catch (e) {\r\n      notify({\r\n        message: 'Error pausing pool',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n\r\n  async function sendUnpause() {\r\n    if (!connected) {\r\n      return;\r\n    }\r\n    setSubmitting(true);\r\n    try {\r\n      const transaction = new Transaction();\r\n      transaction.add(AdminControlledPoolInstructions.unpause(poolInfo));\r\n      await sendTransaction({ connection, wallet, transaction });\r\n    } catch (e) {\r\n      notify({\r\n        message: 'Error unpausing pool',\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={sendPause} disabled={submitting}>\r\n        Pause\r\n      </Button>{' '}\r\n      <Button onClick={sendUnpause} disabled={submitting}>\r\n        Unpause\r\n      </Button>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction AddAssetTab({ poolInfo }: TabParams) {\r\n  const connection = useConnection();\r\n  const [address, setAddress] = useState('');\r\n  const { wallet, connected } = useWallet();\r\n  const canSubmit = connected && address;\r\n  const [onSubmit, submitting] = useOnSubmitHandler(\r\n    'adding asset to pool',\r\n    async () => {\r\n      const mintAddress = new PublicKey(address);\r\n      const vaultAddress = await getAssociatedTokenAddress(\r\n        poolInfo.state.vaultSigner,\r\n        mintAddress,\r\n      );\r\n      const transaction = new Transaction();\r\n      if (!(await connection.getAccountInfo(vaultAddress))) {\r\n        transaction.add(\r\n          await createAssociatedTokenAccount(\r\n            wallet.publicKey,\r\n            poolInfo.state.vaultSigner,\r\n            mintAddress,\r\n          ),\r\n        );\r\n      }\r\n      transaction.add(\r\n        AdminControlledPoolInstructions.addAsset(poolInfo, vaultAddress),\r\n      );\r\n      return [transaction, []];\r\n    },\r\n  );\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <MintSelector\r\n        label=\"Token Mint Address\"\r\n        value={address}\r\n        onChange={(value) => setAddress(value)}\r\n        style={{ marginBottom: 24 }}\r\n      />\r\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction RemoveAssetTab({ poolInfo }: TabParams) {\r\n  const [address, setAddress] = useState('');\r\n  const { connected } = useWallet();\r\n  const canSubmit = connected && address;\r\n  const [onSubmit, submitting] = useOnSubmitHandler(\r\n    'removing asset from pool',\r\n    async () => {\r\n      const mintAddress = new PublicKey(address);\r\n      const vaultAddress = poolInfo.state.assets.find((asset) =>\r\n        asset.mint.equals(mintAddress),\r\n      )?.vaultAddress;\r\n      if (!vaultAddress) {\r\n        throw new Error('Asset not in pool');\r\n      }\r\n      const transaction = new Transaction();\r\n      transaction.add(\r\n        AdminControlledPoolInstructions.removeAsset(poolInfo, vaultAddress),\r\n      );\r\n      return [transaction, []];\r\n    },\r\n  );\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <MintInPoolSelector\r\n        poolInfo={poolInfo}\r\n        label=\"Token Mint Address\"\r\n        value={address}\r\n        onChange={(value) => setAddress(value)}\r\n        style={{ marginBottom: 24 }}\r\n      />\r\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction DepositTab({ poolInfo }: TabParams) {\r\n  const [address, setAddress] = useState('');\r\n  const [quantity, setQuantity] = useState('');\r\n\r\n  const connection = useConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const canSubmit =\r\n    connected && address && tokenAccounts && parseFloat(quantity);\r\n\r\n  const [onSubmit, submitting] = useOnSubmitHandler(\r\n    'depositing to pool',\r\n    async () => {\r\n      const mintAddress = new PublicKey(address);\r\n      const vaultAddress = poolInfo.state.assets.find((asset) =>\r\n        asset.mint.equals(mintAddress),\r\n      )?.vaultAddress;\r\n      if (!vaultAddress) {\r\n        throw new Error('Asset not in pool');\r\n      }\r\n\r\n      const walletTokenAccount = getSelectedTokenAccountForMint(\r\n        tokenAccounts,\r\n        mintAddress,\r\n      );\r\n      if (!walletTokenAccount) {\r\n        throw new Error('Asset not in wallet');\r\n      }\r\n\r\n      const mintAccountInfo = await connection.getAccountInfo(mintAddress);\r\n      if (!mintAccountInfo) {\r\n        throw new Error('Mint not found');\r\n      }\r\n      const mintDecimals = parseTokenMintData(mintAccountInfo.data).decimals;\r\n      const parsedQuantity = Math.round(\r\n        parseFloat(quantity) * 10 ** mintDecimals,\r\n      );\r\n\r\n      const wrappedSolAccount =\r\n        mintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT) &&\r\n        walletTokenAccount.pubkey.equals(wallet.publicKey)\r\n          ? new Account()\r\n          : null;\r\n\r\n      const transaction = new Transaction();\r\n      const signers: Account[] = [];\r\n      if (wrappedSolAccount) {\r\n        transaction.add(\r\n          SystemProgram.createAccount({\r\n            fromPubkey: wallet.publicKey,\r\n            lamports: parsedQuantity + 2.04e6,\r\n            newAccountPubkey: wrappedSolAccount.publicKey,\r\n            programId: TokenInstructions.TOKEN_PROGRAM_ID,\r\n            space: 165,\r\n          }),\r\n          TokenInstructions.initializeAccount({\r\n            account: wrappedSolAccount.publicKey,\r\n            mint: TokenInstructions.WRAPPED_SOL_MINT,\r\n            owner: wallet.publicKey,\r\n          }),\r\n          TokenInstructions.transfer({\r\n            source: wrappedSolAccount.publicKey,\r\n            destination: vaultAddress,\r\n            amount: parsedQuantity,\r\n            owner: wallet.publicKey,\r\n          }),\r\n          TokenInstructions.closeAccount({\r\n            source: wrappedSolAccount.publicKey,\r\n            destination: walletTokenAccount.pubkey,\r\n            owner: wallet.publicKey,\r\n          }),\r\n        );\r\n        signers.push(wrappedSolAccount);\r\n      } else {\r\n        transaction.add(\r\n          TokenInstructions.transfer({\r\n            source: walletTokenAccount.pubkey,\r\n            destination: vaultAddress,\r\n            amount: parsedQuantity,\r\n            owner: wallet.publicKey,\r\n          }),\r\n        );\r\n      }\r\n      return [transaction, signers];\r\n    },\r\n    true,\r\n  );\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <MintInPoolSelector\r\n        poolInfo={poolInfo}\r\n        label=\"Token Mint Address\"\r\n        value={address}\r\n        onChange={(value) => setAddress(value)}\r\n        style={{ marginBottom: 24 }}\r\n      />\r\n      <Input\r\n        addonBefore={<>Quantity</>}\r\n        value={quantity}\r\n        onChange={(e) => setQuantity(e.target.value.trim())}\r\n        style={{ marginBottom: 24 }}\r\n      />\r\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction WithdrawTab({ poolInfo }: TabParams) {\r\n  const [address, setAddress] = useState('');\r\n  const [quantity, setQuantity] = useState('');\r\n\r\n  const connection = useConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const canSubmit =\r\n    connected && address && tokenAccounts && parseFloat(quantity);\r\n\r\n  const [onSubmit, submitting] = useOnSubmitHandler(\r\n    'withdrawing from pool',\r\n    async () => {\r\n      const mintAddress = new PublicKey(address);\r\n      const vaultAddress = poolInfo.state.assets.find((asset) =>\r\n        asset.mint.equals(mintAddress),\r\n      )?.vaultAddress;\r\n      if (!vaultAddress) {\r\n        throw new Error('Asset not in pool');\r\n      }\r\n\r\n      const walletTokenAccount = getSelectedTokenAccountForMint(\r\n        tokenAccounts,\r\n        mintAddress,\r\n      );\r\n      if (!walletTokenAccount) {\r\n        throw new Error('Asset not in wallet');\r\n      }\r\n\r\n      const mintAccountInfo = await connection.getAccountInfo(mintAddress);\r\n      if (!mintAccountInfo) {\r\n        throw new Error('Mint not found');\r\n      }\r\n      const mintDecimals = parseTokenMintData(mintAccountInfo.data).decimals;\r\n      const parsedQuantity = Math.round(\r\n        parseFloat(quantity) * 10 ** mintDecimals,\r\n      );\r\n\r\n      const wrappedSolAccount =\r\n        mintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT) &&\r\n        walletTokenAccount.pubkey.equals(wallet.publicKey)\r\n          ? new Account()\r\n          : null;\r\n\r\n      const transaction = new Transaction();\r\n      const signers: Account[] = [];\r\n      if (wrappedSolAccount) {\r\n        transaction.add(\r\n          SystemProgram.createAccount({\r\n            fromPubkey: wallet.publicKey,\r\n            lamports: 2.04e6,\r\n            newAccountPubkey: wrappedSolAccount.publicKey,\r\n            programId: TokenInstructions.TOKEN_PROGRAM_ID,\r\n            space: 165,\r\n          }),\r\n          TokenInstructions.initializeAccount({\r\n            account: wrappedSolAccount.publicKey,\r\n            mint: TokenInstructions.WRAPPED_SOL_MINT,\r\n            owner: wallet.publicKey,\r\n          }),\r\n        );\r\n        signers.push(wrappedSolAccount);\r\n      }\r\n      transaction.add(\r\n        AdminControlledPoolInstructions.approveDelegate(\r\n          poolInfo,\r\n          vaultAddress,\r\n          wallet.publicKey,\r\n          new BN(parsedQuantity),\r\n        ),\r\n      );\r\n      if (wrappedSolAccount) {\r\n        transaction.add(\r\n          TokenInstructions.transfer({\r\n            source: vaultAddress,\r\n            destination: wrappedSolAccount.publicKey,\r\n            amount: parsedQuantity,\r\n            owner: wallet.publicKey,\r\n          }),\r\n          TokenInstructions.closeAccount({\r\n            source: wrappedSolAccount.publicKey,\r\n            destination: walletTokenAccount.pubkey,\r\n            owner: wallet.publicKey,\r\n          }),\r\n        );\r\n      } else {\r\n        transaction.add(\r\n          TokenInstructions.transfer({\r\n            source: vaultAddress,\r\n            destination: walletTokenAccount.pubkey,\r\n            amount: parsedQuantity,\r\n            owner: wallet.publicKey,\r\n          }),\r\n        );\r\n      }\r\n      return [transaction, signers];\r\n    },\r\n  );\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <MintInPoolSelector\r\n        poolInfo={poolInfo}\r\n        label=\"Token Mint Address\"\r\n        value={address}\r\n        onChange={(value) => setAddress(value)}\r\n        style={{ marginBottom: 24 }}\r\n      />\r\n      <Input\r\n        addonBefore={<>Quantity</>}\r\n        value={quantity}\r\n        onChange={(e) => setQuantity(e.target.value.trim())}\r\n        style={{ marginBottom: 24 }}\r\n      />\r\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction UpdateFeeTab({ poolInfo }: TabParams) {\r\n  const [feeRate, setFeeRate] = useState('');\r\n\r\n  const { connected } = useWallet();\r\n  const [tokenAccounts] = useTokenAccounts();\r\n  const canSubmit = connected && tokenAccounts && parseFloat(feeRate);\r\n\r\n  const [onSubmit, submitting] = useOnSubmitHandler(\r\n    'changing pool fee',\r\n    async () => {\r\n      const transaction = new Transaction();\r\n      transaction.add(\r\n        AdminControlledPoolInstructions.updateFee(\r\n          poolInfo,\r\n          Math.round(parseFloat(feeRate) * 1_000_000),\r\n        ),\r\n      );\r\n      return [transaction, []];\r\n    },\r\n  );\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <Input\r\n        addonBefore={<>Fee Rate</>}\r\n        value={feeRate}\r\n        onChange={(e) => setFeeRate(e.target.value.trim())}\r\n        style={{ marginBottom: 24 }}\r\n      />\r\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction useOnSubmitHandler(\r\n  description: string,\r\n  makeTransaction: () => Promise<[Transaction, Account[]]>,\r\n  refresh = false,\r\n): [(FormEvent) => void, boolean] {\r\n  const connection = useConnection();\r\n  const { wallet, connected } = useWallet();\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  async function onSubmit(e: FormEvent) {\r\n    e.preventDefault();\r\n    if (submitting) {\r\n      return;\r\n    }\r\n    setSubmitting(true);\r\n    try {\r\n      if (!connected) {\r\n        throw new Error('Wallet not connected');\r\n      }\r\n      const [transaction, signers] = await makeTransaction();\r\n      await sendTransaction({ connection, wallet, transaction, signers });\r\n      if (refresh) {\r\n        refreshAllCaches();\r\n      }\r\n    } catch (e) {\r\n      notify({\r\n        message: `Error ${description}`,\r\n        description: e.message,\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n\r\n  return [onSubmit, submitting];\r\n}\r\n\r\nfunction SubmitButton({ canSubmit, submitting }) {\r\n  const { connected } = useWallet();\r\n  return (\r\n    <Button\r\n      htmlType=\"submit\"\r\n      type=\"primary\"\r\n      disabled={!canSubmit || submitting}\r\n    >\r\n      {!connected ? 'Wallet not connected' : 'Submit'}\r\n    </Button>\r\n  );\r\n}\r\n\r\nfunction MintInPoolSelector({\r\n  poolInfo,\r\n  label,\r\n  value,\r\n  onChange,\r\n  style,\r\n}: {\r\n  poolInfo: PoolInfo;\r\n  label: string;\r\n  value: string;\r\n  onChange: (string) => void;\r\n  style: any;\r\n}) {\r\n  const mintToTickers = useMintToTickers();\r\n  return (\r\n    <Input.Group style={style}>\r\n      <span className=\"ant-input-group-addon\">{label}</span>\r\n      <Select onChange={onChange} value={value} style={{ width: '100%' }}>\r\n        {poolInfo.state.assets.map((asset) => (\r\n          <Option value={asset.mint.toBase58()} key={asset.mint.toBase58()}>\r\n            {mintToTickers[asset.mint.toBase58()] ? (\r\n              <>\r\n                {mintToTickers[asset.mint.toBase58()]} ({asset.mint.toBase58()})\r\n              </>\r\n            ) : (\r\n              asset.mint.toBase58()\r\n            )}\r\n          </Option>\r\n        ))}\r\n      </Select>\r\n    </Input.Group>\r\n  );\r\n}\r\n\r\nfunction MintSelector({ label, style, value, onChange }) {\r\n  const mintToTickers = useMintToTickers();\r\n  const options = useMemo(() => {\r\n    return Object.entries(mintToTickers)\r\n      .filter(\r\n        ([mintAddress, ticker]) =>\r\n          mintAddress.includes(value) ||\r\n          ticker.toLowerCase().includes(value.toLowerCase()),\r\n      )\r\n      .map(([mintAddress, ticker]) => ({\r\n        value: mintAddress,\r\n        label: (\r\n          <>\r\n            {ticker} ({mintAddress})\r\n          </>\r\n        ),\r\n      }));\r\n  }, [mintToTickers, value]);\r\n  return (\r\n    <Input.Group style={style}>\r\n      <span className=\"ant-input-group-addon\">{label}</span>\r\n      <AutoComplete\r\n        options={options}\r\n        value={value}\r\n        onChange={(e) => onChange(e)}\r\n        style={{ width: '100%' }}\r\n      />\r\n    </Input.Group>\r\n  );\r\n}\r\n","import React, { useMemo } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Col, PageHeader, Row, Spin, Typography } from 'antd';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { useAccountInfo } from '../../../utils/connection';\r\nimport FloatingElement from '../../../components/layout/FloatingElement';\r\nimport {\r\n  decodePoolState,\r\n  isAdminControlledPool,\r\n  PoolInfo,\r\n} from '@project-serum/pool';\r\nimport PoolInfoPanel from './PoolInfoPanel';\r\nimport { parseTokenMintData } from '../../../utils/tokens';\r\nimport PoolCreateRedeemPanel from './PoolCreateRedeemPanel';\r\nimport PoolBalancesPanel from './PoolBalancesPanel';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { PoolAdminPanel } from './PoolAdminPanel';\r\nimport { useWallet } from '../../../utils/wallet';\r\n\r\nconst { Text } = Typography;\r\n\r\nexport default function PoolPage() {\r\n  const { poolAddress } = useParams();\r\n  const [poolAccountInfo, poolAccountLoaded] = useAccountInfo(\r\n    isPublicKey(poolAddress) ? new PublicKey(poolAddress) : null,\r\n  );\r\n  const history = useHistory();\r\n\r\n  const poolInfo: PoolInfo | null = useMemo(() => {\r\n    if (!poolAccountInfo) {\r\n      return null;\r\n    }\r\n    try {\r\n      return {\r\n        address: new PublicKey(poolAddress),\r\n        state: decodePoolState(poolAccountInfo.data),\r\n        program: poolAccountInfo.owner,\r\n      };\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  }, [poolAddress, poolAccountInfo]);\r\n  const [mintAccountInfo, mintAccountInfoLoaded] = useAccountInfo(\r\n    poolInfo?.state.poolTokenMint,\r\n  );\r\n  const mintInfo = useMemo(\r\n    () => (mintAccountInfo ? parseTokenMintData(mintAccountInfo.data) : null),\r\n    [mintAccountInfo],\r\n  );\r\n  const { wallet } = useWallet();\r\n\r\n  if (poolInfo && mintInfo) {\r\n    return (\r\n      <>\r\n        <PageHeader\r\n          title={<>Pool {poolInfo.address.toBase58()}</>}\r\n          onBack={() => history.push('/pools')}\r\n          subTitle={poolInfo.state.name}\r\n        />\r\n        <Row>\r\n          <Col xs={24} lg={12}>\r\n            <PoolInfoPanel poolInfo={poolInfo} mintInfo={mintInfo} />\r\n          </Col>\r\n          <Col xs={24} lg={12}>\r\n            <PoolCreateRedeemPanel poolInfo={poolInfo} mintInfo={mintInfo} />\r\n          </Col>\r\n          <Col xs={24}>\r\n            <PoolBalancesPanel poolInfo={poolInfo} />\r\n          </Col>\r\n          {wallet.connected &&\r\n          poolInfo.state.adminKey?.equals(wallet.publicKey) &&\r\n          isAdminControlledPool(poolInfo) ? (\r\n            <Col xs={24}>\r\n              <PoolAdminPanel poolInfo={poolInfo} />\r\n            </Col>\r\n          ) : null}\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader\r\n        title={<>Pool {poolAddress}</>}\r\n        onBack={() => history.push('/pools')}\r\n      />\r\n      <FloatingElement>\r\n        {!poolAccountLoaded || !mintAccountInfoLoaded ? (\r\n          <Spin />\r\n        ) : (\r\n          <Text>Invalid pool</Text>\r\n        )}\r\n      </FloatingElement>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction isPublicKey(address) {\r\n  try {\r\n    new PublicKey(address);\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n","import styled from 'styled-components';\r\nimport FloatingElement from '../../components/layout/FloatingElement';\r\nimport React, { useState } from 'react';\r\nimport { Button, Input, Typography } from 'antd';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Link from '../../components/Link';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst Wrapper = styled.div`\r\n  max-width: 700px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 24px;\r\n  margin-bottom: 24px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  margin-top: 16px;\r\n  margin-bottom: 48px;\r\n`;\r\n\r\nexport default function PoolListPage() {\r\n  const [poolAddress, setPoolAddress] = useState('');\r\n  const history = useHistory();\r\n\r\n  function onSubmit(e) {\r\n    e.preventDefault();\r\n    history.push(`/pools/${poolAddress}`);\r\n  }\r\n  return (\r\n    <Wrapper>\r\n      <FloatingElement>\r\n        <Title level={3}>Pools</Title>\r\n        <Form onSubmit={onSubmit}>\r\n          <Input\r\n            value={poolAddress}\r\n            onChange={(e) => setPoolAddress(e.target.value.trim())}\r\n            placeholder=\"Pool address\"\r\n          />\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Go\r\n          </Button>\r\n        </Form>\r\n        <Link to=\"/pools/new\">Create new pool</Link>\r\n      </FloatingElement>\r\n    </Wrapper>\r\n  );\r\n}\r\n","import { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport TradePage from './pages/TradePage';\r\nimport OpenOrdersPage from './pages/OpenOrdersPage';\r\nimport React from 'react';\r\nimport BalancesPage from './pages/BalancesPage';\r\nimport ConvertPage from './pages/ConvertPage';\r\nimport BasicLayout from './components/BasicLayout';\r\nimport ListNewMarketPage from './pages/ListNewMarketPage';\r\nimport NewPoolPage from './pages/pools/NewPoolPage';\r\nimport PoolPage from './pages/pools/PoolPage';\r\nimport PoolListPage from './pages/pools/PoolListPage';\r\n\r\nexport function Routes() {\r\n  return (\r\n    <>\r\n      <HashRouter basename={'/'}>\r\n        <BasicLayout>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={TradePage} />\r\n            <Route exact path=\"/orders\" component={OpenOrdersPage} />\r\n            <Route exact path=\"/balances\" component={BalancesPage} />\r\n            <Route exact path=\"/convert\" component={ConvertPage} />\r\n            <Route\r\n              exact\r\n              path=\"/list-new-market\"\r\n              component={ListNewMarketPage}\r\n            />\r\n            <Route exact path=\"/pools\">\r\n              <PoolListPage />\r\n            </Route>\r\n            <Route exact path=\"/pools/new\">\r\n              <NewPoolPage />\r\n            </Route>\r\n            <Route exact path=\"/pools/:poolAddress\">\r\n              <PoolPage />\r\n            </Route>\r\n          </Switch>\r\n        </BasicLayout>\r\n      </HashRouter>\r\n    </>\r\n  );\r\n}\r\n","import React, { Suspense } from 'react';\r\nimport './App.less';\r\nimport { ConnectionProvider } from './utils/connection';\r\nimport { MarketProvider } from './utils/markets';\r\nimport { WalletProvider } from './utils/wallet';\r\nimport { GlobalStyle } from './global_style';\r\nimport { Spin } from 'antd';\r\nimport ErrorBoundary from './components/ErrorBoundary';\r\nimport { Routes } from './routes';\r\nimport { PreferencesProvider } from './utils/preferences';\r\n\r\nexport default function App() {\r\n  return (\r\n    <Suspense fallback={() => <Spin size=\"large\" />}>\r\n      <GlobalStyle />\r\n      <ErrorBoundary>\r\n        <ConnectionProvider>\r\n          <MarketProvider>\r\n            <WalletProvider>\r\n              <PreferencesProvider>\r\n                <Suspense fallback={() => <Spin size=\"large\" />}>\r\n                  <Routes />\r\n                </Suspense>\r\n              </PreferencesProvider>\r\n            </WalletProvider>\r\n          </MarketProvider>\r\n        </ConnectionProvider>\r\n      </ErrorBoundary>\r\n    </Suspense>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}